[
  {
    "path": "README.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "\u003d +Work"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "image:https://travis-ci.org/AY1920S1-CS2103T-T12-1/main.svg?branch\u003dmaster[\"Build Status\", link\u003d\"https://travis-ci.org/AY1920S1-CS2103T-T12-1/main\"]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seahlynn"
        },
        "content": " \"Smash those deadlines\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "* This is a desktop project management application. It has a GUI but most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "* The application is targetted at NUS students who have to manage a group during a project, CCA etc."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "* Some parts of this sample application were inspired by the AddressBook-Level3 project created by https://se-education.org[SE-EDU Initiative]."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://openjfx.io/[JavaFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "ambhinav": 2,
      "seahlynn": 4,
      "-": 25
    }
  },
  {
    "path": "bin/main/view/CommandBox.fxml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "\u003cStackPane styleClass\u003d\"stack-pane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "  \u003cTextField fx:id\u003d\"commandTextField\" onAction\u003d\"#handleCommandEntered\" promptText\u003d\"Enter command here...\"/\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "\u003c/StackPane\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "elsakoh": 9
    }
  },
  {
    "path": "bin/main/view/DarkTheme.css",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "}"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "}"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "}"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "}"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "}"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "}"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "}"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "}"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "/*"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "elsakoh"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "elsakoh"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "elsakoh"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "elsakoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "}"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "}"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "}"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "}"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "}"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "}"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "}"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "}"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "}"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "}"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "}"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "}"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "}"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "}"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "}"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "}"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "}"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "}"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "}"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "}"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "#filterField, #taskListPanel, #taskWebpage {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "}"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "}"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "}"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "elsakoh": 352
    }
  },
  {
    "path": "bin/main/view/Extensions.css",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ".error {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-text-fill: #d06651 !important; /* The error class should always override the default text-fill style */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ".list-cell:empty {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    /* Empty cells will not have alternating colours */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-background: #383838;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ".tag-selector {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-border-color: white;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-border-radius: 3;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-background-radius: 3;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ".tooltip-text {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "elsakoh": 20
    }
  },
  {
    "path": "bin/main/view/HelpWindow.fxml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "\u003cfx:root resizable\u003d\"false\" title\u003d\"Help\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    \u003cImage url\u003d\"@/images/help_icon.png\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "         \u003cHBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "               \u003cLabel fx:id\u003d\"helpMessage\" text\u003d\"Label\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "                     \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "               \u003c/Label\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "               \u003cButton fx:id\u003d\"copyButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#copyUrl\" text\u003d\"Copy URL\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "                     \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "               \u003c/Button\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "            \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "            \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "elsakoh": 39
    }
  },
  {
    "path": "bin/main/view/MainWindow.fxml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "\u003cfx:root minHeight\u003d\"600\" minWidth\u003d\"450\" onCloseRequest\u003d\"#handleExit\" title\u003d\"+Work\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "        \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "        \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"200.0\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "        \u003cVBox minHeight\u003d\"500\" minWidth\u003d\"340\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "            \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "          \u003cStackPane fx:id\u003d\"userNavigableView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "elsakoh": 58
    }
  },
  {
    "path": "bin/main/view/ProjectDashboard.fxml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "\u003cHBox stylesheets\u003d\"@DarkTheme.css\" VBox.vgrow\u003d\"ALWAYS\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "  \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "      \u003cVBox minHeight\u003d\"600.0\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "            \u003cLabel id\u003d\"notStartedLabel\" contentDisplay\u003d\"CENTER\" text\u003d\"Not Started\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "          \u003cListView fx:id\u003d\"taskListViewNotStarted\" maxHeight\u003d\"800.0\" prefHeight\u003d\"600.0\" styleClass\u003d\"pane-with-border\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "      \u003cVBox minHeight\u003d\"600.0\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "            \u003cLabel id\u003d\"doingLabel\" alignment\u003d\"CENTER\" text\u003d\"Doing\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "          \u003cListView fx:id\u003d\"taskListViewDoing\" maxHeight\u003d\"800.0\" prefHeight\u003d\"600.0\" styleClass\u003d\"pane-with-border\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "      \u003cVBox minHeight\u003d\"600.0\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "            \u003cLabel id\u003d\"doneLabel\" alignment\u003d\"CENTER\" text\u003d\"Done\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "          \u003cListView fx:id\u003d\"taskListViewDone\" maxHeight\u003d\"800.0\" prefHeight\u003d\"600.0\" styleClass\u003d\"pane-with-border\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "  \u003c/children\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "elsakoh": 29
    }
  },
  {
    "path": "bin/main/view/ResultDisplay.fxml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "\u003cStackPane fx:id\u003d\"placeHolder\" styleClass\u003d\"pane-with-border\" xmlns\u003d\"http://javafx.com/javafx/8\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "  \u003cTextArea fx:id\u003d\"resultDisplay\" editable\u003d\"false\" styleClass\u003d\"result-display\"/\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "elsakoh": 9
    }
  },
  {
    "path": "bin/main/view/StatusBarFooter.fxml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "\u003cGridPane styleClass\u003d\"status-bar\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "  \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "  \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "  \u003cLabel fx:id\u003d\"saveLocationStatus\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "\u003c/GridPane\u003e"
      }
    ],
    "authorContributionMap": {
      "elsakoh": 12
    }
  },
  {
    "path": "bin/main/view/TaskListCard.fxml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "      \u003cLabel fx:id\u003d\"taskStatus\" text\u003d\"\\$first\" styleClass\u003d\"label\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "        \u003cLabel fx:id\u003d\"deadline\" text\u003d\"\\$first\" styleClass\u003d\"label\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "elsakoh": 2,
      "-": 33
    }
  },
  {
    "path": "bin/main/view/TaskListPanel.fxml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    \u003cListView fx:id\u003d\"taskListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "elsakoh": 1,
      "-": 7
    }
  },
  {
    "path": "bin/main/view/UserViewMain.fxml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "\u003c?import java.lang.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "\u003c?import java.util.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "\u003c?import javafx.scene.*?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "            xmlns:fx\u003d\"http://javafx.com/fxml\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "            fx:controller\u003d\"seedu.address.ui.UserViewController\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    \u003cStackPane fx:id\u003d\"userViewHolder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "elsakoh": 13
    }
  },
  {
    "path": "bin/test/view/UiPartTest/invalidFile.fxml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "Not a valid FXML file"
      }
    ],
    "authorContributionMap": {
      "elsakoh": 1
    }
  },
  {
    "path": "bin/test/view/UiPartTest/validFile.fxml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "\u003c?import seedu.address.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e"
      }
    ],
    "authorContributionMap": {
      "elsakoh": 4
    }
  },
  {
    "path": "bin/test/view/UiPartTest/validFileWithFxRoot.fxml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "\u003cfx:root type\u003d\"seedu.address.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "            xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "elsakoh": 6
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    id \u0027eclipse\u0027    //NEWSTUFF"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "archivesBaseName \u003d \u0027ITEXT\u0027      //NEWSTUFF"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "version \u003d \u00271\u0027                   //NEWSTUFF"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    compile \u0027com.itextpdf:itextpdf:5.5.4\u0027       //NEWSTUFF"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    archiveName \u003d \u0027pluswork.jar\u0027"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-name\u0027: \u0027AddressBook-Level3\u0027,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/se-edu/addressbook-level3\u0027,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "ambhinav": 1,
      "ArunBeCoding": 6,
      "-": 154
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "+Work was developed by the https://github.com/AY1920S1-CS2103T-T12-1/main[CS2103T T12-1] team. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "\u003d\u003d\u003d Abhinav Ramnath"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "image::ambhinav.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "{empty}[https://github.com/ambhinav[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "Role: Team Lead +"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "Responsibilities: Calendar Feature + Integration"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "\u003d\u003d\u003d Gabriel Seow"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "image::gabrielseow.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "{empty}[http://github.com/gabrielseow[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "Responsibilities: Project DashBoard Feature + Testing"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "\u003d\u003d\u003d Seah Lynn"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "image::seahlynn.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "{empty}[http://github.com/seahlynn[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "Responsibilities: Project Dashboard feature + Documentation"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "\u003d\u003d\u003d Elizabeth Koh"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "image::elsa.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "{empty}[http://github.com/elsakoh[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "Responsibilities: Project Dashboard + Documentation"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "\u003d\u003d\u003d Ravi Arun Kumarr"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "image::arun.PNG[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "{empty}[http://github.com/ArunBeCoding[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "Responsibilities: Inventory and Storage feature"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "ambhinav": 1,
      "seahlynn": 22,
      "-": 32
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/AY1920S1-CS2103T-T12-1/main/issues if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "* *Contributing* : Developer team currently working on the product, please do not contribute."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "* *Email us* : You can also reach us at `abhinav.r@u.nus.edu` or `raviarunkumarr_97@u.nus.edu`"
      }
    ],
    "authorContributionMap": {
      "ambhinav": 3,
      "-": 4
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "\u003d +Work - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-T12-1/main/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "By: `T12-1`      Since: `Sep 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cSettingUp#, here\u003e\u003e."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureDiagram.png[]"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "The `.puml` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the \u003c\u003cUsingPlantUml#, Using PlantUML guide\u003e\u003e to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has two classes called link:{repoURL}/src/main/java/seedu/address/Main.java[`Main`] and link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor, parses user input."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `add-member mn/Abhi`."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ".Component interactions for `add-member mn/Abhi` command"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureSequenceDiagram.png[]"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[]"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "The `UI` consists of a `MainWindow` that is made up of static and non-static parts e.g.`CommandBox`, `ResultDisplay`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "**Functionality of `UserView` classes:**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "`UserViewMain` is the component responsible for switching the user view. As it needs fetch data from the `Model`, it contains"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "a reference to `Logic`, hence Figure 4 shows an association between `UserViewMain` and `Logic`. The controller class of `UserViewMain` is `UserViewController`."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "Step 1: User enters a command."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "Step 2: `UserViewUpdate` parses said command and interacts with `UserViewMain` to display the requested layout."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "Step 3: `UserViewMain` interacts with `UserViewNavigator`, which obtains the"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "relevant data from `Logic`, to create the relevant `UiPart`. These `UiPart` components are the `MemberListPanel`,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "`ProjectDashBoardView` etc."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "Step 4: This component is then passed to `UserViewController` to set the current view of"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "`UserViewMain` component."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "Step 5: Users view is then switched successfully."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ".  `Logic` uses the `ProjectDashboardParser` class to parse the user command."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a task)."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeleteSequenceDiagram.png[]"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "NOTE: The lifeline for `DeleteTaskCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "image::ModelClassDiagramNew.png[]"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the Address Book data."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "* exposes the unmodifiable `ObservableList\u003cMember\u003e`, `ObservableList\u003cTask\u003e`, `ObservableList\u003cInventory\u003e` and `ObservableList\u003cMapping\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `Project Dashboard`, which `Member` or \u0027Task\u0027 can reference. This would allow `Project Dashboard` to only require one `Tag` object per unique `Tag`, instead of each `Member` or \u0027Task\u0027 needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "image:BetterModelClassDiagramNew.png[]"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "image::StorageClassDiagram.PNG[]"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the Address Book data in json format and read it back."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "\u003d\u003d\u003d [Proposed] Calendar feature"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "\u003d\u003d\u003d\u003d Proposed Implementation"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "The commands introduced by this feature include; `generate-timings`, `ics` import and commands."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "The commands are facilitated by `ProjectCalendar`. The various `ics` files of the members are parsed in this component."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "* `ProjectCalendar#generateTimings()` -- Generates the free times after on syncing `ics` calendars of members."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "* `ProjectCalendar#getAvailableTimings()` -- Retrieves the available timings of members."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "* `ProjectCalendar#importCalendar()` -- Import the member\u0027s calendar."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#generateTimings()`, `Model#getAvailableTimings()` and"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "`Model#importCalendar()`."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "Given below is an example usage scenario and how the various commands work."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "Step 1. The user launches the application. The `ProjectCalendar` will be initialised based on the"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "saved `ProjectCalendar`."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "Step 2. The user imports members\u0027 calendars by executing `import-calendar`."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "Step 3. The user executes `generate-timings` command."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "Step 4. +Work displays available meeting times for the project members."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Importing and storing calendars of users"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "* **Alternative 1 (current choice):** User specifies file path of `ics` file in command line."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "** Pros: Easier to implement, files can be stored in application."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "** Cons: User must enter file path, which is error prone."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "* **Alternative 2:** Upon execution of `import-calendar` a file chooser pops up to allow user to browse and upload file."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "** Pros: User can use UI to upload instead."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "** Cons: Due to constraints of application, a ui based upload may not be feasible (Possibly in v2.0)"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Flexibility in syncing calendars"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "* **Alternative 1 (current choice):** +Work syncs all calendars uploaded when `generate-timings` is executed"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "** Pros: Easier to implement."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "** Cons: User may be finding a suitable time for an event where only specific members are required, in which case timings"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "may not help as much."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "* **Alternative 2:** User can specify which members calendars to sync"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "** Pros: User can find more suitable timings for events which involve only specific members."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "** Cons: Association between members and their respective calendars must be rigorously tested to ensure accuracy of timings."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "May introduce complexity into storage and dependencies among components."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "\u003d\u003d\u003d [Proposed] Settings feature"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "\u003d\u003d\u003d\u003d Proposed Implementation"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "The commands introduced by this feature include; `theme light`, `theme dark`, `clock twenty_four` and `clock twelve`."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "The commands are facilitated by `UserSettings`. This component resides in model and contains the customisable settings available to"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "the user, which include `theme` and `clockFormat`."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "* `Settings#getTheme()` -- Retrieves the current theme applied to +Work."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "* `Settings#getClockFormat()` -- Retrieves the current clock format applied to +Work."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "* `Settings#setDarkTheme()` -- Sets the new theme of +Work to be `DARK`."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "* `Settings#setLightTheme()` -- Sets the new theme of +Work to be `LIGHT`."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "* `Settings#setTwelveHourFormat()` -- Sets the new clock format of +Work to be `TWELVE_HOUR`."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "* `Settings#setTwentyFourHourFormat()` -- Sets the new clock format of +Work to be `TWENTY_FOUR`."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#getTheme()`, `Model#getClockFormat()`, `Model#setDarkTheme()`,"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "`Model#setLightTheme()`, `Model#setTwelveHourFormat()`, `Model#setTwentyFourHourFormat()` respectively."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "To allow the `UI` to be responsive, two of the operations are similarly exposed in the `Logic` interface as `Logic#getTheme()` and"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "`Logic#getClockFormat()`."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "Given below is an example usage scenario and how the various commands work."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "Step 1. The user launches the application. The `UserSettings` will be initialised based on the"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "saved `UserSettings`."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "Assume that the previous setting for `theme` is `LIGHT`."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "Step 2. The user executes `theme dark` command to switch the theme of +Work to `DARK`."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "Step 3. `Logic` calls `Model#setDarkTheme()`, which calls `UserSettings#setDarkTheme()`, which changes `theme` attribute to"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "`DARK`."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "Step 4. `DARK` theme has been applied to +Work, and the settings have been updated and stored in the save file."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "The following sequence diagram shows how the `theme dark` operation works."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ".Operational flow of `ThemeCommand`"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "image::ThemeSequenceDiagram.png[]"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "NOTE: The lifeline for `ThemeCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "The `theme light` operation is similar to the one shown in figure 9. However, the method called is `setLightTheme`."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "[IMPORTANT]"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "The `clock twelve` and `clock twenty_four` have a similar operation to `theme dark` as well. There are two differences, `ClockCommand` replaces"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "`ThemeCommand` and the associated methods called in `Model` are different."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "This section explores how the design can affect the level of customisation available to the user through the settings feature in +Work."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Level of user customisation for +Work clock format"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "* **Alternative 1 (current choice):** User can change the display format of date and time only"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "** Pros: Easier to implement in terms of storage."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "** Cons: User has to remember to create new deadlines for tasks in 24 hour format only."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "* **Alternative 2:** User can change the input and display format of date and time"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "** Pros: User has greater flexibility in input of date and time."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "** Cons: We must ensure that during load and save of storage, the formatting does not cause any errors."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Level of user customisation for +Work themes"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "* **Alternative 1 (current choice):** User can change between light and dark only."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "** Pros: Easier to implement and maintain UI components and css files to ensure theme cascades consistently."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "** Cons: User is limited to two themes, which may affect their viewing preferences."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "* **Alternative 2:** User can import their own themes and use them."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "** Pros: User has greater flexibility in choosing themes for +Work."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "** Cons: We must ensure that all UI components switch themes consistently. This may take a long time to test, due to large number of views"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "offered by +Work. Furthermore the compatibility of the theme with JavaFx must be regarded as well."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "\u003d\u003d\u003d Statistics feature"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "The commands introduced by this statistics feature includes: `get-task-stats` and `get-member-stats`. These commands are faciliatated by the class \u0027Statistics\u0027 that resides within model. The \u0027Statistics\u0027 class implements the following operations:"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "* `Statistics#doCalculations()` -- Calculates the statistics needed using existing list of tasks, members and mappings."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "* `Statistics#getPortionMembersByTasks()` -- Retrieves statistics of all the members and number of tasks completed by the each individual member."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "* `Statistics#getPortionMembersByItems()` -- Retrieves statistics of all the members and number of items purchased by the each individual member."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "* `Statistics#getPortionTasksByStatus()` -- Retrieves statistics of all existing tasks and number of tasks of each status."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#doCalculations`, and \u0027Model#getStatistics\u0027."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "To allow the `UI` to be responsive, one of the operations is similarly exposed in the `Logic` interface as `Logic#getStatistics()\u0027"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "Given below is an example usage scenario and how the Statistics mechanism behaves at each step."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "Step 1. The user launches the application for the first time. The \u0027Statistics\u0027 will be initialised based on the data previously saved."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "Data previously saved refers to the statistics calculation done based on list of members, tasks and mappings saved."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "Step 2. The user executes `get-task-stats` command to retrieve statistics related to the tasks in the application."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "The `get-task-stats` command calls `Model#getFilteredTasksList()`, `Model#getFilteredMembersList()` and `Model#getFilteredMappingsList()` after updating all the lists to show all tasks/members/mappings, to obtain lists of all the members, tasks and mappings saved in the application. Using the lists, a Statistics object is formed. \u0027Model#setStatistics\u0027 is called to updated the statistics in ProjectDashboard."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "The following sequence diagram shows how the \u0027get-member-stats\u0027 operation works."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "image::GetStatisticsSequenceDiagram.png[]"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "Figure 10. Operational flow of \u0027GetStatisticsCommand\u0027"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "The \u0027get-member-stats\u0027 operation is similar to the one shown in figure 10."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "image::GetStatisticsActivityDiagram.png[]"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How to implement Statistics class"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "* **Alternative 1 (current choice):** One statistics object for the entire ProjectDashboard"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "** Pros: Easy to implement, centralised class for all statistics"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "** Cons: May have performance issues due to calculations involving large amounts of tasks and members."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "* **Alternative 2:** Individual statistic objects for members and tasks."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "** Pros: Will ensure faster performance,"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "** Cons: Design of statistics object has to be very well-implemented, might not have enough time to implement it by v1.3"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Display of Statistics for Project Dashboard"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "* **Alternative 1 (current choice):** Use a pie chart to represent information"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "** Pros: Easy for workload comparison"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "** Cons: Less details of individual taks and members exposed in the statistiscs page."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "* **Alternative 2:** Use a list to represent information"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "** Pros: Includes more details for individual elements"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "** Cons: Decreases the ease of comparison between tasks and members"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "// end::statistics[]"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "\u003d\u003d\u003d Member Feature "
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "The member feature introduces the ability for +Work to deal with project members, in the same way it deals with project tasks. Apart from the typical commands (\u0027add-member\u0027, \u0027delete-member\u0027, \u0027find-member\u0027) involved in such a central class, the member features also introduces a \u0027set-image\u0027 command. "
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "The \u0027Member\u0027 class also has an alternative constructor that takes in the image url as a parameter to save it as an attribute to the member object, when \u0027set-image\u0027 command is called. Additionally, to support the \u0027set-image\u0027 command, the \u0027Member\u0027 class implements the following operation:"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "* `Member#getImageUrl()` -- Retrieves the URL of the image stored in the user\u0027s computer"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "* `Member#getImage()` -- Retrieves the member\u0027s image using the image url"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "Given below is an example usage scenario and how the set-image mechanism behaves at each step."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "Step 1. The user launches the application for the first time. The \u0027Statistics\u0027 will be initialised based on the data previously saved."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "Data previously saved refers to the statistics calculation done based on list of members, tasks and mappings saved."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "Step 2. The user executes `get-task-stats` command to retrieve statistics related to the tasks in the application."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "The `get-task-stats` command calls `Model#getFilteredTasksList()`, `Model#getFilteredMembersList()` and `Model#getFilteredMappingsList()` after updating all the lists to show all tasks/members/mappings, to obtain lists of all the members, tasks and mappings saved in the application. Using the lists, a Statistics object is formed. \u0027Model#setStatistics\u0027 is called to updated the statistics in ProjectDashboard."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "The following sequence diagram shows how the \u0027get-member-stats\u0027 operation works."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "image::GetStatisticsSequenceDiagram.png[]"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "Figure 10. Operational flow of \u0027GetStatisticsCommand\u0027"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "The \u0027get-member-stats\u0027 operation is similar to the one shown in figure 10."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "image::GetStatisticsActivityDiagram.png[]"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How to implement Statistics class"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "* **Alternative 1 (current choice):** One statistics object for the entire ProjectDashboard"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "** Pros: Easy to implement, centralised class for all statistics"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "** Cons: May have performance issues due to calculations involving large amounts of tasks and members."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "* **Alternative 2:** Individual statistic objects for members and tasks."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "** Pros: Will ensure faster performance,"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "** Cons: Design of statistics object has to be very well-implemented, might not have enough time to implement it by v1.3"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Display of Statistics for Project Dashboard"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "* **Alternative 1 (current choice):** Use a pie chart to represent information"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "** Pros: Easy for workload comparison"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "** Cons: Less details of individual taks and members exposed in the statistiscs page."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "* **Alternative 2:** Use a list to represent information"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "** Pros: Includes more details for individual elements"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "** Cons: Decreases the ease of comparison between tasks and members"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "// end::statistics[]"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Undo/Redo feature"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Proposed Implementation"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedAddressBook`."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` -- Saves the current address book state in its history."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` -- Restores the previous address book state from its history."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` -- Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState0.png[]"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState1.png[]"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "Step 3. The user executes `add n/David ...` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState2.png[]"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": "If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState3.png[]"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial address book state, then there are no previous address book states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoSequenceDiagram.png[]"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone address book states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState4.png[]"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add n/David ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState5.png[]"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": "image::CommitActivityDiagram.png[]"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of address book states."
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedAddressBook`."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Data Encryption"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data encryption feature will be implemented}_"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDocumentation#, here\u003e\u003e."
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cTesting#, here\u003e\u003e."
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDevOps#, here\u003e\u003e."
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "* an NUS student"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "* managing an NUS project team."
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "* has a significant amount of tasks to manage among team members"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "* prefers desktop apps over mobile apps"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "*Value proposition*: manage tasks assigned to project mates, finding common time slots and keep track of inventory faster than GUI apps."
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "|`* * *` |New user |see usage instructions |refer to instructions when I forget how to use the App"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "|`* * *` |Project leader |Add a project member | Assign tasks to them"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "|`* * *` |Project leader |Add tasks to the project |"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "|`* * *` |Project leader |Change task status | Get reminder of the progress of each task"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "|`* *` |User |Change the app theme | Suit my viewing preferences"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "|`* *` |User |Change the deadline display format | Suit my time preferences"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "|`* *` |Project leader |Sync team members schedules |Find a time slot where the maximum number of people, if not all, can attend"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "|`* *` |Project leader with many members and tasks|Find out which group members are working on a particular task |Distribute workload evenly"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "|`* *` |Project leader with tasks that require inventory|Assign inventory to tasks or materials that are needed |Download an inventory report whenever required"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "|`* *` |Project leader |Create a meeting |Secure meeting slot at my desired time and place"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "|`* *`|Project leader |View my next meeting in the home page |I know my team\u0027s schedule at a glance"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "|`* *`|Project leader who is keeping track of purchases|Tag the inventory purchase to the member who bought it|Produce an accurate claims report at the end of the project"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "|`*`|Project leader managing a long-term project with ad-hoc members|Change members working on a task|Reassign tasks to incoming members"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "(For all use cases below, the *System* is the `ProjectDashboard` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "\u003d\u003d\u003d Use case: Add a team member"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "*Main Success Scenario*"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "1. User requests to add a team member and gives name of member"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "2. +Work informs user that member was successfully added"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "* 1a. The user does not specify name"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "** 1a1. +Work requests user for a name"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "** 1a2. User enters members name"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "** Steps 1a1 - 1a2 are repeated until user provides a name"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "+"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "Use case resumes from step 2."
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "\u003d\u003d\u003d Use case: List all team members"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "*Main Success Scenario*"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "1. User requests to list team members"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "2. +Work displays list of team members"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "* 2a. The list is empty"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "** 2a1. +Work informs user that there are no members added yet"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "\u003d\u003d\u003d Use case: Delete member"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "*Main Success Scenario*"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "1. User requests to list members"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "2. +Work shows a list of persons"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "3. User requests to delete a specific person in the list and specifies the ID of the person"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "4. +Work deletes the person"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "* 1a. The list is empty."
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "** 1a1. +Work informs user that there are no members"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "+"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "* 1b. The user specifies an invalid member ID"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "** 1b1. +Work informs user that they have entered an invalid ID"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "** 1b2. User enters a valid ID"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "** Steps 1b1 - 1b2 are repeated until user provides a valid ID"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "Use case resumes from step 2."
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "\u003d\u003d\u003d Use case:  Assign a task to a team member"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "*Main Success Scenario*"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "1. User requests to assign a task to a team member and specifies the task ID and the corresponding team member ID"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "2. +Work informs user that task has been assigned to the member successfully"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "3. +Work updates the dashboard"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "+"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "* 1a. The user specifies an invalid team member and/or task ID"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "** 1a1. +Work informs user that they have entered an invalid ID"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "** 1a2. User enters a valid ID"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "** Steps 1a1 - 1a2 are repeated until user provides a valid ID"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "+"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "Use case resumes from step 2."
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "* 1b. The user does not specify either/both team member and member ID"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "** 1b1. +Work informs user that they need to enter a valid ID"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "** 1b2. User enters specifies the valid ID"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "** Steps 1b1 - 1b2 are repeated until user provides a valid ID"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "+"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "Use case resumes from step 2."
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "\u003d\u003d\u003d Use case:  Remove a task for a team member"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "*Main Success Scenario*"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "1. User requests to remove a task for a team member and specifies the task ID and the corresponding team member ID"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "2. +Work informs user that member is not assigned to task any longer"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "3. +Work updates the dashboard"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "+"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "* 1a. The user specifies an invalid team member and/or task ID"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "** 1a1. +Work informs user that they have entered an invalid ID"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "** 1a2. User enters a valid ID"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "** Steps 1a1 - 1a2 are repeated until user provides a valid ID"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "+"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "Use case resumes from step 2."
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "* 1b. The user does not specify either/both team member and member ID"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "** 1b1. +Work informs user that they need to enter the valid ID"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "** 1b2. User enters specifies the valid ID"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "** Steps 1b1 - 1b2 are repeated until user provides a valid ID"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "+"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "Use case resumes from step 2."
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "\u003d\u003d\u003d Use case: Add a task"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "*Main Success Scenario*"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "1. User requests to add a task and specifies the name of the task and may specify the member id of the member assigned to the task"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "2. +Work informs the user that task has been updated"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "3. +Work updates the dashboard"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "+"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "* 1a. The user specifies an invalid team member ID and/or does not give a task name"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "** 1a1. +Work informs user that they have entered an incomplete command"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "** 1a2. User enters a valid command"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "** Steps 1a1 - 1a2 are repeated until user provides a valid command"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "+"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "Use case resumes from step 2."
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "\u003d\u003d\u003d Use case: Mark a task as ‘done’"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "*Main Success Scenario*"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "1. User requests to mark a task as ‘done’ and specifies the ID of the task"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "2. +Work informs user that the task is marked as done successfully"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "3. +Work updates the dashboard"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "+"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "* 1a. The user specifies an invalid task ID"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "** 1a1. +Work informs user that they have entered an invalid ID"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "** 1a2. User enters a valid ID"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "** Steps 1a1 - 1a2 are repeated until user provides a valid id"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "+"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "Use case resumes from step 2."
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "\u003d\u003d\u003d Use case: Mark a task as ‘doing’"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "*Main Success Scenario*"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "1. User requests to mark a task as ‘doing’ and specifies the ID of the task"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "2. +Work informs user that the task is marked as ’doing’ successfully"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "3. +Work updates the dashboard"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "+"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "* 1a. The user specifies an invalid task ID"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "** 1a1. +Work informs user that they have entered an invalid ID"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "** 1a2. User enters a valid ID"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "** Steps 1a1 - 1a2 are repeated until user provides a valid id"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "+"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "Use case resumes from step 2."
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "\u003d\u003d\u003d Use case: List all tasks in the dashboard"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "*Main Success Scenario*"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "1. User requests to list all tasks in the dashboard"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "2. +Work displays list of tasks"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "+"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "* 1a. The list is empty"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "** 1a1. +Work informs user that there are no tasks"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "+"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "\u003d\u003d\u003d Use case: Remove a task from the dashboard"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "*Main Success Scenario*"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "1. User requests to remove a task from the dashboard and specifies the task ID"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "2. +Work informs the user that task is removed succesfully"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "3. +Work updates the dashboard"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "+"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "* 1a. The user specifies an invalid task ID"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "** 1a1. +Work informs user that they have entered an invalid ID"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "** 1a2. User enters a valid ID"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "** Steps 1a1 - 1a2 are repeated until user provides a valid id"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "+"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "Use case resumes from step 2."
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "\u003d\u003d\u003d Use case: Assign a deadline to a task"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "*Main Success Scenario*"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "1. User requests to assign a deadline to a task and specifies the task ID and the corresponding deadline"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "2. +Work informs user that task deadline set successfully"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "3. +Work updates the dashboard"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "+"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "* 1a. The user specifies an invalid task ID"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "** 1a1. +Work informs user that they have entered an invalid ID"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "** 1a2. User enters a valid ID"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "** Steps 1a1 - 1a2 are repeated until user provides a valid ID"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "+"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "Use case resumes from step 2."
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "* 1b. The user gives the deadline in the wrong format"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "** 1b1. +Work informs user that deadline must be in the format `dd-mm-yy hh:mm`"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "** 1b2. User enters the deadline in the correct format"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "** Steps 1b1 - 1b2 are repeated until user provides a valid deadline"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "+"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "Use case resumes from step 2."
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "\u003d\u003d\u003d Use case: Generate availability timings of team members"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "*Main Success Scenario*"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "1. User adds timetable of team mates to +Work"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "2. User requests to generate availability timings of team members"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "3. +Work displays list of timings where the most number of team members are available"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "+"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "* 2a. +Work finds that there are no available timings"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "** 2a1. +Work informs user that no available timings were found"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "+"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "\u003d\u003d\u003d Use case: Add a meeting to the timetable"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "*Main Success Scenario*"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "1. User requests to add a meeting and specifies a description and the time of the meeting"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "2. +Work informs user that meeting was succesfully created"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "3. +Work updates the dashboard"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "+"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "* 1a. User specifies the time in an invalid format"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "** 1a1. +Work informs user that meeting time must be in format `dd-mm-yy hh:mm`"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "** 1a2. User enters the time in the correct format"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "** Steps 1a1 - 1a2 are repeated until user provides a valid time"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "+"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "Use case resumes from step 2."
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "\u003d\u003d\u003d Use case: Add an item to the inventory"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "*Main Success Scenario*"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "1. User requests to add an item to the inventory and specifies the name and price of the inventory item, ID of the member as well as task associated with the item"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "2. +Work informs user that the inventory has been added successfully"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "3. +Work updates the inventory"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "+"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "* 1a. User specifies an invalid or missing value"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "** 1a1. +Work informs the user that command is incomplete"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "** 1a2. User enters complete command"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "** Steps 1a1 - 1a2 are repeated until user provides complete command"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "+"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "Use case resumes from step 2."
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "\u003d\u003d\u003d Use case: Delete an item from the inventory"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "*Main Success Scenario*"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "1. User requests to delete an item from the inventory and specifies the item ID"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "2. +Work informs user that the inventory item has been successfully deleted"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "3. +Work updates the inventory"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "+"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "* 1a. The user specifies an invalid inventory ID"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "** 1a1. +Work informs user that they have entered an invalid ID"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "** 1a2. User enters a valid ID"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "** Steps 1a1 - 1a2 are repeated until user provides a valid ID"
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "+"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "Use case resumes from step 2."
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "\u003d\u003d\u003d Use case: Edit an inventory item"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "*Main Success Scenario*"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "1. User requests to edit an item to the inventory and specifies the ID of the inventory item first, followed by the parameter(s) to be edited"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "2. +Work informs user that the inventory item has been successfully edited"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "3. +Work updates the inventory"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "+"
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "* 1a. The user specifies an invalid inventory ID or specifies no parameters to be edited"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "** 1a1. +Work informs user that they have entered an invalid ID and at least one parameter"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "** 1a2. User enters a valid ID and the parameter"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "** Steps 1a1 - 1a2 are repeated until user provides a valid ID and a parameter to be changed"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "+"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "Use case resumes from step 2."
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "\u003d\u003d\u003d Use case: Generate an inventory report"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "*Main Success Scenario*"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "1. User requests to generate an inventory report"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "2. User specifies whether inventory is generated based on the member or task"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "3. +Work displays the inventory report"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "+"
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "\u003d\u003d\u003d Use case: Toggle the display theme of +Work"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "*Main Success Scenario*"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "1. User requests to toggle the theme between light and dark"
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "2. +Work displays the requested theme"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "+"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "\u003d\u003d\u003d Use case: Toggle the clock display format of task deadlines"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "*Main Success Scenario*"
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "1. User requests to toggle the clock between 24 hour and 12 hour"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "2. User enters `home` and switches to the dashboard"
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "3. +Work displays the requested clock format for task deadlines"
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "+"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ".  Should be able to hold up to 1000 tasks without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "[[NUSl]] NUS::"
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "National University of Singapore"
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "[[CLI]] CLI::"
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "command line interface (bash, git)"
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "[[GUI]] GUI::"
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "graphical user interface"
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "-"
        },
        "content": "*Product Name*"
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "-"
        },
        "content": "Author: ..."
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "\u003d\u003d\u003d Deleting a task"
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ". Deleting a task while all tasks are listed"
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ".. Prerequisites: List all tasks using the `list-tasks` command. Multiple tasks in the list."
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ".. Test case: `delete-task 1` +"
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ".. Test case: `delete-task 0` +"
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "   Expected: No task is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ".. Other incorrect delete commands to try: `delete-task`, `delete-task x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "ambhinav": 210,
      "seahlynn": 116,
      "elsakoh": 183,
      "-": 384,
      "gabrielseow": 152
    }
  },
  {
    "path": "docs/LearningOutcomes.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Learning Outcomes"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: LearningOutcomes"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc: macro"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toclevels: 1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "After studying this code and completing the corresponding exercises, you should be able to,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "toc::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Utilize User Stories `[LO-UserStories]`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/specifyingRequirements/userStories/[se-edu/se-book: Requirements: Specifying Requirements: User Stories]"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add more user stories"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* Assume you are planing to expand the functionality of the AddressBook (but keep it as a CLI application)."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "What other user stories do you think AddressBook should support? Add those user stories to the `DeveloperGuide.adoc`."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Utilize use cases `[LO-UseCases]`"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/specifyingRequirements/useCases/[se-edu/se-book: Requirements: Specifying Requirements: Use Cases]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add a \u0027Rename tag\u0027 use case"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "* Add a use case to the `DeveloperGuide.adoc` to cover the case of _renaming of an existing tag_."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "e.g. rename the tag `friends` to `buddies` (i.e. all tasks who had the `friends` tag will now have"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "a `buddies` tag instead)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "Assume that AddressBook confirms the change with the user before carrying out the operation."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Non Functional Requirements `[LO-NFR]`"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/requirements/nonFunctionalRequirements/[se-edu/se-book: Requirements: Non-Functional Requirements]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add more NFRs"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* Add some more NFRs to the `DeveloperGuide.adoc`"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Polymorphism `[LO-Polymorphism]`"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the `Command::execute()` method shows polymorphic behavior."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/oop/polymorphism/[se-edu/se-book: Paradigms: OOP: Polymorphism]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/cppToJava/inheritance/polymorphism/[se-edu/se-book: C++ to Java: OOP: Polymorphism]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add a polymorphic `isMutating` method"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "* Add a method `boolean isMutating()` to the `Command` class. This method will return `true` for"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "command types that mutate the data. e.g. `AddCommand`"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently, AddressBook data are saved to the file after every command."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "Take advantage of the the new method you added to limit file saving to only for command types that mutate data."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "i.e. `add` command should always save the data while `list` command should never save data to the file."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "There may be better ways to limit file saving to commands that mutate data. The above approach, while not"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "optimal, will give you chance to implement a polymorphic behavior."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use abstract classes/methods `[LO-Abstract]`"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/oop/inheritance/abstractClasses/[se-edu/se-book: Paradigms: OOP: Abstract Classes]"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/cppToJava/inheritance/abstractClassesAndMethods/[se-edu/se-book: C++ to Java: OOP: Abstract Classes]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Make `Command#execute()` method abstract"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "* Make the `Command#execute()` method abstract (hint: refer to the comment given below the method)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use interfaces `[LO-Interfaces]`"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the `AddressBook` class implements the `ReadOnlyAddressBook` interface so that clients who don\u0027t need write access to the `AddressBook` can access the `AddressBook` through the `ReadOnlyAddressBook` interface instead."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "image::ReadOnlyAddressBookUsage.png[width\u003d500]"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/oop/inheritance/interfaces/[se-edu/se-book: Paradigms: OOP: Abstract Interfaces]"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/cppToJava/inheritance/interfaces/[se-edu/se-book: C++ to Java: OOP: Abstract Interfaces]"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add a `Printable` interface"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "* Add a `Printable` interface as follows."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "image::PrintableInterface.png[width\u003d400]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "* `Override` the `getPrintableString` in classes `Name`, `Phone`, `Email`, and `Address` so that each produces a printable string representation of the object. e.g. `Name: John Smith`, `Phone: 12349862`"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "* Add the following method in a suitable place of some other class. Note how the method depends on the Interface."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": " * Returns a concatenated version of the printable strings of each object."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "String getPrintableString(Printable... printables) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "The above method can be used to get a printable string representing a bunch of task details."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "For example, you should be able to call that method like this:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "// p is a Person object"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "return getPrintableString(p.getPhone(), p.getEmail(), p.getAddress());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Follow Liskov Substitution Principle `[LO-LSP]`"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/principles/liskovSubstitutionPrinciple/[se-edu/se-book: Principles: Liskov Substitution Principle]"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add an exception to an overridden method"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "* Add a `throws Exception` clause to the `AddCommand::execute` method. Notice how Java compiler will not allow it,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "unless you add the same `throws` clause to the parent class method. This is because if a child class throws"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "an exception that is not specified by the Parent\u0027s contract, the child class is no longer substitutable in place of"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "the parent class."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "* Also note that while in the above example the compiler enforces LSP, there are other situations where it is up to"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "the programmer to enforce it. For example, if the method in the parent class works for `null` input, the overridden"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "method in the child class should not reject `null` inputs. This will not be enforced by the compiler."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Java-FX for GUI programming `[LO-JavaFx]`"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/javaTools/javaFXBasic/[se-edu/se-book: Tools: Java: JavaFX: Basic]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Enhance GUI"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "* Do some enhancements to the AddressBook GUI. e.g. add an application icon, change font size/style"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Analyze Coupling and Cohesion of designs `[LO-CouplingCohesion]`"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "* Notice how having a separate `ParserUtil` class to handle user input validation, space trimming etc. of model data (an application of the Single Responsibility Principle) improves the _cohesion_ of the model component (since it does not need to be concerned with handling user input) as well as the `ParserUtil` class."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/designFundamentals/coupling/[se-edu/se-book: Design: Design Principles: Coupling]"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/designFundamentals/cohesion/[se-edu/se-book: Design: Design Principles: Cohesion]"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Identify places to reduce coupling and increase cohesion"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "* Where else in the design coupling can be reduced further, or cohesion can be increased further?"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "[[apply-dependency-inversion-principle-lo-dip]]"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Apply Dependency Inversion Principle `[LO-DIP]`"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "* Note how the `LogicManager` class doesn\u0027t depend on `StorageManager` directly, but rather the interface `Storage`."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "This is an application of the Dependency Inversion Principle."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicStorageDIP.png[width\u003d300]"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "* Where else in the code do you notice the application of DIP?"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/principles/dependencyInversionPrinciple/[se-edu/se-book: Principles: Dependency Inversion Principle]"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Dependency Injection `[LO-DI]`"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "Notice how the `LogicManager` class does not depend on the `StorageManager` class, but depends on the `Storage` interface."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "This allows us to use _Dependency Injection_ to test the `LogicManager` class without getting the `StorageManager` class involved."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/testing/dependencyInjection/[se-edu/se-book: Quality Assurance: Testing: Dependency Injection]"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Facilitate injecting a StorageStub"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "* Notice how `LogicManagerTest` tests `LogicManager` by constructing a `StorageManager` object."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "* Implement `StorageStub` such that calls to its `save*` methods do nothing (i.e. empty method body)."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "* Update `LogicManagerTest` to work with the `StorageStub` instead of the actual `StorageManager` object."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "i.e. `LogicManagerTest` injects a `StorageStub` object when constructing a `LogicManager` before testing it."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "image::DependencyInjection.png[width\u003d600]"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "* The example above uses \u003c\u003capply-dependency-inversion-principle-lo-dip, DIP\u003e\u003e as a means to achieve DI."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "Note that there is another way to inject a `StorageStub` object, as shown below."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "In this case we do not apply the DIP but we still achieve DI."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "image::DependencyInjectionWithoutDIP.png[width\u003d250]"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Apply Open-Closed Principle `[LO-OCP]`"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/principles/openClosedPrinciple/[se-edu/se-book: Principles: Open-Closed Principle]"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Analyze OCP-compliance of the `LogicManager` class"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "* Consider adding a new command to the Address Book. e.g. an `edit` command. Notice how little you need to change in the `LogicManager` class to extend its behavior so that it can execute the new command."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "That is because `LogicManager` follows the OCP i.e. `LogicManager` is _open to be extended_ with more commands but _closed for modifications_."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "* Is it possible to make the `AddressBookParser` class more OCP-compliant in terms of extending it to handle more"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "command types?"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "* In terms of how it saves data, is `LogicManager` more OCP-compliant"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "due to the application of DIP as given in \u003c\u003capply-dependency-inversion-principle-lo-dip, `LO-DIP`\u003e\u003e?"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "How can you improve ``LogicManager``\u0027s OCP-compliance further so that it can not only work with different types"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "of storages, but different number of storages (e.g. save to both a text file and a database)."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Work in a 3KLoC code base `[LO-3KLoC]`"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Enhance AddressBook"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "* Enhance AddressBook in some way. e.g. add a new command"
      }
    ],
    "authorContributionMap": {
      "ambhinav": 2,
      "-": 214
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "\u003d +Work - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-T12-1/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "By: `CS2103T-T12-1`      Since: `Sept 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "+Work is a project management tool that allows NUS project leaders in charge of a small group (less than 20 people) to successfully achieve their objectives for their project."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "+Work is a one-stop application to help the leader manage their members, meeting times, task allocation as well as personal claims for any equipment purchased."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "+Work is perfect for those who prefer to work with a Command Line Interface (CLI) while still having the benefits of a Graphical User Interface (GUI). Happy working!"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ".  Download the latest `+Work.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for your +Work."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".  Some example commands you can try:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "* **`add-member m/Abhinav Ramnath`** : Adds a member with name \"Abhinav Ramnath\" to the project."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "* **`add-task tn/Finish up milestone setting`** : Adds a task with name \"Finish up milestone\" to the project."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "* **`assign-member ti/5 mi/SL`** : Assigns the project member \"Seah Lynn\" (With member id \"SL\"), to the fifth task."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "* **`doing-task ti/3`** : Changes status of task three to `doing`:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "* The command begins with the type of command to be executed"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "** Example: in `remove-member mi/MEMBER_ID`, remove member is the type of command"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "* The words in UPPER_CASE corresponds to the parameters given by the user"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "** Example: In `add-member mn/MEMBER_NAME`, MEMBER_NAME is the input specified by the user, such as: add-member mn/Gabriel Seow"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "* The user specifies the type of parameter given through a prefix. The list of allowed prefixes can be found in the table below: "
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "* Parameters can be given in any order"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "** Example: If the command specifies `[t/TASK_NAME] [m/MEMBER_NAME]`, +"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "`[m/MEMBER_NAME] [t/TASK_NAME]` is also acceptable`"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "* Date and Time is specified in the format `dd-mm-yyyy hh:mm`"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "\u003d\u003d\u003d Universal Commands"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "\u003d\u003d\u003d\u003d Accessing project dashboard page: `home` +"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "This brings you to the project dashboard page +"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "Format: `home`"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "\u003d\u003d\u003d\u003d Accessing time management page: `calendar` +"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "This brings you to the time management page where calendar and meeting times are displayed +"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "Format: `calendar`"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "\u003d\u003d\u003d\u003d Accessing settings page: `settings` (Coming in v1.3) +"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "This brings you to the settings page  +"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "Format: `settings`"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "\u003d\u003d\u003d\u003d View help: `help` +"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "Displays a list of possible commands for the user +"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "\u003d\u003d\u003d Member-related Commands"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "\u003d\u003d\u003d\u003d Add a member: `add-member` +"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "To add a member to the list of team members in +Work, use the command \u0027add-member\u0027 following the format below. +"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "Format: `add-member mn/MEMBER_NAME mi/MEMBER_ID mt/TAGS`"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "Example: `add-member mn/Gabriel Seow mi/GS mt/Programmer`"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "\u003d\u003d\u003d\u003d List existing members: `list-members` +"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "To get a list of all members added to +Work, used the command \u0027list-members\u0027 following the format below. +"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "Format: `list-members`"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "Example: \u0027list-members\u0027"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "\u003d\u003d\u003d\u003d Remove a member: `remove-member` +"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "To remove a member from the project, and subsequently remove him from associated tasks, use the \u0027remove-member\u0027 command in the format below. +"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "Format: `remove-member [mi/MEMBER_ID]`"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "Example: \u0027remove-member mi/GS\u0027 "
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "\u003d\u003d\u003d\u003d Assign a task to a member: `assign` +"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "To assign a task to a specific team member, use the \u0027assign\u0027 command in the format below. +"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "Format: `assign ti/TASK_ID mi/MEMBER_ID`"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "Example: \u0027assign ti/1 mi/GS\u0027 "
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "\u003d\u003d\u003d\u003d Remove a task from a member: `fire` +"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "To remove a task from a specific team member, use the \u0027fire\u0027 command in the format below. +"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "Format: `fire ti/TASK_ID mi/MEMBER_ID`"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "Example: \u0027fire ti/1 mi/GS\u0027 "
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "\u003d\u003d\u003d Task-related Commands"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "\u003d\u003d\u003d\u003d Add a task: `add task`"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "Adds a task into project dashboard"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "Format: `add-task [t/TASK_NAME]  [m/MEMBER_NAME]`"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "* `add task t/Finish up milestone setting m/Gabriel Seow` +"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "A new task will be added to the project dashboard"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "\u003d\u003d\u003d\u003d Set a task status to ‘Doing’: `doing`"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "Updates task status to ‘Doing’"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "Format: `doing-task [ti/TASK_ID]`"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "* `doing-task ti/3` +"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "Marks the status of task 3 as doing"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "\u003d\u003d\u003d\u003d Set a task status to ‘Done’: done"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "Updates task status to ‘Done’"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "Format: `done-task [ti/TASK_ID]`"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "* `done-task ti/2`"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "Marks the status of task 2 as done."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "\u003d\u003d\u003d\u003d List the existing tasks: `list-tasks`"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "List all the tasks on the dashboard"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "Format: \u0027list-tasks\u0027"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "\u003d\u003d\u003d\u003d Remove a task: remove-task"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "Removes a task from the dashboard"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "Format: `remove-task [ti/TASK_ID]`"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "* `remove-task 2` +"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "Removes the 2nd task in the dashboard"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "\u003d\u003d\u003d\u003d Set deadline for a task: `deadline-task`"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "Sets deadline for existing tasks on dashboard"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "Format: `deadline-task [ti/TASK_ID] [at/DEADLINE] [at/ dd-mm-yy hh:mm]`"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "Remember to input using the 24 hour time format"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "* `deadline-task ti/21 at/21-09-19 15:00`  +"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "Deadline for task 21 will be specified as `21-09-19 15:00`"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "\u003d\u003d\u003d Calendar Commands (Coming in v1.3)"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "Suggested steps for you to follow"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "1. User first exports their `.ics` file from NUSmods"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "2. Then import it into their google calendar"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "3. Add any weekly commitments to their google calendar"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "4. Export `.ics` file again"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "5. Import all to our application"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "6. enter command `generate-timings`"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "7. Choose the desired timing for the weekly meetings from the grid displayed"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "8. Create a new `Meeting`"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "\u003d\u003d\u003d\u003d Add a members calendar: `import-calendar`"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "Format: `import-calendar [mi/MEMBER_ID] [c/PATH_TO_ICS]`"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "You can add your project\u0027s member John Doe\u0027s `ics` file like this,"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "* `import-calendar mi/JD c/data/john_ics_file` +"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "Adds a calendar to John\u0027s profile"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "\u003d\u003d\u003d\u003d Generate free time across all calendars uploaded: `generate-timings`"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "Format: `generate-timings`"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "* `generate-timings` +"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "Generates a grid showing the number of people who can make it for a particular time slot during the week (mock-up needed)"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "\u003d\u003d\u003d\u003d Add a meeting: `add meeting`"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "Format: `add-meeting [at/ dd-mm-yyyy hh:mm]  [l/LOCATION]`"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "to add a new meeting"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "* `add-meeting at/10-10-2018 19:00 l/COM2-0204` +"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "User chooses the meeting time from the grid displayed from generate timings commands (3.4.2) . A meeting is added to the internal calendar of the application, which will be displayed on the dashboard."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "\u003d\u003d\u003d Inventory Commands"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "\u003d\u003d\u003d\u003d Adding an inventory: `add-inventory`"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "Adds an inventory item bought or required for a specific project task."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "Format: `add-inventory [ti/TASK_ID] [i/ITEM_NAME] [mi/MEMBER_ID] [p/PRICE(optional)]`"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "* `add-inventory ti/2 i/Mahjong Paper mi/3 p/8.50` +"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "Adds the item “Mahjong paper” for $8.50 to the inventory list. This item is tagged to task 2 and was paid for by member 3."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "* `add-inventory ti/4 i/scissors mi/1` +"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "Adds the item “scissors” to the inventory list. The item is tagged to task 4 and is provided by member 1 for no cost."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "\u003d\u003d\u003d\u003d Deleting an inventory: `delete inventory`"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "Deletes an inventory item."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "Format: `delete-inventory [ii/ITEM_ID]`"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "* `delete-inventory ii/3` +"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "Deletes the third item from the inventory list"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "\u003d\u003d\u003d\u003d Generating a report of inventory by task: `generate inventory /task`"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "Generates a PDF report containing all inventories grouped by tasks for easier sharing."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "Format: `generate-inventory /task`"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "* `generate-inventory /task` +"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "File explorer pops up, triggering a message to allow the user to save the pdf file in the computer."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "\u003d\u003d\u003d\u003d Generating a report of inventory by people: `generate inventory /person`"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "Generates a PDF report containing all inventories grouped by members for easier understanding of claims."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "Format: `generate-inventory /person`"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "* `generate-inventory /person` +"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "File explorer pops up, triggering a message to allow the user to save the pdf file in the computer."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "\u003d\u003d\u003d Settings Commands (Coming in v1.3)"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "\u003d\u003d\u003d\u003d Switching the theme of +Work: `theme`"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "This command toggles the theme of +Work between light and dark to suit your viewing preferences."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "By default, the theme is set to dark."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "Format: `theme light`"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "* `theme light` +"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "Switches to the light theme"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "* `theme dark` +"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "Switches to the dark theme"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "\u003d\u003d\u003d\u003d Switching the clock format of +Work: `clock`"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "This command toggles the clock format of +Work between 24 hour and 12 hour format."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "By default, the clock format is set to 24 hour."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "This does not affect the input format of deadlines for tasks. They still need to be entered in 24 hour format!."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "Format: `clock twenty_four`"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "* `clock twelve` +"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "Switches to the 12 hour clock"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "* `clock twenty_four` +"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "Switches to the 24 hour clock"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "////"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a person : `delete`"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the specified person from the address book. +"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "* Deletes the person at the specified `INDEX`."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "* The index refers to the index number shown in the displayed person list."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "`delete 2` +"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the 2nd person in the address book."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "* `find Betsy` +"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "`delete 1` +"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the 1st person in the results of the `find` command."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "// end::delete[]"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Clearing all entries : `clear`"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "Clears all entries from the address book. +"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "////"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "Project data is saved in the hard disk automatically after any command that changes the data. +"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "////"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Encrypting data files `[coming in v2.0]`"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "_{explain how the user can enable/disable data encryption}_"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "////"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "*Q*: Can I use file formats other than ics for the calendar feature? +"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "*A*: No, the file format has to be in ics folder, downloaded either from NUSmods or Google Calendar."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "*Q*: Can I export the claims report as a word document? +"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "*A*: No, the application only supports exporting of files in PDF format."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "*Q*: What if the calendar cannot find a timing where everyone is free? +"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "*A*: There will be a grid showing the number of available members by time, so it will be easier for the user to choose the best possible time for the meeting."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "*Q*: My project has a budget, does the application help me keep track of the projects financial status? +"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "*A*: Using /inventory the application can keep track of current expenses for each task and the member who purchased it, however, there are currently no accounting services available."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "*Q*: Some of the tasks for my project require sub tasks to be completed, is there a way to add them? +"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "*A*: Ideally since the user is the project leader, they should only see the main tasks to be accomplished for the project. This would help facilitate their managerial role within the project. Hence, the application does not support subtasks."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "*Q*: How can I add multiple users to the same task? +"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "*A*: Since +Work is member-oriented, the application displays information according to members. Hence, you have to assign task to all the different members that are working on the task."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "*Q*: What happens when a task has been completed? +"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "*A*: You can mark the task as ‘Done’, which will move the task to the bottom of the task list. In the case where you do not want to keep the task in the list, using ‘Remove Task’ will delete it."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "* `add-inventory [i/NAME] [p/PRICE] [ti/TASKID] [mi/MEMBER_ID]`: *Add an inventory*"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "* `add-meeting [at/ dd-mm-yyyy hh:mm - hh:mm]  [l/LOCATION]`: (Coming in v1.3) *Add a meeting*"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "* `add-member [mn/MEMBER_NAME] [mi/MEMBER_ID] [mt/MEMBER_TAG]`: *Add a member*"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "* `add-task [t/TASK_NAME]  [m/MEMBER_NAME]`: *Add a task*"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "* `assign [ti/TASK_ID] [mi/MEMBER_ID]`: *Add a task to a member*"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "* `calendar`: *Switch to the time management page*"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "* `clock twelve`: (Coming in v1.3) *Switch to the 12 hour clock*"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "* `clock twenty_four`: (Coming in v1.3) *Switch to the 24 hour clock*"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "* `deadline-task [ti/TASK_ID] [at/ dd-mm-yy hh:mm]`: *Assign a deadline to a task*"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "* `delete-inventory [ii/ITEM_ID]`: *Delete an inventory*"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "* `doing-task [ti/TASK_ID]`: *Mark a task as `doing`*"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "* `done-task [ti/TASK_ID]`: *Mark a task as `done`*"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "* `fire-member [ti/TASK_ID] [mi/MEMBER_ID]`: *Remove a task from a member*"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "* `generate-inventory /task`: *Generate report of inventory by task*"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "* `generate-inventory /person`: *Generate report of inventory by person*"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "* `generate-timings`: (Coming in v1.3) *Generate free times among members*"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "* `home`: *Switch to the project dashboard*"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "* `help`: *Access the help window*"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "* `import-calendar [mi/MEMBER_ID] [c/PATH_TO_ICS]`: (Coming in v1.3) *Import a calendar*"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "* `list-members`: *List all members*"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "* `list-tasks`: *List all tasks*"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "* `remove-member [mi/MEMBER_ID]`: *Remove a member*"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "* `remove-task [ti/TASK_ID]`: *Remove a task*"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "* `settings`: *Switch to the settings configuration page*"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "* `theme dark`: (Coming in v1.3) *Switch to the dark theme*"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "* `theme light`: (Coming in v1.3) *Switch to the light theme*"
      }
    ],
    "authorContributionMap": {
      "ambhinav": 136,
      "ArunBeCoding": 180,
      "seahlynn": 41,
      "-": 119
    }
  },
  {
    "path": "docs/diagrams/ArchitectureSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "Actor User as user USER_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":UI\" as ui UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Logic\" as logic LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Model\" as model MODEL_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Storage\" as storage STORAGE_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "user -[USER_COLOR]\u003e ui : \"delete 1\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "activate ui UI_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "ui -[UI_COLOR]\u003e logic : execute(\"delete 1\")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "activate logic LOGIC_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "logic -[LOGIC_COLOR]\u003e model : deletePerson(p)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "activate model MODEL_COLOR"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "model -[MODEL_COLOR]-\u003e logic"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate model"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "logic -[LOGIC_COLOR]\u003e storage : saveAddressBook(projectDashboard)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "storage -[STORAGE_COLOR]\u003e storage : Save to file"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR_T1"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "storage --[STORAGE_COLOR]\u003e logic"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "logic --[LOGIC_COLOR]\u003e ui"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate logic"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "ui--[UI_COLOR]\u003e user"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate ui"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "ambhinav": 1,
      "-": 36
    }
  },
  {
    "path": "docs/diagrams/BetterModelClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "ProjectDashboard *-right-\u003e \"1\" UniqueTaskList"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "ProjectDashboard *-right-\u003e \"1\" UniqueTagList"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "ProjectDashboard *-right-\u003e \"1\" UniqueMemberList"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "UniqueTagList -[hidden]down- UniqueTaskList"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "UniqueTagList -[hidden]down- UniqueTaskList"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "UniqueTagList *-right-\u003e \"*\" Tag"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "UniqueTaskList o-right-\u003e Task"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "UniqueMemberList o-right-\u003e Member"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "Task o-up-\u003e \"*\" Tag"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "Member o-up-\u003e \"*\" Tag"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "Task *--\u003e Name"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "Task *--\u003e TaskStatus"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "Member *--\u003e MemberName"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "Member *--\u003e MemberId"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "seahlynn": 15,
      "-": 11
    }
  },
  {
    "path": "docs/diagrams/DeleteSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "participant \":ProjectDashboardParser\" as ProjectDashboardParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "participant \":DeleteTaskCommandParser\" as DeleteTaskCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "participant \"d:DeleteTaskCommand\" as DeleteTaskCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "[-\u003e LogicManager : execute(\"delete 1\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "LogicManager -\u003e ProjectDashboardParser : parseCommand(\"delete 1\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "activate ProjectDashboardParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "create DeleteTaskCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "ProjectDashboardParser -\u003e DeleteTaskCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "activate DeleteTaskCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "DeleteTaskCommandParser --\u003e ProjectDashboardParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "deactivate DeleteTaskCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "ProjectDashboardParser -\u003e DeleteTaskCommandParser : parse(\"1\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "activate DeleteTaskCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "create DeleteTaskCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "DeleteTaskCommandParser -\u003e DeleteTaskCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "activate DeleteTaskCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "DeleteTaskCommand --\u003e DeleteTaskCommandParser : d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "deactivate DeleteTaskCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "DeleteTaskCommandParser --\u003e ProjectDashboardParser : d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "deactivate DeleteTaskCommandParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "DeleteTaskCommandParser -[hidden]-\u003e ProjectDashboardParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "destroy DeleteTaskCommandParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "ProjectDashboardParser --\u003e LogicManager : d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "deactivate ProjectDashboardParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "LogicManager -\u003e DeleteTaskCommand : execute()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "activate DeleteTaskCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "DeleteTaskCommand -\u003e Model : deleteTask(1)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "Model --\u003e DeleteTaskCommand"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "DeleteTaskCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "CommandResult --\u003e DeleteTaskCommand"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "DeleteTaskCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "deactivate DeleteTaskCommand"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "-": 38,
      "gabrielseow": 31
    }
  },
  {
    "path": "docs/diagrams/GetStatisticsActivityDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ":User executes command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "\u0027Since the beta syntax does not support placing the condition outside the"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "\u0027diamond we place it as the true branch instead."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "if () then ([model does not contain same Statistic object])"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    :Set model\u0027s statistic object"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    to the one newly created;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    :Do calculations for"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    new statistics object;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "endif"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ":Retrieve relevant statistics"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "from model\u0027s statistic object;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "stop"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "seahlynn": 19
    }
  },
  {
    "path": "docs/diagrams/GetStatisticsSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "participant \":ProjectDashboardParser\" as ProjectDashboardParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "participant \"GetStatisticsCommand\" as GetStatisticsCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "end box"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "participant \":Statistics\" as Statistics MODEL_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "end box"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "[-\u003e LogicManager : execute(get-task-stats)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "LogicManager -\u003e ProjectDashboardParser : parseCommand(get-task-stats)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "activate ProjectDashboardParser"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "create GetStatisticsCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "ProjectDashboardParser -\u003e GetStatisticsCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "activate GetStatisticsCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "GetStatisticsCommand --\u003e ProjectDashboardParser"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "deactivate GetStatisticsCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "ProjectDashboardParser --\u003e LogicManager"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "deactivate ProjectDashboardParser"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "LogicManager -\u003e GetStatisticsCommand : execute()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "activate GetStatisticsCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "create Statistics"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "GetStatisticsCommand -\u003e Statistics"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "activate Statistics"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "Statistics -\u003e GetStatisticsCommand : s"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "GetStatisticsCommand -\u003e Statistics : s.doCalculations()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "deactivate Statistics"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "GetStatisticsCommand -\u003e Model : setStatistics(s)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "Model --\u003e GetStatisticsCommand"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "GetStatisticsCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "deactivate GetStatisticsCommand"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "GetStatisticsCommand -[hidden]-\u003e LogicManager : result"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "destroy GetStatisticsCommand"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "seahlynn": 57
    }
  },
  {
    "path": "docs/diagrams/LogicClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor LOGIC_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "package Parser {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Parser \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "Class ProjectDashboardParser"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class XYZCommandParser"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class CliSyntax"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class ParserUtil"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class ArgumentMultimap"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class ArgumentTokenizer"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Class Prefix"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "package Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Class XYZCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommandResult"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"{abstract}\\nCommand\" as Command"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Logic \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Class LogicManager"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "package Model{"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Logic"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .up.|\u003e Logic"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager --\u003e\"1\" AddressBookParser"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBookParser .left.\u003e XYZCommandParser: creates \u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e XYZCommand : creates \u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..|\u003e Parser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ArgumentMultimap"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ArgumentTokenizer"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "ArgumentTokenizer .left.\u003e ArgumentMultimap"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e CliSyntax"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "CliSyntax ..\u003e Prefix"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ParserUtil"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "ParserUtil .down.\u003e Prefix"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "ArgumentTokenizer .down.\u003e Prefix"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommand -up-|\u003e Command"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .left.\u003e Command : executes \u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager --\u003e Model"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "Command .right.\u003e Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "note right of XYZCommand: XYZCommand \u003d AddTaskCommand, \\nSetDeadlineCommand, etc"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "Logic ..\u003e CommandResult"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .down.\u003e CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "Command .up.\u003e CommandResult"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "CommandResult -[hidden]-\u003e Parser"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "-": 60,
      "gabrielseow": 2
    }
  },
  {
    "path": "docs/diagrams/ModelClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Package Model \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "Interface ReadOnlyProjectDashboard \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Model \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Interface ObservableList \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "Class ProjectDashboard"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "Class ReadOnlyProjectDashboard"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class Model"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class ModelManager"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class UserPrefs"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "Package Task {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "Class Task"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "Class Name"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "Class TaskStatus"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "Class UniqueTaskList"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "Package Member {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "Class Member"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "Class MemberId"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "Class MemberName"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "Class UniqueMemberList"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "Package Inventory {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "Class Inventory"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "Class InvName"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "Class Price"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "Class UniqueInventoryList"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "Package Mapping {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "Class Mapping"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "Class UniqueMappingList"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "Package Tag {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "Class Tag"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Model"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "ProjectDashboard .up.|\u003e ReadOnlyProjectDashboard"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager .up.|\u003e Model"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "Model .right.\u003e ObservableList"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "ModelManager o--\u003e \"1\" ProjectDashboard"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager o-left-\u003e \"1\" UserPrefs"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "UserPrefs .up.|\u003e ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "ProjectDashboard *--\u003e \"1\" UniqueTaskList"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "UniqueTaskList o--\u003e \"*\" Task"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "Task *--\u003e Name"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "Task *--\u003e TaskStatus"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "Task *--\u003e \"*\" Tag"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "ProjectDashboard *--\u003e \"1\" UniqueMemberList"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "UniqueMemberList o--\u003e \"*\" Member"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "Member *--\u003e MemberId"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "Member *--\u003e MemberName"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "Member *--\u003e \"*\" Tag"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "ProjectDashboard *--\u003e \"1\" UniqueInventoryList"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "UniqueInventoryList o--\u003e \"*\" Inventory"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "Inventory *--\u003e InvName"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "Inventory *--\u003e Price"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "ProjectDashboard *--\u003e \"1\" UniqueMappingList"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "UniqueMappingList o--\u003e \"*\" Mapping"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "ModelManager --\u003e\"1\" Task : filtered list"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "ModelManager --\u003e\"1\" Member : filtered list"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "ModelManager --\u003e\"1\" Inventory : filtered list"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "ModelManager --\u003e\"1\" Mapping : filtered list"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "seahlynn": 49,
      "-": 36
    }
  },
  {
    "path": "docs/diagrams/ThemeSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "participant \":ProjectDashboardParser\" as ProjectDashboardParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "participant \"t:ThemeCommand\" as ThemeCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "end box"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "participant \":UserSettings\" as UserSettings MODEL_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "end box"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "[-\u003e LogicManager : execute(theme dark)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "LogicManager -\u003e ProjectDashboardParser : parseCommand(theme dark)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "activate ProjectDashboardParser"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "create ThemeCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "ProjectDashboardParser -\u003e ThemeCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "activate ThemeCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "ThemeCommand --\u003e ProjectDashboardParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "deactivate ThemeCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "ProjectDashboardParser --\u003e LogicManager : t"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "deactivate ProjectDashboardParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "LogicManager -\u003e ThemeCommand : execute()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "activate ThemeCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "ThemeCommand -\u003e Model : setDarkTheme()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "Model -\u003e UserSettings : setDarkTheme()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "activate UserSettings"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "UserSettings -\u003e UserSettings :setDarkTheme()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "UserSettings --\u003e Model :"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "deactivate UserSettings"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "Model --\u003e ThemeCommand"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "ThemeCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "deactivate ThemeCommand"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "ThemeCommand -[hidden]-\u003e LogicManager : result"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "destroy ThemeCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "ambhinav": 53
    }
  },
  {
    "path": "docs/diagrams/UiClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor UI_COLOR_T4"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor UI_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "package UI \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Ui \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"{abstract}\\nUiPart\" as UiPart"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class UiManager"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class MainWindow"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class HelpWindow"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class ResultDisplay"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "Class UserViewMain"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "Class UserViewUpdate"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "Class UserViewNavigator"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "Class UserViewController"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "Class TaskCard"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "Class TaskListPanel"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "Class InventoryCard"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "Class InventoryListPanel"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "Class MemberCard"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "Class MemberListPanel"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "Class ProjectDashboardView"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Class StatusBarFooter"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommandBox"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "package Model \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenLogic #FFFFFF"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Ui"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager .left.|\u003e Ui"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -down-\u003e MainWindow"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow --\u003e HelpWindow"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e CommandBox"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e ResultDisplay"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "MainWindow *-down-\u003e UserViewMain"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "MainWindow *-down-\u003e UserViewUpdate"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e StatusBarFooter"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "UserViewMain -right-\u003e UserViewUpdate"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "UserViewMain -down-\u003e UserViewController"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "UserViewMain -down-\u003e UserViewNavigator"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "UserViewNavigator -right-\u003e UserViewController"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "ProjectDashboardView -down-\u003e TaskCard"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "TaskListPanel -down-\u003e TaskCard"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "MemberListPanel -down-\u003e MemberCard"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "InventoryListPanel -down-\u003e InventoryCard"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "UserViewNavigator ..down-\u003e TaskListPanel"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "UserViewNavigator ..down-\u003e MemberListPanel"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "UserViewNavigator ..down-\u003e InventoryListPanel"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "UserViewNavigator ..down-\u003e ProjectDashboardView"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "UserViewController ..down-\u003e TaskListPanel"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "UserViewController ..down-\u003e MemberListPanel"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "UserViewController ..down-\u003e InventoryListPanel"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "UserViewController ..down-\u003e ProjectDashboardView"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -left-|\u003e UiPart"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "ResultDisplay --|\u003e UiPart"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox --|\u003e UiPart"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "TaskCard --|\u003e UiPart"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "TaskListPanel --|\u003e UiPart"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "MemberCard --|\u003e UiPart"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "MemberListPanel --|\u003e UiPart"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "InventoryCard --|\u003e UiPart"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "InventoryListPanel --|\u003e UiPart"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "ProjectDashboardView --|\u003e UiPart"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "StatusBarFooter --|\u003e UiPart"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "HelpWindow -down-|\u003e UiPart"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -right-\u003e Logic"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -left-\u003e Logic"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "UserViewMain -left-\u003e Logic"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "UserViewNavigator ..\u003e Logic"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "MemberCard ..\u003e Model"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "TaskCard ..\u003e Model"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "InventoryCard ..\u003e Model"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "UserViewMain -[hidden]left- HelpWindow"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "HelpWindow -[hidden]left- CommandBox"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox -[hidden]left- ResultDisplay"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "ResultDisplay -[hidden]left- StatusBarFooter"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -[hidden]-|\u003e UiPart"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "ambhinav": 46,
      "-": 52
    }
  },
  {
    "path": "docs/diagrams/tracing/LogicSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include ../style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":LogicManager\" as logic LOGIC_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":AddressBookParser\" as abp LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":EditCommandParser\" as ecp LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \"command:EditCommand\" as ec LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "[-\u003e logic : execute"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "activate logic"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "logic -\u003e abp ++: parseCommand(commandText)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "create ecp"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "abp -\u003e ecp"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "abp -\u003e ecp ++: parse(arguments)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "create ec"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "ecp -\u003e ec ++: index, editTaskDescriptor"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "ec --\u003e ecp --"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "ecp --\u003e abp --: command"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "abp --\u003e logic --: command"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "ambhinav": 1,
      "-": 20
    }
  },
  {
    "path": "docs/tutorials/AddRemark.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Tutorial - Adding a new Command"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":toc: macro"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images/add-remark"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "toc::[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we\u0027ll walk you through the implementation of a new command -- `remark`."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "This command allows users of the AddressBook application to add optional remarks to people in their address book and edit it if required."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "The command should have the format of `remark INDEX r/REMARK`."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "An example of the command is `remark 2 r/Likes baseball`."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "We\u0027ll assume that you have already set up the development environment as outlined in the Developer\u0027s Guide."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Create a new `remark` command"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Looking in the `logic.command` package, you will notice that each existing command have their own class."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "All the commands inherit from the abstract class `Command` which means that they must override `execute()`."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "Each `Command` returns an instance of `CommandResult` upon success and `CommandResult#feedbackToUser` is printed to the `ResultDisplay`."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s start by creating a new `RemarkCommand` class in the `src/main/java/seedu/address/logic/command` directory."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "For now, let\u0027s keep `RemarkCommand` as simple as possible and print some output."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "We accomplish that by returning a `CommandResult` with an accompanying message."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".RemarkCommand.java"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ambhinav"
        },
        "content": " * Changes the remark of an existing task in the address book."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remark\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(\"Hello from remark\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Hook `RemarkCommand` into the application"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have our `RemarkCommand` ready to be executed, we need to update `AddressBookParser#parseCommand()` to recognize the `remark` keyword."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "Add the new command to the `switch` block by creating a new `case` that returns a new instance of `RemarkCommand`."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "You can refer to the changes in this link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/7d04e49e364dad661cd88f462f01923fba972d2c#diff-5338391f3f6fbb4022c44add6590b74f[diff]."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Run the application"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "Run `Main#main` and try out your new `RemarkCommand`."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "If everything went well, you should see something like this:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ".Output displayed"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "image::RemarkHello.png[]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Change `RemarkCommand` to throw an exception"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "While we have successfully printed a message to `ResultDisplay`, the command does not do what it is supposed to do."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s change the command to throw an `CommandException` to accurately reflect that our command is still a work in progress."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ".The relationship between RemarkCommand and Command"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "image::CommandInterface.png[]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "Following the convention in other commands, we add relevant messages as constants and use them."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ".RemarkCommand.java"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the remark of the task identified \""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            + \"by the index number used in the last task listing. \""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing remark will be overwritten by the input.\\n\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ [REMARK]\\n\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ Likes to swim.\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d \"Remark command not implemented yet\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(MESSAGE_NOT_IMPLEMENTED_YET);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Enhancing `RemarkCommand`"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s change `RemarkCommand` to  parse input from the user."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Make the command accept parameters"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "We start by modifying the constructor of `RemarkCommand` to accept an `Index` and a `String`."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "While we are at it, let\u0027s change the error message to echo the values."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "While this is not a replacement for tests, it is an obvious way to tell if our code is functioning as intended."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ARGUMENTS \u003d \"Index: %1$d, Remark: %2$s\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String remark;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * @param index of the task in the filtered task list to edit the remark"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * @param remark of the task to be updated to"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public RemarkCommand(Index index, String remark) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(index, remark);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(String.format(MESSAGE_ARGUMENTS, index.getOneBased(), remark));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof RemarkCommand)) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        RemarkCommand e \u003d (RemarkCommand) other;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 remark.equals(e.remark);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "Your code should look something like link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/83dd9e6b03d6b83199ceb6f3b66166483155abed#diff-34ace715a8a8d2e5a66e71289f017b47[this] after you are done."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Parse user input"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "Now let\u0027s move on to writing a parser that will extract the index and remark from the input provided by the user."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "Create a `RemarkCommandParser` class in the `seedu.address.logic.parser` package."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "The class must extend the `Parser` interface."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ".The relationship between Parser and RemarkCommandParser"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "image::ParserInterface.png[]"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "Thankfully, `ArgumentTokenizer#tokenize()` makes it trivial to parse user input."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s take a look at the JavaDoc provided for the function to understand what it does."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ".ArgumentTokenizer.java"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes an arguments string and returns an {@code ArgumentMultimap}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": " * object that maps prefixes to their respective argument values. Only the"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": " * given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": " * @param argsString Arguments string of the form:"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": " * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": " * @return           ArgumentMultimap object that maps prefixes to their"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": " * arguments"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "We can tell `ArgumentTokenizer#tokenize()` to look out for our new prefix `r/` and it will return us an instance of `ArgumentMultimap`."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "Now let\u0027s find out what we need to do in order to obtain the Index and String that we need."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s look through `ArgumentMultimap` :"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ".ArgumentMultimap.java"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": " * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    return values.isEmpty() ? Optional.empty() :"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "This appears to be what we need to get a String of the remark."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "But what about the Index? Taking a quick peek at existing an `Command`..."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ".DeleteCommandParser.java"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "return new DeleteCommand(index);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "There appears to be another utility class that obtains an `Index` from the input provided by the user."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have the know-how to extract the data that we need from the user\u0027s input, we can create a new instance of `RemarkCommand`."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ".RemarkCommandParser.java"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "public RemarkCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    requireNonNull(args);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        PREFIX_REMARK);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    Index index;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    try {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "            RemarkCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    String remark \u003d argMultimap.getValue(PREFIX_REMARK).orElse(\"\");"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    return new RemarkCommand(index, remark);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: Don\u0027t forget to update `AddressBookParser` to use our new `RemarkCommandParser`!"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "If you are stuck, check out the sample link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/efdcdf0e80cec9489f7b47e3f65824f4688ad8f7#diff-fc19ecee89c3732a62fbc8c840250508[here]."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Add `Remark` to the model"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have all the information that we need, let\u0027s lay the groundwork for some _persistent_ changes."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "We achieve that by working with the `Person` model."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "Each field in a Person is implemented as a separate class (e.g. a `Name` object represents the task\u0027s name)."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "That means we should add a `Remark` class so that we can use a `Remark` object to represent a remark given to a task."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Add a new `Remark` class"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "Create a new `Remark` in `seedu.address.model.task`. Since a `Remark` is a field that is similar to `Address`, we can reuse a significant bit of code."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "A copy-paste and search-replace later, you should have something like link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/b7a47c50c8e5f0430d343a23d2863446b6ce9298#diff-af2f075d24dfcd333876f0fbce321f25[this]."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "Note how `Remark` has no constrains and thus does not require input validation."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Make use of `Remark`"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s change `RemarkCommand` and `RemarkCommandParser` to use the new `Remark` class instead of plain `String`."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "These should be relatively simple changes."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Add a placeholder element for remark to the UI"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "Without getting too deep into `fxml`, let\u0027s go on a 5 minute adventure to get some placeholder text to show up for each task."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "Simply add"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ".PersonCard.java"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "private Label remark;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "to link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/2758455583f0101ed918a318fc75679270843a0d#diff-0c6b6abcfac8c205e075294f25e851fe[`seedu.address.ui.TaskCard`]."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "`@FXML` is an annotation that marks a private or protected field and makes it accessible to FXML."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "It might sound like Greek to you right now, don\u0027t worry -- we will get back to it later."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "Then insert"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "into link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/2758455583f0101ed918a318fc75679270843a0d#diff-12580431f55d7880578aa4c16f249e71[`main/resources/view/PersonListCard.fxml`]."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "That\u0027s it! Fire up the application again and you should see something like this:"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ".$remark shows up in each entry"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "image::$Remark.png[]"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Modify `Person` to support a `Remark` field"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "Since `PersonCard` displays data from a `Person`, we need to update `Person` to get our `Remark` displayed!"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Modify `Person`"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "We change the constructor of `Person` to take a `Remark`."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "We will also need to define new fields and accessors accordingly to store our new addition."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Update other usages of `Person`"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, a change to `Person` will cause other commands to break, you will have to modify these commands to use the updated `Person`!"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "TIP: Use the `Find Usages` feature in IntelliJ IDEA on the `Person` class to find these commands."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/b241ef8526bd4e8a6ad94b8118b7fc3441ec8fa3#diff-3462fc1118b9872387a01b41157b0402[this commit] and check that you have got everything in order!"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Updating Storage"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook stores data by serializing `JsonAdaptedPerson` into `json` with the help of an external library -- Jackson."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s update `JsonAdaptedPerson` to work with our new `Person`!"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "While the changes to code may be minimal, the test data will have to be updated as well."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "WARNING: You must delete AddressBook\u0027s storage file located at `/data/addressbook.json` before running it!"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "Not doing so will cause AddressBook to default to an empty address book!"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "Check out link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/ce4f9b70f524d2395948861d80d57fda9ae6e82e#diff-07708562699e2436c717f3330bafae1e[this commit] to see what the changes entail."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Finalizing the UI"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have finalized the `Person` class and its dependencies, we can now bind the `Remark` field to the UI."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "Just add link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/56d5cb662c31dd38b02f6a5301ba6ab3c667d6a3#diff-0c6b6abcfac8c205e075294f25e851fe[this one line of code!]"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ".PersonCard.java"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "public PersonCard(Person task, int displayedIndex) {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    remark.setText(task.getRemark().value);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ".The remark label is bound properly!"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "image::RemarkBound.png[]"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Putting everything together"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "After the previous step, we notice a peculiar regression -- we went from displaying something to nothing at all."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "However, this is expected behavior as we have never changed `RemarkCommand` at all!"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Update `RemarkCommand` and `RemarkCommandParser`"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "In this last step, we modify `RemarkCommand#execute()` to change the `Remark` of a `Person`."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "Since all fields in a `Person` are immutable, we create a new instance of a `Person` with the values that we want and save it with `Model#setPerson()`."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ".RemarkCommand.java"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to Person: %1$s\";"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed remark from Person: %1$s\";"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        Person taskToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        Person editedTask \u003d new Person(taskToEdit.getName(), taskToEdit.getPhone(), taskToEdit.getEmail(),"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                taskToEdit.getAddress(), remark, taskToEdit.getTags());"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        model.setPerson(taskToEdit, editedTask);"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        return new CommandResult(generateSuccessMessage(editedTask));"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "     * Generates a command execution success message based on whether the remark is added to or removed from"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * {@code taskToEdit}."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    private String generateSuccessMessage(Person taskToEdit) {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "        String message \u003d !remark.value.isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_DELETE_REMARK_SUCCESS;"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        return String.format(message, taskToEdit);"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "Make one last link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/b3307d7a42acb613a8f1d36979a7f547abcf6623#diff-34ace715a8a8d2e5a66e71289f017b47[check] to ensure that everything is working properly..."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ".Congratulations!"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "image::RemarkComplete.png[]"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Writing tests"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "Tests are crucial to ensuring that bugs don\u0027t slip into the codebase unnoticed. This is especially true for large"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "code bases where a change might lead to unintended behavior."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s verify the correctness of our code by writing some tests!"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Automagically generating tests"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "The goal is to write effective and efficient tests to ensure that `RemarkCommand#execute()` behaves as expected."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "The convention for test names is _``methodName_testScenario_expectedResult``_."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "An example would be `execute_filteredList_success`."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s create a test for `RemarkCommand#execute()` to test that adding a remark works."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "On `IntelliJ IDEA` you can bring up the context menu and choose to `Go To` \u003e `Test` or use the appropriate keyboard shortcut."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": ".Using the context menu to jump to tests"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "image::ContextMenu.png[, 1223px, 267px]"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "Then, create a test for the `execute` method."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": ".Creating a test for `execute`."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "image::CreateTest.png[, 664px,751px]"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "Following convention, let\u0027s change the name of the generated method to `execute_addRemarkUnfilteredList_success`."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s use the utility functions provided in `CommandTestUtil`. The functions ensure that commands produce the expected `CommandResult` and output the correct message."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "In this case, `CommandTestUtil#assertCommandSuccess` is the best fit as we are testing that a `RemarkCommand` will successfully add a `Remark`."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "You should end up with a test that looks something like"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/b3307d7a42acb613a8f1d36979a7f547abcf6623#diff-d749de38392f7ea504da7824641ba8d9[this]."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Conclusion"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "This concludes the tutorial for adding a new `Command` to AddressBook."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "//Link to more discussions"
      }
    ],
    "authorContributionMap": {
      "ambhinav": 20,
      "-": 405
    }
  },
  {
    "path": "docs/tutorials/RemovingFields.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Tutorial - Removing a field from an entity"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images/remove"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "[quote, Antoine de Saint-Exupery]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "When working on Address Book, you will most likely find that some features and fields that are no longer necessary."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "In scenarios like this, you can consider refactoring the existing `Person` model to suit your use case."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we\u0027ll do exactly just that and remove the `address` field from `Person`."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Safely deleting `Address`"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "Fortunately, the IntelliJ IDEA provides a robust refactoring tool that can identify _most_ usages."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s try to use it as much as we can."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Assisted refactoring"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "The `address` field in `Person` is actually an instance of the `seedu.address.model.task.Address` class."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Since removing the `Address` class will break the application, we start by identifying ``Address``\u0027s usages."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "This allows us to see code that depends on `Address` to function properly and edit them on a case-by-case basis."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "Right-click the `Address` class and select `Refactor` \u003e `Safe Delete` through the menu."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".Usages detected"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "image::UnsafeDelete.png[width\u003d787px. height\u003d238px]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Choose to `View Usages` and you should be presented with a list of `Safe Delete Conflicts`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "These conflicts describe locations in which the `Address` class is used."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ".List of conflicts"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "image::SafeDeleteConflicts.png[width\u003d955, height\u003d640px]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "Remove usages of `Address` by performing ``Safe Delete``s on each entry."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "You will need to exercise discretion when removing usages of `Address`."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Functions like `ParserUtil#parseAddress()` can be safely removed but its usages must be removed as well."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "Other usages like in `EditPersonDescriptor` may require more careful inspection."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s try removing references to `Address` in `EditPersonDescriptor`."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ". Safe delete the field `address` in `EditPersonDescriptor`"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Yes` when prompted to remove getters and setters"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `View Usages` again image:UnsafeDeleteOnField.png[width\u003d1145px, height\u003d583px]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ". Remove the usages of `address` and select `Do refactor` when you are done."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "TIP: Removing usages may result in errors."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Exercise discretion and fix them."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "For example, removing the `address` field from the `Person` class will require you to modify its constructor."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ". Repeat the steps for the remaining usages of `Address`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "After you are done, verify that the application still works by compiling and running it again."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Manual refactoring"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, there are usages of `Address` that IntelliJ IDEA cannot identify."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "You can find them by searching for instances of the word `address` in your code (`Edit` \u003e `Find` \u003e `Find in path`)."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "Places of interest to look out for would be resources used by the application."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "`main/resources` contains images and `fxml` files used by the application and `test/resources` contains test data."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "For example, there is a `$address` in each `PersonCard` that has not been removed nor identified."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "image::$address.png[width\u003d1090px, height\u003d890px]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the `PersonCard` class and its `fxml` file quickly reveals why it slipped past the automated refactoring."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ".PersonCard.java"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "private Label address;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ".PersonCard.fxml"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "[source, xml]"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "After removing the `Label`, we can proceed to formally test our code."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "If everything went well, you should have most of your tests pass."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "Fix any remaining errors until the tests all pass."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Tidying up"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "At this point, your application is working as intended and all your tests are passing."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "What\u0027s left to do is to clean up references to `Address` in test data and documentation."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "In `src/test/data/`, data meant for testing purposes are stored."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "While keeping the `address` field in the json files does not cause the tests to fail, it is not good practice to let cruft from old features accumulate."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ".invalidPersonAddressBook.json"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "[source, json]"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "  \"tasks\": [ {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"4th street\""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "You can go through each individual `json` file and manually remove the `address` field."
      }
    ],
    "authorContributionMap": {
      "ambhinav": 2,
      "-": 115
    }
  },
  {
    "path": "docs/tutorials/TracingCode.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Tutorial - Tracing a Command Execution Path"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images/tracing"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "[quote, Robert C. Martin, Clean Code: A Handbook of Agile Software Craftsmanship ]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Indeed, the ratio of time spent reading versus writing is well over 10 to 1. We are constantly reading old code as"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "part of the effort to write new code.  ...[Therefore,] making it easy to read makes it easier to write."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "When trying to understand an unfamiliar code base, one common strategy used is to trace some representative execution"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "path through the code base. One easy way to trace an execution path is to use a debugger to step through the code."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, you will be using the IntelliJ IDEA\u0027s debugger to trace the execution path of a specific user command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "Before we jump into the code, it is useful to get an idea of the overall structure and the high-level behavior of the"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "application. This is provided in the \u0027Architecture\u0027 section of the developer guide. In particular, the"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "architecture diagram (reproduced below), tells us that the App consists of several components."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "image::../ArchitectureDiagram.png[]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "It also has a sequence diagram (reproduced below) that tells us how a command propagates through the App."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture sequence diagram from the developer guide"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "image::../ArchitectureSequenceDiagram.png[]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the diagram shows only how the execution flows _between_ the main components. That is, it does not show details of"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "the execution path _inside_ each component. By hiding those details, the diagram succeeds in informing the reader"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "about the overall execution path of a command without overwhelming the reader with too much details."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, you aim to find those omitted details so that you get a more in-depth understanding of the code base."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Before we proceed, ensure that you have done the following:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ". Read the _Architecture_ section of the DG"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the project in Intellij IDEA"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ". Learn basic debugging features of Intellij IDEA"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting a break point"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "As you know, the first step of debugging is to put in a breakpoint where you want the debugger to pause the execution."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "For example, if you are trying to understand how the App starts up, you would put a breakpoint in the first statement"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "of the `main` method. In our case, we would want to begin the tracing at the very point where the App start processing"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "user input i.e., somewhere in the UI component, and then trace through how the execution proceeds through the UI component."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "However, the execution path through a GUI is often somewhat obscure due to various _event-driven mechanisms_"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "used by GUI frameworks, which happens to be the case here too. Therefore, let us put the breakpoint where the UI transfers"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "control to the Logic component. According to the sequence diagram, the UI component yields control to the Logic component"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "through a method named `execute`. Searching through the code base for `execute()` yields a promising candidate in"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "`seedu.address.ui.CommandBox.CommandExecutor`."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ".Using the `Search for target by name` feature. `Navigate` \u003e `Symbol`."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "image::Execute.png[]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the class confirms that this is indeed close to what we\u0027re looking for. However, it is just an"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "`Interface`. Let\u0027s delve further and find the implementation of the interface by using the `Find Usages` feature in"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ IDEA."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ".`Find Usages` tool window. `Edit` \u003e `Find` \u003e `Find Usages`."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "image::FindUsages.png[]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "Bingo! `MainWindow#executeCommand()` seems to be exactly what we\u0027re looking for!"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "Now let\u0027s set the breakpoint. First, double-click the item to reach the corresponding code. Once there, click on the left"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "gutter to set a breakpoint, as shown below."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "image:LeftGutter.png[]"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Tracing the execution path"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "Recall from the User Guide that the `edit` command has the format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL]"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "[a/ADDRESS] [t/TAG]...` For this tutorial we will be issuing the command `edit 1 n/Alice Yeoh`."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ".Taking notes"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "Over the course of the debugging session, you will encounter every major component in the application. Try to jot down"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "what happens inside the component and where the execution transfers to another component."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ". To start the debugging session, simply `Run` \u003e `Debug Main`"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ". Enter `edit 1 n/Alice Yeoh` into the command box and press `Enter`."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ". The Debugger tool window should show up and look something like this:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "image:DebuggerStep1.png[]"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ". Use the `Show execution point` feature to jump to the line of code that we stopped at:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "image:ShowExecutionPoint.png[]"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ". `CommandResult commandResult \u003d logic.execute(commandText);` is the line that you end up at."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ". We are interested in the `logic.execute(commandText)` portion of that line so let\u0027s `Step in` into that method call:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "image:StepInto.png[]"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ". We end up in `LogicManager#execute()`. Let\u0027s take a look at the body of the method and annotate what we can deduce."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".LogicManager#execute()"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     //Logging, safe to ignore"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     CommandResult commandResult;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     //Parse user input from String to a Command"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     //Executes the Command and stores the result"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     try {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         //We can deduce that the previous line of code modifies model in some way"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         // since it\u0027s being stored here."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "         storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     } catch (IOException ioe) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "         throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     return commandResult;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": " }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ". `LogicManager#execute()` appears to delegate most of the heavy lifting to other components. Let\u0027s take a closer"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "look at each one."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ". `Step over` the logging code since it is of no interest to us now."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "image:StepOver.png[]"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ". `Step into` the line where user input in parsed from a String to a Command."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ".AddressBookParser#parseCommand()"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ". `Step over` until you reach the `switch` statement. The `Variables` window now shows the value of both"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "`commandWord` and `arguments` :"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "image:Variables.png[]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ". We see that the value of `commandWord` is now `edit` but `arguments` is still not processed in any meaningful way."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ". Stepping into the `switch`, we obviously stop at"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ".AddressBookParser#parseCommand()"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ". Let\u0027s see what `EditCommandParser#parse()` does by stepping into it."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ". Stepping through the method shows that it calls `ArgumentTokenizer#tokenize()` and `ParserUtil#parseIndex()` to"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "obtain the arguments and index required."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ".Stepping out"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "Sometimes you might end up stepping into functions that are not of interest. Simply `step out` of them!"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ". The rest of the method seems to exhaustively check for the existence of each possible parameter of the `edit`"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "command and store any possible changes in an `EditPersonDescriptor`. Recall that we can verify the contents of"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "`editPersonDesciptor` through the `Variable` tool window."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "image:EditCommand.png[]"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ". Let\u0027s continue stepping through until we return to `LogicManager#execute()`."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "The sequence diagram below shows the details of the execution path through the Logic component."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "Does the execution path you traced in the code so far matches with the diagram?"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ".Tracing an `edit` command through the Logic component"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicSequenceDiagram.png[]"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ". Now let\u0027s see what happens when we call `command#execute()`!"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ".EditCommand#execute()"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    Person taskToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    Person editedTask \u003d createEditedPerson(taskToEdit, editTaskDescriptor);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    if (!taskToEdit.isSamePerson(editedTask) \u0026\u0026 model.hasPerson(editedTask)) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    model.setPerson(taskToEdit, editedTask);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedTask));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ". As suspected, `command#execute()` does indeed make changes to `model`."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ". We can a closer look at how storage works by repeatedly stepping into the code until we arrive at"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "`JsonAddressBook#saveAddressBook()`."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ". Again, it appears that the heavy lifting is delegated. Let\u0027s take a look at ``JsonSerializableAddressBook``\u0027s"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "constructor."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ".JsonSerializableAddressBook#JsonSerializableAddressBook()"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": " * @param source future changes to this will not affect the created"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    tasks.addAll("
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        source.getPersonList()"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "              .stream()"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "              .map(JsonAdaptedPerson::new)"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "              .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ". It appears that a `JsonAdaptedPerson` is created for each `Person` and then added to the"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "`JsonSerializableAddressBook`."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ". We can continue to step through until we return to `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ". Stepping into ``resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());``, we end up in:"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ".ResultDisplay#setFeedbackToUser()"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ". Finally, we step through until we reach the end of `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Conclusion"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we traced a valid edit command from raw user input to the result being displayed to the user. From"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "this tutorial, you learned more about the inner workings of AddressBook and how the various components mesh together"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "to form one cohesive product."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ".What\u0027s next?"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "Here are some quick questions you can try to answer based on your execution path tracing. In some cases, you can"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "do further tracing for the given commands to find exactly what happens."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ". In this tutorial, we traced the \"happy path\" (i.e., no errors). What do you think will happen if we traced the following commands"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "instead? What exceptions do you think will be thrown(if any), where will the exceptions be thrown and where will they be"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "handled?"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ".. `redit 1 n/Alice Yu`"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 0 n/Alice Yu`"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 1 n/Alex Yeoh`"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 1`"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 1 n/アリス ユー`"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 1 t/one t/two t/three t/one`"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ". What components will you have to modify to perform the following enhancements to the application?"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ".. Make command words case-insensitive"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ".. Allow `delete` to remove more than one index at a time"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ".. Save the address book in the CSV format instead"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ".. Add a new command"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ".. Add a new field to `Person`"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ".. Add a new entity to the address book"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      }
    ],
    "authorContributionMap": {
      "ambhinav": 6,
      "-": 252
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.ProjectDashboard;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.ReadOnlyProjectDashboard;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.ReadOnlyUserSettings;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.UserSettings;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.util.SampleTaskDataUtil;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.storage.JsonProjectDashboardStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.storage.JsonUserSettingsStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.storage.ProjectDashboardStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.storage.UserSettingsStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing +Work ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        ProjectDashboardStorage projectDashboardStorage \u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                new JsonProjectDashboardStorage(userPrefs.getProjectDashboardFilePath());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        UserSettingsStorage userSettingsStorage \u003d new JsonUserSettingsStorage(userPrefs.getUserSettingsFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        storage \u003d new StorageManager(projectDashboardStorage, userPrefsStorage, userSettingsStorage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s project dashboard, user settings"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * The data from the sample project dashboard will be used instead if {@code storage}\u0027s project dashboard"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * is not found, or a new project will be used instead if errors occur when reading {@code storage}\u0027s"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * project dashboard."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * Similarly, default user settings will be used instead if {@code storage}\u0027s user settings is not found."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        Optional\u003cReadOnlyProjectDashboard\u003e projectDashboardOptional;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        ReadOnlyProjectDashboard initialData;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        Optional\u003cUserSettings\u003e userSettingsOptional;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        ReadOnlyUserSettings userSettings \u003d null;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            projectDashboardOptional \u003d storage.readProjectDashBoard();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            if (!projectDashboardOptional.isPresent()) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample ProjectDashboard\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            initialData \u003d projectDashboardOptional.orElseGet(SampleTaskDataUtil::getSampleProjectDashboard);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            userSettingsOptional \u003d storage.readUserSettings();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            userSettings \u003d userSettingsOptional.orElse(new UserSettings());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty Project\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            initialData \u003d new ProjectDashboard();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty Project\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            initialData \u003d new ProjectDashboard();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        return new ModelManager(initialData, userPrefs, userSettings);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "//     * Returns a {@code UserSettings} using the file at {@code storage}\u0027s user settings file path,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "//     * or a new {@code UserSettings} with default configuration if errors occur when"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "//     * reading from the file."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "//    protected UserSettings initPrefs(UserSettingsStorage storage) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "//        Path settingsFilePath \u003d storage.getUserSettingsFilePath();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "//        logger.info(\"Using settings file : \" + settingsFilePath);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "//"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "//        UserSettings initialisedSettings;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "//        try {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "//            Optional\u003cUserSettings\u003e settingsOptional \u003d storage.readUserSettings();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "//            initialisedSettings \u003d settingsOptional.orElse(new UserSettings());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "//        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "//            logger.warning(\"UserSettings file at \" + settingsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "//                    + \"Using default user settings\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "//            initialisedSettings \u003d new UserSettings();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "//        } catch (IOException e) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "//            logger.warning(\"Problem while reading from the file. Will be starting with an empty Project\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "//            initialisedSettings \u003d new UserSettings();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "//"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "//        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "//        try {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "//            storage.saveUserSettings(initialisedSettings);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "//        } catch (IOException e) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "//            logger.warning(\"Failed to save settings file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "//"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "//        return initialisedSettings;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty ProjectDashboard\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        logger.info(\"Starting ProjectDashboard \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping +Work ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambhinav": 70,
      "-": 158
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public static final String MESSAGE_INVALID_TASK_DISPLAYED_INDEX \u003d \"The task index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public static final String MESSAGE_INVALID_MEMBER_ID \u003d \"The member id provided is invalid\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public static final String MESSAGE_TASKS_LISTED_OVERVIEW \u003d \"%1$d tasks listed!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public static final String MESSAGE_MEMBERS_LISTED_OVERVIEW \u003d \"%1$d members listed!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public static final String MESSAGE_INVALID_INVENTORY_DISPLAYED_INDEX \u003d \"The inventory index provided is invalid\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambhinav": 2,
      "ArunBeCoding": 1,
      "seahlynn": 2,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/index/Index.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public Index() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        zeroBasedIndex \u003d -1;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ArunBeCoding": 5,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/DateTimeUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ambhinav"
        },
        "content": " * Util class that deals with date-time parsing and display."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ambhinav"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "public class DateTimeUtil {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public static final String DEFAULT_INPUT_FORMAT \u003d \"dd/MM/yyyy kk:mm\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public static final String DISPLAY_FORMAT_TWENTY_FOUR_HOUR \u003d \"EEEE, MMM dd, yyyy HH:mm\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public static final String DISPLAY_FORMAT_TWELVE_HOUR \u003d \"EEEE, MMM dd, yyyy hh:mm a\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Please follow the \" + DEFAULT_INPUT_FORMAT + \" format required\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    private static DateTimeFormatter defaultFormatter \u003d DateTimeFormatter.ofPattern(DEFAULT_INPUT_FORMAT);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    private static DateTimeFormatter displayFormatterTwentyFourHour \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            DateTimeFormatter.ofPattern(DISPLAY_FORMAT_TWENTY_FOUR_HOUR);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    private static DateTimeFormatter displayFormatterTwelveHour \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            DateTimeFormatter.ofPattern(DISPLAY_FORMAT_TWELVE_HOUR);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    private static DateTimeFormatter defaultDisplayFormat \u003d displayFormatterTwentyFourHour;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public static DateTimeFormatter getDisplayFormatterTwentyFourHour() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        return displayFormatterTwentyFourHour;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public static DateTimeFormatter getDisplayFormatterTwelveHour() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        return displayFormatterTwelveHour;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public static DateTimeFormatter getDefaultFormatter() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        return defaultFormatter;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public static void switchDisplayFormat(DateTimeFormatter newFormat) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        defaultDisplayFormat \u003d newFormat;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * Allows user to switch display formats."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * Currently used only in {@code DateTimeUtilTest}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * TODO implement with ENUM instead!"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public static void switchDisplayFormatToTwentyFour() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        defaultDisplayFormat \u003d displayFormatterTwentyFourHour;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public static void switchDisplayFormatToTwelve() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        defaultDisplayFormat \u003d displayFormatterTwelveHour;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * Parses the date time given by the user."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "      */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public static LocalDateTime parseDateTime(String rawDateTime) throws ParseException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        requireNonNull(rawDateTime);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            return LocalDateTime.parse(rawDateTime, defaultFormatter);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            throw new ParseException(MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * Display the date/time in a user friendly-manner"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public static String displayDateTime(LocalDateTime dateTime) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        requireNonNull(dateTime);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        return defaultDisplayFormat.format(dateTime);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * Checks if a task is due soon by comparing its due date to the current date and time."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * @param weeks the reminder period specified by the user"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * @param dateTime deadline of the task"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * @return true if task is due within user\u0027s reminder period"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public static boolean checkIfDueSoon(int weeks, LocalDateTime dateTime) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        requireNonNull(dateTime);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        LocalDateTime dueDate \u003d dateTime.minusWeeks(weeks);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        return LocalDateTime.now().isAfter(dueDate);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public static DateTimeFormatter getDefaultDisplayFormat() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        return defaultDisplayFormat;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambhinav": 95
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/StringUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * Returns true if {@code s} represents a positive double value"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * e.g. 1, 2.50, 3.38, ..., {@code Double.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * e.g. empty string, \"-1\", \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public static boolean isPositiveDouble(String s) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            double value \u003d Double.parseDouble(s);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            return value \u003e 0;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ArunBeCoding": 18,
      "-": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.ReadOnlyProjectDashboard;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.model.member.Member;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import seedu.address.model.inventory.Inventory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.settings.ClockFormat;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.settings.Theme;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.model.statistics.Statistics;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * Returns the ProjectDashboard."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * @see seedu.address.model.Model#getProjectDashboard()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    ReadOnlyProjectDashboard getProjectDashboard();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of persons */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    ObservableList\u003cTask\u003e getFilteredTaskList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of members */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    ObservableList\u003cMember\u003e getFilteredMemberList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of persons */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    ObservableList\u003cTask\u003e getFilteredTaskListNotStarted();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of persons */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    ObservableList\u003cTask\u003e getFilteredTaskListDoing();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of persons */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    ObservableList\u003cTask\u003e getFilteredTaskListDone();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of persons */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    ObservableList\u003cTask\u003e getFilteredTaskListByDeadline();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of inventories */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    ObservableList\u003cInventory\u003e getFilteredInventoryList();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    Path getProjectDashboardFilePath();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * Returns the project statistics."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    Statistics getStatistics();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * Returns the current theme of +Work."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    Theme getCurrentTheme();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * Returns the clock format of +Work."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    ClockFormat getClockFormat();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambhinav": 36,
      "ArunBeCoding": 3,
      "seahlynn": 6,
      "-": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import seedu.address.logic.parser.ProjectDashboardParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.ReadOnlyProjectDashboard;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import seedu.address.model.inventory.Inventory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.member.Member;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.settings.ClockFormat;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.settings.Theme;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.model.statistics.Statistics;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    private final ProjectDashboardParser projectDashboardParser;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        projectDashboardParser \u003d new ProjectDashboardParser();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        Command command \u003d projectDashboardParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            storage.saveProjectDashboard(model.getProjectDashboard());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            storage.saveUserSettings(model.getUserSettings());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public ReadOnlyProjectDashboard getProjectDashboard() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        return model.getProjectDashboard();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    // Task"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public ObservableList\u003cTask\u003e getFilteredTaskList() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        return model.getFilteredTasksList();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public ObservableList\u003cMember\u003e getFilteredMemberList() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        return model.getFilteredMembersList();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "   public ObservableList\u003cTask\u003e getFilteredTaskListNotStarted() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        return model.getFilteredTaskListNotStarted();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public ObservableList\u003cTask\u003e getFilteredTaskListDoing() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        return model.getFilteredTaskListDoing();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public ObservableList\u003cTask\u003e getFilteredTaskListDone() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        return model.getFilteredTaskListDone();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public ObservableList\u003cTask\u003e getFilteredTaskListByDeadline() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        return model.getFilteredTaskListByDeadline();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public ObservableList\u003cInventory\u003e getFilteredInventoryList() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        return model.getFilteredInventoriesList();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public Path getProjectDashboardFilePath() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        return model.getProjectDashboardFilePath();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public Statistics getStatistics() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        return model.getStatistics();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public Theme getCurrentTheme() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        return model.getCurrentTheme();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public ClockFormat getClockFormat() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        return model.getCurrentClockFormat();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambhinav": 40,
      "ArunBeCoding": 9,
      "seahlynn": 11,
      "-": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddInventoryCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INVENTORY_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INVENTORY_PRICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_INDEX;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MEMBER_ID;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import seedu.address.model.inventory.InvName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import seedu.address.model.inventory.Inventory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import seedu.address.model.inventory.Price;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import seedu.address.model.member.MemberId;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "//import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": " * Adds a task to the address book."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "public class AddInventoryCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add-inv\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a inventory to the project Dashboard. \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            + PREFIX_INVENTORY_NAME + \"NAME \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            + PREFIX_INVENTORY_PRICE + \"PRICE \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            + PREFIX_TASK_INDEX + \"TASKID \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            + PREFIX_MEMBER_ID + \"MEMBERID\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            + PREFIX_INVENTORY_NAME + \"BALLS \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            + PREFIX_INVENTORY_PRICE + \"8.50\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            + PREFIX_TASK_INDEX + \"2\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            + PREFIX_MEMBER_ID + \"AR\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New inventory added: %1$s\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_INVENTORY \u003d \"This inventory already exists in the address book\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public static final String MESSAGE_INDEX_EXCEEDED \u003d \"The index entered for tasks is invalid\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public static final String MESSAGE_MEMBERID_INVALID \u003d \"The member Id entered is invalid\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    private final Index taskId;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    private final InvName name;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    private final Price price;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    private final MemberId memId;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * Creates an AddInventoryCommand to add the specified {@code Inventory}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public AddInventoryCommand(Index taskId, InvName name, Price price, MemberId memId) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        requireAllNonNull(taskId, name, price);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        this.taskId \u003d taskId;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        this.price \u003d price;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        this.memId \u003d memId;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public AddInventoryCommand(Index taskId, InvName name, MemberId memId) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        requireAllNonNull(taskId, name);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        this.taskId \u003d taskId;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        this.price \u003d new Price(0);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        this.memId \u003d memId;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        int tasksLength \u003d model.getTasksLength();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        if (taskId.getOneBased() \u003e tasksLength) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            throw new CommandException(MESSAGE_INDEX_EXCEEDED);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        if (!model.hasMemberId(memId)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            throw new CommandException(MESSAGE_MEMBERID_INVALID);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        //Task taskToAdd \u003d model.getFilteredTasksList().get(taskId.getZeroBased());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        Inventory toAdd \u003d new Inventory(/*taskToAdd,*/ name, price);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        if (model.hasInventory(toAdd)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_INVENTORY);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        model.addInventory(toAdd);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                || (other instanceof AddInventoryCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                \u0026\u0026 taskId.equals(((AddInventoryCommand) other).taskId))"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                \u0026\u0026 name.equals(((AddInventoryCommand) other).name)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                \u0026\u0026 price.equals(((AddInventoryCommand) other).price);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ArunBeCoding": 97
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddMemberCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MEMBER_ID;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MEMBER_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MEMBER_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.model.member.Member;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seahlynn"
        },
        "content": " * Adds a task to the address book."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seahlynn"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "public class AddMemberCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add-member\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a member to the address book. \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            + PREFIX_MEMBER_NAME + \"NAME \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            + PREFIX_MEMBER_ID + \"ID \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            + PREFIX_MEMBER_TAG + \"TAG...\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            + PREFIX_MEMBER_NAME + \"John Doe \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            + PREFIX_MEMBER_ID + \"JD \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            + PREFIX_MEMBER_TAG + \"friends \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            + PREFIX_MEMBER_TAG + \"to finish Dashboard\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New member added: %1$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_MEMBER \u003d \"This member already exists in the address book\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    private final Member toAdd;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Task}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public AddMemberCommand(Member member) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        requireNonNull(member);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        toAdd \u003d member;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        if (model.hasMember(toAdd)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_MEMBER);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        model.addMember(toAdd);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "                || (other instanceof AddMemberCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddMemberCommand) other).toAdd));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seahlynn": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddMemberToTaskCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MEMBER_ID;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import seedu.address.model.mapping.TasMemMapping;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.model.member.Member;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.model.member.MemberId;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "public class AddMemberToTaskCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"assign-member\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a member indicated \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            + \"by the memberId used in the displayed member list, to the task indicated \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            + \"by the member ID. \\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            + PREFIX_TASK_INDEX + \"TASK_INDEX \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            + PREFIX_MEMBER_ID + \"MEMBER_ID \\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            + PREFIX_TASK_INDEX + \" 2 \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            + PREFIX_MEMBER_ID + \"JD\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public static final String MESSAGE_ASSIGN_TASK_SUCCESS \u003d \"Set task for member: %1$s\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_MAPPING \u003d \"This mapping already exists!\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    private final Index taskId;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    private final MemberId memberId;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     * @param taskId of the task in the filtered task list to be added to member"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     * @param memberId of the member involved"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public AddMemberToTaskCommand(Index taskId, MemberId memberId) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        requireNonNull(memberId);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        requireNonNull(taskId);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        this.taskId \u003d taskId;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        this.memberId \u003d memberId;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        List\u003cTask\u003e lastShownTaskList \u003d model.getFilteredTasksList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        List\u003cMember\u003e lastShownMemberList \u003d model.getFilteredMembersList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        if (taskId.getZeroBased() \u003e\u003d lastShownTaskList.size()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        boolean contains \u003d false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        Member memberToAdd \u003d null;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        Integer memberIndex \u003d null;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        for (int i \u003d 0; i \u003c lastShownMemberList.size(); i++) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            if (lastShownMemberList.get(i).getId().equals(memberId)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "                contains \u003d true;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "                memberToAdd \u003d lastShownMemberList.get(i);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                memberIndex \u003d i;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        if (!contains) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_MEMBER_ID);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        Task involvedTask \u003d lastShownTaskList.get(taskId.getZeroBased());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        TasMemMapping mappingToAdd \u003d createMapping(taskId.getZeroBased(), memberIndex);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        if (model.hasMapping(mappingToAdd)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_MAPPING);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        model.addMapping(mappingToAdd);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_ASSIGN_TASK_SUCCESS, involvedTask));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     * Creates and returns a {@code Task} with the details of {@code taskToUpdate}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     * where TaskStatus is updated to \u0027In Progress\"."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    private static TasMemMapping createMapping(int taskIndex, int memberIndex) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        return new TasMemMapping(taskIndex, memberIndex);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        if (!(other instanceof AddMemberToTaskCommand)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        AddMemberToTaskCommand e \u003d (AddMemberToTaskCommand) other;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        return memberId.equals(e.memberId)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "                \u0026\u0026 taskId.equals(e.taskId);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seahlynn": 103,
      "gabrielseow": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddTaskCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MEMBER_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_STATUS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ambhinav"
        },
        "content": " * Adds a task to the address book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "public class AddTaskCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add-task\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a task to the dashboard. \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            + PREFIX_TASK_NAME + \"NAME \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            + PREFIX_TASK_STATUS + \"STATUS \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            + PREFIX_TASK_TAG + \"TAG \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            + PREFIX_TASK_NAME + \"Complete Assignment \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            + PREFIX_TASK_STATUS + \"unbegun \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            + PREFIX_TASK_TAG + \"urgent\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New task added: %1$s\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TASK \u003d \"This task already exists in the address book\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    private final Task toAdd;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Task}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public AddTaskCommand(Task task) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        requireNonNull(task);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        toAdd \u003d task;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        if (model.hasTask(toAdd)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        model.addTask(toAdd);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                || (other instanceof AddTaskCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddTaskCommand) other).toAdd));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambhinav": 17,
      "ArunBeCoding": 4,
      "seahlynn": 2,
      "-": 32,
      "gabrielseow": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddTaskToMemberCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MEMBER_ID;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import seedu.address.model.mapping.TasMemMapping;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.model.member.Member;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.model.member.MemberId;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seahlynn"
        },
        "content": " * Adds a task to member to be responsible for"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seahlynn"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "public class AddTaskToMemberCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"assign-task\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a task indicated \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            + \"by the index number used in the displayed task list, to the member indicated \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            + \"by the member ID. \\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            + PREFIX_TASK_INDEX + \"TASK_INDEX \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            + PREFIX_MEMBER_ID + \"MEMBER_ID \\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            + PREFIX_TASK_INDEX + \"2 \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            + PREFIX_MEMBER_ID + \"JD\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New mapping added: %1$s\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_MAPPING \u003d \"This mapping already exists!\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public static final String MESSAGE_ASSIGN_TASK_SUCCESS \u003d \"Set task for member: %1$s\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    private final Index taskId;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    private final MemberId memberId;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     * @param taskId of the task in the filtered task list to be added to member"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     * @param memberId of the member involved"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public AddTaskToMemberCommand(Index taskId, MemberId memberId) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        requireNonNull(memberId);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        requireNonNull(taskId);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        this.taskId \u003d taskId;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        this.memberId \u003d memberId;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        List\u003cTask\u003e lastShownTaskList \u003d model.getFilteredTasksList();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        List\u003cMember\u003e lastShownMemberList \u003d model.getFilteredMembersList();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        if (taskId.getZeroBased() \u003e\u003d lastShownTaskList.size()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        boolean contains \u003d false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        Member involvedMember \u003d null;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        Integer memberIndex \u003d null;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        for (int i \u003d 0; i \u003c lastShownMemberList.size(); i++) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            if (lastShownMemberList.get(i).getId().equals(memberId)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "                contains \u003d true;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "                involvedMember \u003d lastShownMemberList.get(i);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                memberIndex \u003d i;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        if (!contains) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_MEMBER_ID);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        Task taskToAdd \u003d lastShownTaskList.get(taskId.getZeroBased());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        TasMemMapping mappingToAdd \u003d createMapping(taskId.getZeroBased(), memberIndex);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        if(model.hasMapping(mappingToAdd)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_MAPPING);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        model.addMapping(mappingToAdd);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_ASSIGN_TASK_SUCCESS, involvedMember));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     * Creates and returns a {@code Task} with the details of {@code taskToUpdate}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     * where TaskStatus is updated to \u0027In Progress\"."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    private static TasMemMapping createMapping(int taskIndex, int memberIndex) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        return new TasMemMapping(taskIndex, memberIndex);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        if (!(other instanceof AddTaskToMemberCommand)) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        AddTaskToMemberCommand e \u003d (AddTaskToMemberCommand) other;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        return memberId.equals(e.memberId)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "                \u0026\u0026 taskId.equals(e.taskId);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seahlynn": 109,
      "gabrielseow": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.ProjectDashboard;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Clears the address book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Address book has been cleared!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        model.setProjectDashboard(new ProjectDashboard());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambhinav": 2,
      "-": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClockCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.settings.ClockFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ambhinav"
        },
        "content": " * Allows user to set the clock format of +Work."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ambhinav"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "public class ClockCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clock\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Toggles clock format between 24hr and 12hr.\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            + \"Parameters: [twenty_four/twelve]\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" twenty_four\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    private final ClockFormat clockFormat;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public ClockCommand(ClockFormat clockFormat) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        this.clockFormat \u003d clockFormat;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        model.setClockFormat(this.clockFormat);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        return new CommandResult(\"Clock format now set to: \" + clockFormat.getDisplayName());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambhinav": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CommandResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    /** The application theme is changed. */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    private final boolean themeChanged;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit, boolean themeChanged) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        this.themeChanged \u003d themeChanged;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        this(feedbackToUser, false, false, false);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public boolean isThemeChanged() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        return themeChanged;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambhinav": 10,
      "-": 69
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteInventoryCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "//import seedu.address.commons.core.index.InvIndex;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import seedu.address.model.inventory.Inventory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": " * Deletes a inventory identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "public class DeleteInventoryCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete-inv\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            + \": Deletes the inventory identified by the index number used in the displayed task list.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            + \"Parameters: INVINDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public static final String MESSAGE_DELETE_INVENTORY_SUCCESS \u003d \"Deleted Inventory: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public DeleteInventoryCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        ObservableList\u003cInventory\u003e lastShownList \u003d model.getFilteredInventoriesList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_INVENTORY_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        Inventory inventoryToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        model.deleteInventory(inventoryToDelete);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_INVENTORY_SUCCESS, inventoryToDelete));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                || (other instanceof DeleteInventoryCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteInventoryCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ArunBeCoding": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteMemberCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.model.member.Member;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.model.member.MemberId;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seahlynn"
        },
        "content": " * Deletes a member identified using it\u0027s displayed ID from the project dashboard."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seahlynn"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "public class DeleteMemberCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remove-member\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            + \": Deletes the member identified by the index used in the displayed task list.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            + \"Parameters: ID (must be an alphanumeric string)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" JD\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public static final String MESSAGE_DELETE_MEMBER_SUCCESS \u003d \"Deleted Member: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    private final MemberId targetId;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public DeleteMemberCommand(MemberId targetId) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        this.targetId \u003d targetId;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        List\u003cMember\u003e lastShownList \u003d model.getFilteredMembersList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        boolean contains \u003d false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        Member memberToDelete \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        for (int i \u003d 0; i \u003c lastShownList.size(); i++) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            if (lastShownList.get(i).getId().equals(targetId)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "                contains \u003d true;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "                memberToDelete \u003d lastShownList.get(i);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        if (!contains) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_MEMBER_ID);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        model.deleteMember(memberToDelete);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_MEMBER_SUCCESS, memberToDelete));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "                || (other instanceof DeleteMemberCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "                \u0026\u0026 targetId.equals(((DeleteMemberCommand) other).targetId)); // id check"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seahlynn": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteTaskCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ambhinav"
        },
        "content": " * Deletes a task identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "public class DeleteTaskCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete-task\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            + \": Deletes the task identified by the index number used in the displayed task list.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public static final String MESSAGE_DELETE_TASK_SUCCESS \u003d \"Deleted Task: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public DeleteTaskCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        List\u003cTask\u003e lastShownList \u003d model.getFilteredTasksList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        Task taskToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        model.deleteTask(taskToDelete);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_TASK_SUCCESS, taskToDelete));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                || (other instanceof DeleteTaskCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteTaskCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambhinav": 9,
      "-": 39,
      "gabrielseow": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DoingTaskCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TASKS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import seedu.address.model.task.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import seedu.address.model.task.TaskStatus;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": " * Edits the details of an existing task in the address book."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "public class DoingTaskCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"doing-task\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public static final String UPDATED_STATUS \u003d TaskStatus.DOING.getDisplayName();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            + \": Marks a task as \u003c\" + UPDATED_STATUS + \"\u003e \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            + \"by the index number used in the displayed task list.\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            + PREFIX_TASK_INDEX + \"TASK_INDEX\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public static final String MESSAGE_DOING_TASK_SUCCESS \u003d \"Updated Task to \u003c\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            + UPDATED_STATUS + \"\u003e: %1$s\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public static final String MESSAGE_TASK_ALREADY_IN_PROGRESS \u003d \"This task is already \u003c\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            + UPDATED_STATUS + \"\u003e: %1$s\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TASK \u003d \"This task already exists in the address book.\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "     * @param index of the task in the filtered task list to edit"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public DoingTaskCommand(Index index) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        List\u003cTask\u003e lastShownList \u003d model.getFilteredTasksList();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        Task taskToUpdate \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        Task updatedTask \u003d createUpdatedTask(taskToUpdate);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        if (!taskToUpdate.isSameTask(updatedTask) \u0026\u0026 model.hasTask(updatedTask)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        model.setTask(taskToUpdate, updatedTask);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        model.updateFilteredTasksList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DOING_TASK_SUCCESS, updatedTask));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "     * Creates and returns a {@code Task} with the details of {@code taskToUpdate}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "     * where TaskStatus is updated to \u0027In Progress\"."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    private static Task createUpdatedTask(Task taskToUpdate) throws CommandException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        assert taskToUpdate !\u003d null;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        Name name \u003d taskToUpdate.getName();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        TaskStatus taskStatus \u003d taskToUpdate.getTaskStatus();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        Set\u003cTag\u003e tags \u003d taskToUpdate.getTags();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        if (taskStatus \u003d\u003d TaskStatus.DOING) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_TASK_ALREADY_IN_PROGRESS, taskToUpdate));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        return new Task(name, TaskStatus.DOING, tags);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        if (!(other instanceof DoingTaskCommand)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        DoingTaskCommand e \u003d (DoingTaskCommand) other;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        return index.equals(e.index);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielseow": 105
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DoneTaskCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TASKS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import seedu.address.model.task.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import seedu.address.model.task.TaskStatus;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": " * Edits the details of an existing task in the address book."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "public class DoneTaskCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"done-task\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public static final String UPDATED_STATUS \u003d TaskStatus.DONE.getDisplayName();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            + \": Marks a task as \u003c\" + UPDATED_STATUS + \"\u003e \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            + \"by the index number used in the displayed task list.\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            + PREFIX_TASK_INDEX + \"TASK_INDEX\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public static final String MESSAGE_DONE_TASK_SUCCESS \u003d \"Updated Task to \u003c\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            + UPDATED_STATUS + \"\u003e: %1$s\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public static final String MESSAGE_TASK_ALREADY_COMPLETED \u003d \"This task is already \u003c\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            + UPDATED_STATUS + \"\u003e: %1$s\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TASK \u003d \"This task already exists in the address book.\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "     * @param index of the task in the filtered task list to edit"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public DoneTaskCommand(Index index) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        List\u003cTask\u003e lastShownList \u003d model.getFilteredTasksList();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        Task taskToUpdate \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        Task updatedTask \u003d createUpdatedTask(taskToUpdate);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        if (!taskToUpdate.isSameTask(updatedTask) \u0026\u0026 model.hasTask(updatedTask)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        model.setTask(taskToUpdate, updatedTask);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        model.updateFilteredTasksList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DONE_TASK_SUCCESS, updatedTask));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "     * Creates and returns a {@code Task} with the details of {@code taskToUpdate}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "     * where TaskStatus is updated to DONE."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    private static Task createUpdatedTask(Task taskToUpdate) throws CommandException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        assert taskToUpdate !\u003d null;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        Name name \u003d taskToUpdate.getName();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        TaskStatus taskStatus \u003d taskToUpdate.getTaskStatus();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        Set\u003cTag\u003e tags \u003d taskToUpdate.getTags();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        if (taskStatus \u003d\u003d TaskStatus.DONE) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_TASK_ALREADY_COMPLETED, taskToUpdate));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        return new Task(name, TaskStatus.DONE, tags);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        if (!(other instanceof DoneTaskCommand)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        DoneTaskCommand e \u003d (DoneTaskCommand) other;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        return index.equals(e.index);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielseow": 104
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_STATUS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TASKS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.task.Name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.task.TaskStatus;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ambhinav"
        },
        "content": " * Edits the details of an existing task in the address book."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit-task\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the task identified \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            + \"by the index number used in the displayed task list. \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            + \"[\" + PREFIX_TASK_NAME + \"NAME] \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            + \"[\" + PREFIX_TASK_STATUS + \"STATUS] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            + \"[\" + PREFIX_TASK_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public static final String MESSAGE_EDIT_TASK_SUCCESS \u003d \"Edited Task: %1$s\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TASK \u003d \"This task already exists in the address book.\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    private final EditTaskDescriptor editTaskDescriptor;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * @param index of the task in the filtered task list to edit"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * @param editTaskDescriptor details to edit the task with"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public EditCommand(Index index, EditTaskDescriptor editTaskDescriptor) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        requireNonNull(editTaskDescriptor);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        this.editTaskDescriptor \u003d new EditTaskDescriptor(editTaskDescriptor);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        List\u003cTask\u003e lastShownList \u003d model.getFilteredTasksList();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        Task taskToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        Task editedTask \u003d createEditedTask(taskToEdit, editTaskDescriptor);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        if (!taskToEdit.isSameTask(editedTask) \u0026\u0026 model.hasTask(editedTask)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        model.setTask(taskToEdit, editedTask);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        model.updateFilteredTasksList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_TASK_SUCCESS, editedTask));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * Creates and returns a {@code Task} with the details of {@code taskToEdit}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * edited with {@code editTaskDescriptor}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    private static Task createEditedTask(Task taskToEdit, EditTaskDescriptor editTaskDescriptor) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assert taskToEdit !\u003d null;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        Name updatedName \u003d editTaskDescriptor.getName().orElse(taskToEdit.getName());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        TaskStatus updatedTaskStatus \u003d editTaskDescriptor.getTaskStatus().orElse(taskToEdit.getTaskStatus());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        LocalDateTime updatedDeadline \u003d editTaskDescriptor.getDeadline().orElse(taskToEdit.getDeadline());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        Instant timeStart;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        if (taskToEdit.getTaskStatus().equals(TaskStatus.UNBEGUN) \u0026\u0026 updatedTaskStatus.equals(TaskStatus.DOING)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            timeStart \u003d Instant.now();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            timeStart \u003d editTaskDescriptor.getTimeStart().orElse(taskToEdit.getTimeStart());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        Instant timeEnd;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        if (taskToEdit.getTaskStatus().equals(TaskStatus.DOING) \u0026\u0026 updatedTaskStatus.equals(TaskStatus.DONE)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            timeEnd \u003d Instant.now();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            timeEnd \u003d editTaskDescriptor.getTimeEnd().orElse(taskToEdit.getTimeEnd());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editTaskDescriptor.getTags().orElse(taskToEdit.getTags());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        Task newTask \u003d new Task(updatedName, updatedTaskStatus, updatedTags, updatedDeadline);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        newTask.setTimeStart(timeStart);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        newTask.setTimeEnd(timeEnd);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        return newTask;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                \u0026\u0026 editTaskDescriptor.equals(e.editTaskDescriptor);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * Stores the details to edit the task with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * corresponding field value of the task."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public static class EditTaskDescriptor {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        private TaskStatus taskStatus;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        private Instant timeStart;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        private Instant timeEnd;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        private LocalDateTime dateTime;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        public EditTaskDescriptor() {}"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        public EditTaskDescriptor(EditTaskDescriptor toCopy) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            setTaskStatus(toCopy.taskStatus);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            setDeadline(toCopy.dateTime);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            setTimeStart(toCopy.timeStart);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            setTimeEnd(toCopy.timeEnd);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, taskStatus, tags);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        public void setTaskStatus(TaskStatus taskStatus) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            this.taskStatus \u003d taskStatus;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        public Optional\u003cTaskStatus\u003e getTaskStatus() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            return Optional.ofNullable(taskStatus);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        public void setDeadline(LocalDateTime dateTime) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        public Optional\u003cLocalDateTime\u003e getDeadline() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            return Optional.ofNullable(dateTime);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        public void setTimeStart(Instant start) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            this.timeStart \u003d start;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        public Optional\u003cInstant\u003e getTimeStart() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            return Optional.ofNullable(timeStart);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        public void setTimeEnd(Instant end) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            this.timeEnd \u003d end;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        public Optional\u003cInstant\u003e getTimeEnd() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            return Optional.ofNullable(timeEnd);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            if (!(other instanceof EditTaskDescriptor)) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            EditTaskDescriptor e \u003d (EditTaskDescriptor) other;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                    \u0026\u0026 (getTaskStatus().equals(e.getTaskStatus()))"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags())"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                    \u0026\u0026 getDeadline().equals((e.getDeadline()));"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambhinav": 68,
      "ArunBeCoding": 2,
      "seahlynn": 30,
      "-": 152
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditInventoryCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INVENTORY_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INVENTORY_PRICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MEMBER_ID;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_INDEX;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_INVENTORIES;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import static seedu.address.logic.commands.AddInventoryCommand.MESSAGE_DUPLICATE_INVENTORY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import seedu.address.model.inventory.InvName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import seedu.address.model.inventory.Inventory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import seedu.address.model.inventory.Price;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import seedu.address.model.member.MemberId;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": " * Edits the details of an existing inventory in the Dashboard."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "public class EditInventoryCommand extends Command{"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit-inv\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the inventory identified \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            + \"by the index number used in the displayed inventory list. \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            + \"[\" + PREFIX_INVENTORY_NAME + \"NAME] \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            + \"[\" + PREFIX_INVENTORY_PRICE + \"PRICE] \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            + \"[\" + PREFIX_TASK_INDEX + \"INDEX] \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            + \"[\" + PREFIX_MEMBER_ID + \"ID] \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public static final String MESSAGE_EDIT_INVENTORY_SUCCESS \u003d \"Edited Inventory: %1$s\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_INVENTORY \u003d \"This Inventory already exists in the DashBoard.\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    private final EditInventoryCommand.EditInventoryDescriptor editInventoryDescriptor;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * @param index of the inventory in the filtered inventory list to edit"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * @param editInventoryDescriptor details to edit the task with"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public EditInventoryCommand(Index index, EditInventoryCommand.EditInventoryDescriptor editInventoryDescriptor) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        requireNonNull(editInventoryDescriptor);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        this.editInventoryDescriptor \u003d new EditInventoryCommand.EditInventoryDescriptor(editInventoryDescriptor);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        List\u003cInventory\u003e lastShownList \u003d model.getFilteredInventoriesList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_INVENTORY_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        Inventory inventoryToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        Inventory editedInventory \u003d createEditedInventory(inventoryToEdit, editInventoryDescriptor);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        if (!inventoryToEdit.isSameInventory(editedInventory) \u0026\u0026 model.hasInventory(editedInventory)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_INVENTORY);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        model.setInventory(inventoryToEdit, editedInventory);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        model.updateFilteredInventoriesList(PREDICATE_SHOW_ALL_INVENTORIES);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        //model.replaceExistingMappingsWithNewInventory(taskToEdit, editedTask);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_INVENTORY_SUCCESS, editedInventory));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * Creates and returns a {@code Task} with the details of {@code taskToEdit}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * edited with {@code editTaskDescriptor}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    private static Inventory createEditedInventory(Inventory inventoryToEdit,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                                                   EditInventoryCommand.EditInventoryDescriptor editInventoryDescriptor) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        assert inventoryToEdit !\u003d null;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        InvName updatedName \u003d editInventoryDescriptor.getName().orElse(inventoryToEdit.getName());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        Price updatedPrice \u003d editInventoryDescriptor.getPrice().orElse(inventoryToEdit.getPrice());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        return new Inventory(updatedName, updatedPrice);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        EditInventoryCommand e \u003d (EditInventoryCommand) other;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        return index.getZeroBased() \u003d\u003d (e.index.getZeroBased())"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                \u0026\u0026 editInventoryDescriptor.equals(e.editInventoryDescriptor);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * Stores the details to edit the inventory with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * corresponding field value of the inventory."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public static class EditInventoryDescriptor {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        private InvName name;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        private Price price;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        private Index taskId;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        private MemberId memId;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        public EditInventoryDescriptor() {}"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "         */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        public EditInventoryDescriptor(EditInventoryCommand.EditInventoryDescriptor toCopy) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            setPrice(toCopy.price);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            setTaskId(toCopy.taskId);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            setMemId(toCopy.memId);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "         */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, price, taskId, memId);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        public void setPrice(Price price) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            this.price \u003d price;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        public Optional\u003cPrice\u003e getPrice() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            return Optional.ofNullable(price);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        public void setName(InvName name) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        public Optional\u003cInvName\u003e getName() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        public void setTaskId(Index taskId) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            this.taskId \u003d taskId;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        public Optional\u003cIndex\u003e getTaskId() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            return Optional.ofNullable(taskId);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        public void setMemId(MemberId memId) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            this.memId \u003d memId;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        public Optional\u003cMemberId\u003e getMemberId() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            return Optional.ofNullable(memId);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            if (!(other instanceof EditInventoryCommand.EditInventoryDescriptor)) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            EditInventoryCommand.EditInventoryDescriptor e \u003d (EditInventoryCommand.EditInventoryDescriptor) other;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            return getName().get().equals(e.getName().get())"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                    \u0026\u0026 (getPrice().get().equals(e.getPrice().get()));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ArunBeCoding": 197
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditMemberCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MEMBER_ID;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MEMBER_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MEMBER_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_MEMBERS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.model.member.Member;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.model.member.MemberId;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.model.member.MemberName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seahlynn"
        },
        "content": " * Edits the details of an existing member in the project dashboard."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seahlynn"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "public class EditMemberCommand extends Command {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit-member\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the member identified \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            + \"by the id used in the displayed member list. \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            + \"Parameters: ID (must be an alphanumeric string) \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            + \"[\" + PREFIX_MEMBER_NAME + \"NAME] \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            + \"[\" + PREFIX_MEMBER_ID + \"ID] \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            + \"[\" + PREFIX_MEMBER_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public static final String MESSAGE_EDIT_MEMBER_SUCCESS \u003d \"Edited Member: %1$s\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_MEMBER \u003d \"This member already exists in the address book.\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    private final MemberId id;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    private final EditMemberDescriptor editMemberDescriptor;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     * @param id of the member in the filtered member list to edit"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     * @param editMemberDescriptor details to edit the member with"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public EditMemberCommand(MemberId id, EditMemberDescriptor editMemberDescriptor) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        requireNonNull(id);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        requireNonNull(editMemberDescriptor);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        this.editMemberDescriptor \u003d new EditMemberDescriptor(editMemberDescriptor);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        List\u003cMember\u003e lastShownList \u003d model.getFilteredMembersList();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        boolean contains \u003d false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        Member memberToEdit \u003d null;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        for (int i \u003d 0; i \u003c lastShownList.size(); i++) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            if (lastShownList.get(i).getId() \u003d\u003d id) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "                contains \u003d true;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "                memberToEdit \u003d lastShownList.get(i);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        if (!contains) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_MEMBER_ID);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        Member editedMember \u003d createEditedMember(memberToEdit, editMemberDescriptor);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        if (!memberToEdit.isSameMember(editedMember) \u0026\u0026 model.hasMember(editedMember)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_MEMBER);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        model.setMember(memberToEdit, editedMember);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        model.updateFilteredMembersList(PREDICATE_SHOW_ALL_MEMBERS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_MEMBER_SUCCESS, editedMember));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     * Creates and returns a {@code Task} with the details of {@code taskToEdit}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     * edited with {@code editTaskDescriptor}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    private static Member createEditedMember(Member memberToEdit, EditMemberDescriptor editMemberDescriptor) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        assert memberToEdit !\u003d null;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        MemberName updatedName \u003d editMemberDescriptor.getName().orElse(memberToEdit.getName());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        MemberId updatedMemberId \u003d editMemberDescriptor.getId().orElse(memberToEdit.getId());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editMemberDescriptor.getTags().orElse(memberToEdit.getTags());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        return new Member(updatedName, updatedMemberId, updatedTags);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        if (!(other instanceof EditMemberCommand)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        EditMemberCommand e \u003d (EditMemberCommand) other;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        return id.equals(e.id)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "                \u0026\u0026 editMemberDescriptor.equals(e.editMemberDescriptor);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     * Stores the details to edit the task with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     * corresponding field value of the task."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public static class EditMemberDescriptor {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        private MemberName name;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        private MemberId id;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        public EditMemberDescriptor() {}"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "         */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        public EditMemberDescriptor(EditMemberDescriptor toCopy) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            setId(toCopy.id);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "         */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, id, tags);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        public void setId(MemberId id) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            this.id \u003d id;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        public Optional\u003cMemberId\u003e getId() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            return Optional.ofNullable(id);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        public void setName(MemberName name) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        public Optional\u003cMemberName\u003e getName() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "         */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "         */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            if (!(other instanceof EditMemberDescriptor)) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            EditMemberDescriptor e \u003d (EditMemberDescriptor) other;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "                    \u0026\u0026 (getId().equals(e.getId()))"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seahlynn": 201
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExitCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Address Book as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true, false);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambhinav": 1,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.task.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Finds and lists all persons in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find-task\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose names contain any of \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        model.updateFilteredTasksList(predicate);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                String.format(Messages.MESSAGE_TASKS_LISTED_OVERVIEW, model.getFilteredTasksList().size()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambhinav": 4,
      "-": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindMemberCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.model.member.MemberNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seahlynn"
        },
        "content": " * Finds and lists all members in project dashboard book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seahlynn"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seahlynn"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "public class FindMemberCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find-member\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose names contain any of \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    private final MemberNameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public FindMemberCommand(MemberNameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        model.updateFilteredMembersList(predicate);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "                String.format(Messages.MESSAGE_MEMBERS_LISTED_OVERVIEW, model.getFilteredMembersList().size()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "                || (other instanceof FindMemberCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindMemberCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seahlynn": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/GeneratePDFCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import seedu.address.model.inventory.Inventory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import java.awt.*;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import java.io.FileOutputStream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import com.itextpdf.text.BaseColor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import com.itextpdf.text.Document;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import com.itextpdf.text.Element;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import com.itextpdf.text.Font;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import com.itextpdf.text.Font.FontFamily;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import com.itextpdf.text.PageSize;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import com.itextpdf.text.pdf.PdfPCell;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import com.itextpdf.text.pdf.PdfPTable;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import com.itextpdf.text.Phrase;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import com.itextpdf.text.DocumentException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import com.itextpdf.text.Paragraph;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import com.itextpdf.text.Rectangle;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import com.itextpdf.text.pdf.PdfWriter;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": " * returns pdf of inventories."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "public class GeneratePDFCommand extends Command {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"pdf\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Generated PDF\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        createDoc(model);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public static void createDoc(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            //Creating Doc"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            Rectangle layout \u003d new Rectangle(PageSize.A4);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            layout.setBackgroundColor(new BaseColor(51, 255, 189));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            Document document \u003d new Document(layout);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            //Document document \u003d new Document();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            document.setMargins(0, 0, 0, 0);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            PdfWriter.getInstance(document, new FileOutputStream(\"Result1.pdf\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            //Editing Doc"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            document.open();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            designDoc(model,document);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            document.close();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            //Opening Doc"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            File myFile \u003d new File(\"C:\\\\Users\\\\ArunKumarr\\\\Documents\\\\main\\\\Result1.pdf\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            Desktop.getDesktop().open(myFile);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            Logger logger \u003d LogsCenter.getLogger(GeneratePDFCommand.class);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            logger.info(\"Document not created\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    private static void designDoc(Model model, Document document) throws DocumentException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        PdfPTable header \u003d new PdfPTable(1);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        header.setWidthPercentage(100);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        Font font30pt \u003d new Font(FontFamily.HELVETICA, 30);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        font30pt.setColor(BaseColor.WHITE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        Paragraph p1 \u003d new Paragraph(\"Inventories\", font30pt);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        PdfPCell cell \u003d new PdfPCell(p1);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        cell.setFixedHeight(50);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        cell.setHorizontalAlignment(Element.ALIGN_LEFT);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        cell.setVerticalAlignment(Element.ALIGN_CENTER);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        cell.setBackgroundColor(new BaseColor(255, 87, 51));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        cell.setBorderWidth(0);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        header.addCell(cell);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        header.setSpacingAfter(10);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        PdfPTable table \u003d tableCreator(model);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        document.add(header);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        document.add(table);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    private static PdfPTable tableCreator(Model model) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        ObservableList\u003cInventory\u003elist \u003d model.getFilteredInventoriesList();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        int listSize \u003d list.size();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        double totalPrice \u003d totalPrice(list);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        Font font10pt \u003d new Font(FontFamily.HELVETICA, 14);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        PdfPTable table \u003d new PdfPTable(new float[]{1,5,5});"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        Paragraph p1 \u003d new Paragraph(\"no.\", font10pt);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        Paragraph p2 \u003d new Paragraph(\"Inventory\", font10pt);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        Paragraph p3 \u003d new Paragraph(\"Price($)\", font10pt);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        table.addCell(p1);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        table.addCell(p2);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        table.addCell(p3);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        for(int i\u003d1; i\u003c\u003dlistSize; i++) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            PdfPCell cell1 \u003d new PdfPCell(Phrase.getInstance(Integer.toString(i)));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            cell1.setBorderWidthLeft(0);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            cell1.setBorderWidthRight(0);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            table.addCell(cell1);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            //table.addCell(Integer.toString(i));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            PdfPCell cell2 \u003d new PdfPCell(Phrase.getInstance(list.get(i-1).getName().toString()));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            cell2.setBorderWidthLeft(0);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            cell2.setBorderWidthRight(0);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            table.addCell(cell2);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            //table.addCell(list.get(i-1).getName().toString());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            PdfPCell cell3 \u003d new PdfPCell(Phrase.getInstance(list.get(i-1).getPrice().toString()));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            cell3.setBorderWidthLeft(0);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            cell3.setBorderWidthRight(0);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            table.addCell(cell3);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            //table.addCell(list.get(i-1).getPrice().toString());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        PdfPCell cell \u003d new PdfPCell(new Phrase(\"Total\"));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        cell.setColspan(2);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        cell.setHorizontalAlignment(Element.ALIGN_LEFT);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        //cell.setBackgroundColor(BaseColor.DARK_GRAY);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        table.addCell(cell);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        table.addCell(Double.toString(totalPrice));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        /*PdfPCell cell \u003d new PdfPCell(new Phrase(\"Cell with colspan 3\"));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        cell.setColspan(3);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        cell.setHorizontalAlignment(Element.ALIGN_CENTER);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        table.addCell(cell);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        cell \u003d new PdfPCell(new Phrase(\"Cell with rowspan 2\"));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        cell.setRowspan(2);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        cell.setVerticalAlignment(Element.ALIGN_MIDDLE);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        table.addCell(cell);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        table.addCell(\"Cell 1.1\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        cell \u003d new PdfPCell();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        cell.addElement(new Phrase(\"Cell 1.2\"));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        table.addCell(cell);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        cell \u003d new PdfPCell(new Phrase(\"Cell 2.1\"));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        cell.setPadding(5);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        cell.setUseAscender(true);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        cell.setUseDescender(true);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        cell.setHorizontalAlignment(Element.ALIGN_CENTER);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        table.addCell(cell);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        cell \u003d new PdfPCell();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        cell.setPadding(5);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        cell.setUseAscender(true);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        cell.setUseDescender(true);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        Paragraph p \u003d new Paragraph(\"Cell 2.2\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        p.setAlignment(Element.ALIGN_CENTER);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        cell.addElement(p);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        table.addCell(cell);*/"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        return table;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    private static double totalPrice(ObservableList\u003cInventory\u003elist) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        double totalPrice \u003d 0;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        for(Inventory inv: list) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            totalPrice +\u003d inv.getPrice().getPrice();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        return totalPrice;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ArunBeCoding": 166
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/GetStatisticsCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_MAPPINGS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_MEMBERS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TASKS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.model.mapping.Mapping;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "//import seedu.address.model.mapping.UniqueMappingList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.model.member.Member;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.model.statistics.Statistics;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "public class GetStatisticsCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public static final String COMMAND_WORD_MEMBER \u003d \"get-member-stats\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public static final String COMMAND_WORD_TASK \u003d \"get-task-stats\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Calculated statistics\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        model.updateFilteredTasksList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        model.updateFilteredMembersList(PREDICATE_SHOW_ALL_MEMBERS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        model.updateFilteredMappingsList(PREDICATE_SHOW_ALL_MAPPINGS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        List\u003cTask\u003e tasks \u003d model.getFilteredTasksList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        List\u003cMember\u003e members \u003d model.getFilteredMembersList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        List\u003cMapping\u003e mappings \u003d model.getFilteredMappingsList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        Statistics stats \u003d new Statistics(members, tasks, mappings);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        model.setStatistics(stats);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        stats.doCalculations();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        /*if(!stats.equals(model.getStatistics())) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            model.setStatistics(stats);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            stats.doCalculations();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        }*/"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seahlynn": 42,
      "gabrielseow": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HelpCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false, false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambhinav": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HomeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ambhinav"
        },
        "content": " * Allows user to switch view to the dashboard."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ambhinav"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "public class HomeCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"home\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Returns to dashboard view.\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public static final String SHOWING_HOME_MESSAGE \u003d \"Back to project dashboard.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        return new CommandResult(SHOWING_HOME_MESSAGE, false, false, false);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambhinav": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TASKS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list-tasks\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all tasks\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        model.updateFilteredTasksList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambhinav": 3,
      "seahlynn": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListInventoryCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_INVENTORIES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "public class ListInventoryCommand extends Command{"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list-inv\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all inventories\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        model.updateFilteredInventoriesList(PREDICATE_SHOW_ALL_INVENTORIES);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ArunBeCoding": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListMemberByTaskCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TASKS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "public class ListMemberByTaskCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list-member-by-task\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all members by task\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        model.updateFilteredTasksList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielseow": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListMemberCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_MEMBERS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seahlynn"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seahlynn"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "public class ListMemberCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list-members\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all members\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        model.updateFilteredMembersList(PREDICATE_SHOW_ALL_MEMBERS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seahlynn": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RemoveMemberFromTaskCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MEMBER_ID;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import seedu.address.model.mapping.TasMemMapping;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.mapping.exceptions.MappingNotFoundException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.model.member.Member;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.model.member.MemberId;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "public class RemoveMemberFromTaskCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"fire-member\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Removes a member indicated \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            + \"by the index number used in the displayed task list, to the member indicated \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            + \"by the member ID. \\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            + PREFIX_TASK_INDEX + \"TASK_INDEX\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            + PREFIX_MEMBER_ID + \"MEMBER_ID \\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            + PREFIX_TASK_INDEX + \" 2 \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            + PREFIX_MEMBER_ID + \" JD\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public static final String MESSAGE_REMOVE_TASK_SUCCESS \u003d \"Removes task for member: %1$s\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public static final String MESSAGE_INVALID_TASK_ID \u003d \"This task does not exist under member.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    private final Index taskId;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    private final MemberId memberId;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     * @param taskId of the task in the filtered task list to be added to member"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     * @param memberId of the member involved"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public RemoveMemberFromTaskCommand(Index taskId, MemberId memberId) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        requireNonNull(memberId);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        this.taskId \u003d taskId;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        this.memberId \u003d memberId;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        List\u003cTask\u003e lastShownTaskList \u003d model.getFilteredTasksList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        List\u003cMember\u003e lastShownMemberList \u003d model.getFilteredMembersList();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        if (taskId.getZeroBased() \u003e\u003d lastShownTaskList.size()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        boolean contains \u003d false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        Integer memberIndex \u003d null;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        Member memberToRemove \u003d null;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        for (int i \u003d 0; i \u003c lastShownMemberList.size(); i++) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            if (lastShownMemberList.get(i).getId().equals(memberId)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "                contains \u003d true;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                memberIndex \u003d i;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "                memberToRemove \u003d lastShownMemberList.get(i);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        if (!contains) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_MEMBER_ID);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        Task involvedTask \u003d lastShownTaskList.get(taskId.getZeroBased());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        TasMemMapping mappingToRemove \u003d createMapping(taskId.getZeroBased(), memberIndex);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            model.deleteMapping(mappingToRemove);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        } catch (MappingNotFoundException e) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_TASK_ID);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_REMOVE_TASK_SUCCESS, involvedTask));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     * Creates and returns a {@code Task} with the details of {@code taskToUpdate}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     * where TaskStatus is updated to \u0027In Progress\"."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    private static TasMemMapping createMapping(int taskIndex, int memberIndex) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        return new TasMemMapping(taskIndex, memberIndex);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        if (!(other instanceof RemoveMemberFromTaskCommand)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        RemoveMemberFromTaskCommand e \u003d (RemoveMemberFromTaskCommand) other;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        return memberId.equals(e.memberId)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "                \u0026\u0026 taskId.equals(e.taskId);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambhinav": 8,
      "seahlynn": 99,
      "gabrielseow": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RemoveTaskFromMemberCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MEMBER_ID;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import seedu.address.model.mapping.TasMemMapping;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.mapping.exceptions.MappingNotFoundException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.model.member.Member;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.model.member.MemberId;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seahlynn"
        },
        "content": " * Removes a task that member was responsible for"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seahlynn"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "public class RemoveTaskFromMemberCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"fire-task\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Removes a task indicated \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            + \"by the index number used in the displayed task list, to the member indicated \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            + \"by the member ID. \\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            + PREFIX_TASK_INDEX + \"TASK_INDEX\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            + PREFIX_MEMBER_ID + \"MEMBER_ID \\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            + PREFIX_TASK_INDEX + \" 2 \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            + PREFIX_MEMBER_ID + \" JD\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public static final String MESSAGE_REMOVE_TASK_SUCCESS \u003d \"Removes task for member: %1$s\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public static final String MESSAGE_INVALID_TASK_ID \u003d \"This task does not exist under member.\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    private final Index taskId;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    private final MemberId memberId;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     * @param taskId of the task in the filtered task list to be added to member"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     * @param memberId of the member involved"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public RemoveTaskFromMemberCommand(Index taskId, MemberId memberId) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        requireNonNull(memberId);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        this.taskId \u003d taskId;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        this.memberId \u003d memberId;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        List\u003cTask\u003e lastShownTaskList \u003d model.getFilteredTasksList();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        List\u003cMember\u003e lastShownMemberList \u003d model.getFilteredMembersList();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        if (taskId.getZeroBased() \u003e\u003d lastShownTaskList.size()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        boolean contains \u003d false;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        Integer memberIndex \u003d null;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        Member involvedMember \u003d null;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        for (int i \u003d 0; i \u003c lastShownMemberList.size(); i++) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            if (lastShownMemberList.get(i).getId().equals(memberId)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "                contains \u003d true;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                memberIndex \u003d i;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "                involvedMember \u003d lastShownMemberList.get(i);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        if (!contains) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_MEMBER_ID);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        TasMemMapping mappingToRemove \u003d createMapping(taskId.getZeroBased(), memberIndex);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            model.deleteMapping(mappingToRemove);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        } catch (MappingNotFoundException e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_TASK_ID);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_REMOVE_TASK_SUCCESS, involvedMember));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     * Creates and returns a {@code Task} with the details of {@code taskToUpdate}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     * where TaskStatus is updated to \u0027In Progress\"."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    private static TasMemMapping createMapping(int taskIndex, int memberIndex) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        return new TasMemMapping(taskIndex, memberIndex);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        if (!(other instanceof RemoveTaskFromMemberCommand)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        RemoveTaskFromMemberCommand e \u003d (RemoveTaskFromMemberCommand) other;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        return memberId.equals(e.memberId)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "                \u0026\u0026 taskId.equals(e.taskId);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambhinav": 6,
      "seahlynn": 101,
      "gabrielseow": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SetDeadlineCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DEADLINE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TASKS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.commons.util.DateTimeUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import seedu.address.model.task.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import seedu.address.model.task.TaskStatus;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": " * Edits the details of an existing task in the address book."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "public class SetDeadlineCommand extends Command {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"set-deadline\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Sets a deadline for a task \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            + \"by the index number used in the displayed task list.\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            + PREFIX_TASK_INDEX + \"TASK_INDEX\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            + PREFIX_DEADLINE + DateTimeUtil.DEFAULT_INPUT_FORMAT + \"\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            + PREFIX_TASK_INDEX + \" 2 \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            + PREFIX_DEADLINE + \" 10/10/2019 18:00\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public static final String MESSAGE_SET_DEADLINE_TASK_SUCCESS \u003d \"Set a deadline for the Task: %1$s\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TASK \u003d \"This task already exists in +Work.\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    //Create an alert box when task already has a deadline"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public static final String MESSAGE_TASK_ALREADY_HAS_DEADLINE \u003d \"This task already has a deadline\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    private final LocalDateTime dateTime;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "     * @param index of the task in the filtered task list to edit"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     * @param dateTime deadline of the task"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public SetDeadlineCommand(Index index, LocalDateTime dateTime) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        requireNonNull(dateTime);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        List\u003cTask\u003e lastShownList \u003d model.getFilteredTasksList();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        Task taskToUpdate \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        Task updatedTask \u003d createUpdatedTask(taskToUpdate, dateTime);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        if (!taskToUpdate.isSameTask(updatedTask) \u0026\u0026 model.hasTask(updatedTask)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        model.setTask(taskToUpdate, updatedTask);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        model.updateFilteredTasksList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SET_DEADLINE_TASK_SUCCESS, updatedTask));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "     * Creates and returns a {@code Task} with the details of {@code taskToUpdate}"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "     * where TaskStatus is updated to \u0027In Progress\"."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    private static Task createUpdatedTask(Task taskToUpdate, LocalDateTime dateTime) throws CommandException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        assert taskToUpdate !\u003d null;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        Name name \u003d taskToUpdate.getName();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        TaskStatus taskStatus \u003d taskToUpdate.getTaskStatus();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        Set\u003cTag\u003e tags \u003d taskToUpdate.getTags();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        Task updatedTask \u003d new Task(name, TaskStatus.DOING, tags);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        updatedTask.setDeadline(dateTime);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        return updatedTask;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        if (!(other instanceof SetDeadlineCommand)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        SetDeadlineCommand e \u003d (SetDeadlineCommand) other;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                \u0026\u0026 dateTime.equals(e.dateTime);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambhinav": 3,
      "seahlynn": 2,
      "gabrielseow": 107
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SettingsCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ambhinav"
        },
        "content": " * Allows user to view the settings panel."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ambhinav"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "public class SettingsCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"settings\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Returns to settings view.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public static final String SHOWING_SETTINGS_MESSAGE \u003d \"Back to settings panel.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        return new CommandResult(SHOWING_SETTINGS_MESSAGE, false, false, false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambhinav": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ThemeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.settings.Theme;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ambhinav"
        },
        "content": " * Allows user to set the theme of +Work."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ambhinav"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "public class ThemeCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"theme\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Toggles theme between light or dark.\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            + \"Parameters: [light/dark]\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" light\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    private final Theme theme;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public ThemeCommand(Theme theme) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        this.theme \u003d theme;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        model.setCurrentTheme(this.theme);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        return new CommandResult(\"Theme now set to: \" + theme, false, false, true);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambhinav": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddInventoryCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INVENTORY_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INVENTORY_PRICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MEMBER_ID;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_INDEX;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import seedu.address.logic.commands.AddInventoryCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import seedu.address.model.inventory.InvName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import seedu.address.model.inventory.Price;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import seedu.address.model.member.MemberId;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": " * Parses the given {@code String} of arguments in the context of the AddInventoryCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": " * and returns an AddInventoryCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": " * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "public class AddInventoryCommandParser implements Parser\u003cAddInventoryCommand\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public AddInventoryCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_INVENTORY_NAME,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                        PREFIX_INVENTORY_PRICE, PREFIX_TASK_INDEX, PREFIX_MEMBER_ID);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        //parse inventory name"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_INVENTORY_NAME)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddInventoryCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        InvName name \u003d ParserUtil.parseInvName(argMultimap.getValue(PREFIX_INVENTORY_NAME).get());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        //parse taskID"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_TASK_INDEX)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddInventoryCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        Index taskId \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_TASK_INDEX).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        //parse MemberId"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_MEMBER_ID)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddInventoryCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        MemberId memId \u003d ParserUtil.parseMemberId(argMultimap.getValue(PREFIX_MEMBER_ID).get());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        //parse price"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        if (argMultimap.getValue(PREFIX_INVENTORY_PRICE).isPresent()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            Price price \u003d ParserUtil.parsePrice((argMultimap.getValue(PREFIX_INVENTORY_PRICE).get()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            return new AddInventoryCommand(taskId, name, price, memId);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            return new AddInventoryCommand(taskId, name, memId);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ArunBeCoding": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddMemberCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MEMBER_ID;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MEMBER_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MEMBER_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.logic.commands.AddMemberCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.model.member.Member;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.model.member.MemberId;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.model.member.MemberName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seahlynn"
        },
        "content": " * Parses input arguments and creates a new AddMemberCommand object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seahlynn"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "public class AddMemberCommandParser implements Parser\u003cAddMemberCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public AddMemberCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_MEMBER_NAME, PREFIX_MEMBER_ID,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "                        PREFIX_MEMBER_TAG);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_MEMBER_NAME, PREFIX_MEMBER_ID)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddMemberCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        MemberName name \u003d ParserUtil.parseMemberName(argMultimap.getValue(PREFIX_MEMBER_NAME).get());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        MemberId id \u003d ParserUtil.parseMemberId(argMultimap.getValue(PREFIX_MEMBER_ID).get());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_MEMBER_TAG));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        Member member \u003d new Member(name, id, tagList);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        return new AddMemberCommand(member);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seahlynn": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddMemberToTaskParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MEMBER_ID;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.logic.commands.AddMemberToTaskCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.model.member.MemberId;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seahlynn"
        },
        "content": " * Parses input arguments and creates a new AddMemberToTask parser object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seahlynn"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "public class AddMemberToTaskParser implements Parser\u003cAddMemberToTaskCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteMemberCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     * and returns a DeleteMemberCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public AddMemberToTaskCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TASK_INDEX, PREFIX_MEMBER_ID);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_TASK_INDEX, PREFIX_MEMBER_ID)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                    AddMemberToTaskCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        MemberId id \u003d ParserUtil.parseMemberId(argMultimap.getValue(PREFIX_MEMBER_ID).get());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        Index index \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_TASK_INDEX).get());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        return new AddMemberToTaskCommand(index, id);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambhinav": 23,
      "seahlynn": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddTaskCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MEMBER_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_STATUS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import seedu.address.logic.commands.AddTaskCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.task.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.task.TaskStatus;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "public class AddTaskCommandParser implements Parser\u003cAddTaskCommand\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public AddTaskCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TASK_NAME, PREFIX_TASK_STATUS,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                        PREFIX_TASK_TAG);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_TASK_NAME) || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddTaskCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_TASK_NAME).get());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        TaskStatus taskStatus \u003d TaskStatus.UNBEGUN;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TASK_STATUS).isPresent()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            taskStatus \u003d ParserUtil.parseStatus((argMultimap.getValue(PREFIX_TASK_STATUS).get()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TASK_TAG));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        Task task \u003d new Task(name, taskStatus, tagList);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        return new AddTaskCommand(task);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambhinav": 17,
      "seahlynn": 1,
      "-": 34,
      "gabrielseow": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddTaskToMemberParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MEMBER_ID;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MEMBER_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_STATUS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.logic.commands.AddTaskCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.logic.commands.AddTaskToMemberCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.model.member.MemberId;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.model.task.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seahlynn"
        },
        "content": " * Parses input arguments and creates a new AddTaskToMember parser object"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seahlynn"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "public class AddTaskToMemberParser implements Parser\u003cAddTaskToMemberCommand\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteMemberCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     * and returns a DeleteMemberCommand object for execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public AddTaskToMemberCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TASK_INDEX, PREFIX_MEMBER_ID);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_TASK_INDEX, PREFIX_MEMBER_ID)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                AddTaskToMemberCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        MemberId id \u003d ParserUtil.parseMemberId(argMultimap.getValue(PREFIX_MEMBER_ID).get());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        Index index \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_TASK_INDEX).get());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        return new AddTaskToMemberCommand(index, id);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambhinav": 2,
      "seahlynn": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    /* Prefix definitions for task */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public static final Prefix PREFIX_TASK_NAME \u003d new Prefix(\"tn/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public static final Prefix PREFIX_TASK_INDEX \u003d new Prefix(\"ti/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public static final Prefix PREFIX_TASK_STATUS \u003d new Prefix(\"s/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public static final Prefix PREFIX_TASK_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public static final Prefix PREFIX_DEADLINE \u003d new Prefix(\"at/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    /* Prefix definitions for Member */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public static final Prefix PREFIX_MEMBER_NAME \u003d new Prefix(\"mn/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public static final Prefix PREFIX_MEMBER_ID \u003d new Prefix(\"mi/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public static final Prefix PREFIX_MEMBER_TAG \u003d new Prefix(\"mt/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /*Prefix definitions for inventory*/"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public static final Prefix PREFIX_INVENTORY_NAME \u003d new Prefix(\"i/\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public static final Prefix PREFIX_INVENTORY_PRICE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public static final Prefix PREFIX_INVENTORY_INDEX \u003d new Prefix(\"ii/\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambhinav": 4,
      "ArunBeCoding": 4,
      "seahlynn": 5,
      "-": 10,
      "gabrielseow": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ClockCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.logic.commands.ClockCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.settings.ClockFormat;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ambhinav"
        },
        "content": " * Parses input arguments and creates a new ClockCommand parser object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ambhinav"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "public class ClockCommandParser implements Parser\u003cClockCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * @param userInput"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public ClockCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        ClockFormat clockFormat;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            clockFormat \u003d ParserUtil.parseClock(userInput);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            return new ClockCommand(clockFormat);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ClockCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambhinav": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteInventoryCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import seedu.address.logic.commands.DeleteInventoryCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": " * Parses input arguments and creates a new DeleteInventoryCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "public class DeleteInventoryCommandParser implements Parser\u003cDeleteInventoryCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteInventoryCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * and returns a DeleteInventoryCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public DeleteInventoryCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            return new DeleteInventoryCommand(index);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteInventoryCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ArunBeCoding": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteMemberCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.logic.commands.DeleteMemberCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.model.member.MemberId;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seahlynn"
        },
        "content": " * Parses input arguments and creates a new DeleteMemberCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seahlynn"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "public class DeleteMemberCommandParser implements Parser\u003cDeleteMemberCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteMemberCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     * and returns a DeleteMemberCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public DeleteMemberCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            MemberId id \u003d ParserUtil.parseMemberId(args);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            return new DeleteMemberCommand(id);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteMemberCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seahlynn": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteTaskCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import seedu.address.logic.commands.DeleteTaskCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "public class DeleteTaskCommandParser implements Parser\u003cDeleteTaskCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public DeleteTaskCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            return new DeleteTaskCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteTaskCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 24,
      "gabrielseow": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DoingTaskCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "/*import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import java.util.Set;*/"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import seedu.address.logic.commands.DoingTaskCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "//import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "public class DoingTaskCommandParser implements Parser\u003cDoingTaskCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public DoingTaskCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            return new DoingTaskCommand(index);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DoingTaskCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seahlynn": 3,
      "gabrielseow": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DoneTaskCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "import seedu.address.logic.commands.DoneTaskCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ambhinav"
        },
        "content": " * Parses input arguments and creates a new DoneTaskCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "elsakoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "public class DoneTaskCommandParser implements Parser\u003cDoneTaskCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DoneTask"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "     * and returns a DoneTask object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    public DoneTaskCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "            return new DoneTaskCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DoneTaskCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambhinav": 1,
      "elsakoh": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DEADLINE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_STATUS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.commons.util.DateTimeUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TASK_NAME, PREFIX_TASK_STATUS, PREFIX_TASK_TAG,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                        PREFIX_DEADLINE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        EditCommand.EditTaskDescriptor editTaskDescriptor \u003d new EditCommand.EditTaskDescriptor();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TASK_NAME).isPresent()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            editTaskDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_TASK_NAME).get()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TASK_STATUS).isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            editTaskDescriptor.setTaskStatus(ParserUtil.parseStatus((argMultimap.getValue(PREFIX_TASK_STATUS).get())));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DEADLINE).isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            editTaskDescriptor.setDeadline(DateTimeUtil.parseDateTime((argMultimap.getValue(PREFIX_DEADLINE).get())));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TASK_TAG)).ifPresent(editTaskDescriptor::setTags);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        if (!editTaskDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        return new EditCommand(index, editTaskDescriptor);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambhinav": 17,
      "-": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditInventoryCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INVENTORY_PRICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INVENTORY_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MEMBER_ID;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_INDEX;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import seedu.address.logic.commands.EditInventoryCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": " * Parses input arguments and creates a new EditInventoryCommand object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "public class EditInventoryCommandParser implements Parser\u003cEditInventoryCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditInventoryCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * and returns an EditInventoryCommand object for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public EditInventoryCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_INVENTORY_NAME, PREFIX_INVENTORY_PRICE,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                                                PREFIX_TASK_INDEX, PREFIX_MEMBER_ID);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                                                        EditInventoryCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        EditInventoryCommand.EditInventoryDescriptor editInventoryDescriptor \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                                                new EditInventoryCommand.EditInventoryDescriptor();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        if (argMultimap.getValue(PREFIX_INVENTORY_NAME).isPresent()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            editInventoryDescriptor"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                    .setName(ParserUtil.parseInvName(argMultimap.getValue(PREFIX_INVENTORY_NAME).get()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        if (argMultimap.getValue(PREFIX_INVENTORY_PRICE).isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            editInventoryDescriptor"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                    .setPrice(ParserUtil.parsePrice((argMultimap.getValue(PREFIX_INVENTORY_PRICE).get())));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TASK_INDEX).isPresent()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            editInventoryDescriptor"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                    .setTaskId(ParserUtil.parseIndex((argMultimap.getValue(PREFIX_TASK_INDEX).get())));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        if (argMultimap.getValue(PREFIX_MEMBER_ID).isPresent()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            editInventoryDescriptor"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                    .setMemId(ParserUtil.parseMemberId((argMultimap.getValue(PREFIX_MEMBER_ID).get())));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        if (!editInventoryDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            throw new ParseException(EditInventoryCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        return new EditInventoryCommand(index, editInventoryDescriptor);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ArunBeCoding": 70
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditMemberCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MEMBER_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MEMBER_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.logic.commands.EditMemberCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.model.member.MemberId;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seahlynn"
        },
        "content": " * Parses input arguments and creates a new EditMemberCommand object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seahlynn"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "public class EditMemberCommandParser implements Parser\u003cEditMemberCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public EditMemberCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_MEMBER_NAME, PREFIX_MEMBER_TAG);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        MemberId id;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            id \u003d ParserUtil.parseMemberId(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "                    EditMemberCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        EditMemberCommand.EditMemberDescriptor editMemberDescriptor \u003d new EditMemberCommand.EditMemberDescriptor();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        if (argMultimap.getValue(PREFIX_MEMBER_NAME).isPresent()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            editMemberDescriptor.setName(ParserUtil.parseMemberName(argMultimap.getValue(PREFIX_MEMBER_NAME).get()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_MEMBER_TAG)).ifPresent(editMemberDescriptor::setTags);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        if (!editMemberDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            throw new ParseException(EditMemberCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        return new EditMemberCommand(id, editMemberDescriptor);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seahlynn": 69
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.task.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambhinav": 1,
      "-": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindMemberCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.logic.commands.FindMemberCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.model.member.MemberNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seahlynn"
        },
        "content": " * Parses input arguments and creates a new FindMemberCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seahlynn"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "public class FindMemberCommandParser implements Parser\u003cFindMemberCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public FindMemberCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindMemberCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        return new FindMemberCommand(new MemberNameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seahlynn": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import seedu.address.model.inventory.InvName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import seedu.address.model.inventory.Price;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.model.member.MemberId;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.model.member.MemberName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.settings.ClockFormat;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.settings.Theme;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.task.Name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.task.TaskStatus;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        if (!Name.isValidMemberName(trimmedName)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "     * Parses a {@code String invname} into a {@code InvName}. Leading and trailing"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "     * whitespaces will be trimmed."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public static InvName parseInvName(String invname) throws ParseException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        requireNonNull(invname);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        String trimmedName \u003d invname.trim();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        if (!InvName.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            throw new ParseException(InvName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        return new InvName(trimmedName);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * Parses {@code price} into an {@code Price} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public static Price parsePrice(String price) throws ParseException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        String trimmedIndex \u003d price.trim();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        if (!StringUtil.isPositiveDouble(trimmedIndex)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        return new Price(Double.parseDouble(trimmedIndex));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * Parses a {@code String taskStatus} into a {@code TaskStatus}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public static TaskStatus parseStatus(String status) throws ParseException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        requireNonNull(status);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        String trimmedAndUpperCaseStatus \u003d status.trim().toUpperCase();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        TaskStatus taskStatus;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            taskStatus \u003d TaskStatus.valueOf(trimmedAndUpperCaseStatus);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            throw new ParseException(TaskStatus.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        return taskStatus;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    //MEMBER RELATED"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public static MemberName parseMemberName(String name) throws ParseException {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "        if (!MemberName.isValidMemberName(trimmedName)) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        return new MemberName(trimmedName);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public static MemberId parseMemberId(String memberId) throws ParseException {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        requireNonNull(memberId);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        String trimmedId \u003d memberId.trim();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        if (!MemberId.isValidId(trimmedId)) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        return new MemberId(trimmedId);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * Parses {@code dateTime} into an {@code LocalDateTime} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "     * @throws DateTimeParseException if the input string is not in the valid format."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    public static LocalDateTime parseDate(String dateTime) throws DateTimeParseException {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "        requireNonNull(dateTime);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "        String trimmedDate \u003d dateTime.trim();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "elsakoh"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-d HH:mm\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "        return LocalDateTime.parse(trimmedDate, formatter);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * Parses {@code theme} into a {@code Theme} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * @throws ParseException if the given {@code theme}\u0027s code is invalid."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public static Theme parseTheme(String theme) throws ParseException {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        requireNonNull(theme);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        String trimmedAndUpperCaseTheme \u003d theme.trim().toUpperCase();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        Theme appTheme;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            appTheme \u003d Theme.valueOf(trimmedAndUpperCaseTheme);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            throw new ParseException(Theme.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        return appTheme;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * Parses {@code clock} into a {@code ClockFormat} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * @throws ParseException if the given {@code clock}\u0027s format is invalid."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public static ClockFormat parseClock(String clock) throws ParseException {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        requireNonNull(clock);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        String trimmedAndUpperCaseClock \u003d clock.trim().toUpperCase();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        ClockFormat clockFormat;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            clockFormat \u003d ClockFormat.valueOf(trimmedAndUpperCaseClock);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            throw new ParseException(ClockFormat.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        return clockFormat;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambhinav": 58,
      "ArunBeCoding": 17,
      "seahlynn": 35,
      "elsakoh": 17,
      "-": 91
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ProjectDashboardParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import seedu.address.logic.commands.AddInventoryCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.logic.commands.AddMemberCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.logic.commands.AddMemberToTaskCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import seedu.address.logic.commands.AddTaskCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.logic.commands.AddTaskToMemberCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.logic.commands.ClockCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import seedu.address.logic.commands.DeleteInventoryCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.logic.commands.DeleteMemberCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import seedu.address.logic.commands.DeleteTaskCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import seedu.address.logic.commands.DoingTaskCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import seedu.address.logic.commands.DoneTaskCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import seedu.address.logic.commands.EditInventoryCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.logic.commands.EditMemberCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.logic.commands.FindMemberCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import seedu.address.logic.commands.GeneratePDFCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.logic.commands.GetStatisticsCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.logic.commands.HomeCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import seedu.address.logic.commands.ListInventoryCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.logic.commands.ListMemberCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.logic.commands.RemoveMemberFromTaskCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.logic.commands.RemoveTaskFromMemberCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.logic.commands.SetDeadlineCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.logic.commands.SettingsCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.logic.commands.ThemeCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "public class ProjectDashboardParser {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        // TASK"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        case AddTaskCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            return new AddTaskCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        case DeleteTaskCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            return new DeleteTaskCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        case DoingTaskCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            return new DoingTaskCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        case SetDeadlineCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            return new SetDeadlineCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        case DoneTaskCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            return new DoneTaskCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        // MEMBER"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        case AddMemberCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            return new AddMemberCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        case DeleteMemberCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            return new DeleteMemberCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        case EditMemberCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            return new EditMemberCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        case FindMemberCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            return new FindMemberCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        case ListMemberCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            return new ListMemberCommand();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        // ASSOCIATION"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        case AddTaskToMemberCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            return new AddTaskToMemberParser().parse(arguments);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        case AddMemberToTaskCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            return new AddMemberToTaskParser().parse(arguments);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        case RemoveTaskFromMemberCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            return new RemoveTaskFromMemberParser().parse(arguments);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        case RemoveMemberFromTaskCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            return new RemoveMemberFromTaskParser().parse(arguments);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        // INVENTORY"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        case ListInventoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            return new ListInventoryCommand();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        case AddInventoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            return new AddInventoryCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        case EditInventoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            return new EditInventoryCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        case DeleteInventoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            return new DeleteInventoryCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        case GeneratePDFCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            return new GeneratePDFCommand();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        // STATS"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        case GetStatisticsCommand.COMMAND_WORD_MEMBER:"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            return new GetStatisticsCommand();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        case GetStatisticsCommand.COMMAND_WORD_TASK:"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            return new GetStatisticsCommand();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        // SETTINGS"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        case ThemeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            return new ThemeCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        case ClockCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            return new ClockCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        // UNIVERSAL"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        case SettingsCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            return new SettingsCommand();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        case HomeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            return new HomeCommand();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambhinav": 61,
      "ArunBeCoding": 16,
      "seahlynn": 37,
      "-": 46,
      "gabrielseow": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/RemoveMemberFromTaskParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MEMBER_ID;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.logic.commands.AddMemberToTaskCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.logic.commands.RemoveMemberFromTaskCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.logic.commands.RemoveTaskFromMemberCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.model.member.MemberId;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seahlynn"
        },
        "content": " * Parses input arguments and creates a new RemoveMemberFromTask parser object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seahlynn"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "public class RemoveMemberFromTaskParser implements Parser\u003cRemoveMemberFromTaskCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteMemberCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     * and returns a DeleteMemberCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public RemoveMemberFromTaskCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TASK_INDEX, PREFIX_MEMBER_ID);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_TASK_INDEX, PREFIX_MEMBER_ID)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                    RemoveMemberFromTaskCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        MemberId id \u003d ParserUtil.parseMemberId(argMultimap.getValue(PREFIX_MEMBER_ID).get());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        Index index \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_TASK_INDEX).get());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        return new RemoveMemberFromTaskCommand(index, id);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambhinav": 24,
      "seahlynn": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/RemoveTaskFromMemberParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MEMBER_ID;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.logic.commands.AddMemberToTaskCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.logic.commands.RemoveTaskFromMemberCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.model.member.MemberId;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seahlynn"
        },
        "content": " * Parses input arguments and creates a new RemoveTaskFromMember parser object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seahlynn"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "public class RemoveTaskFromMemberParser implements Parser\u003cRemoveTaskFromMemberCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteMemberCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     * and returns a DeleteMemberCommand object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public RemoveTaskFromMemberCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TASK_INDEX, PREFIX_MEMBER_ID);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_TASK_INDEX, PREFIX_MEMBER_ID)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                    RemoveTaskFromMemberCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        MemberId id \u003d ParserUtil.parseMemberId(argMultimap.getValue(PREFIX_MEMBER_ID).get());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        Index index \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_TASK_INDEX).get());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        return new RemoveTaskFromMemberCommand(index, id);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambhinav": 23,
      "seahlynn": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SetDeadlineCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.commons.util.DateTimeUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.logic.commands.SetDeadlineCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DEADLINE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_INDEX;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ambhinav"
        },
        "content": " * Parses input arguments and creates a new SetDeadlineCommand object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ambhinav"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "public class SetDeadlineCommandParser implements Parser\u003cSetDeadlineCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SetDeadlineCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * and returns an SetDeadlineCommand object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public SetDeadlineCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TASK_INDEX, PREFIX_DEADLINE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_TASK_INDEX, PREFIX_DEADLINE)) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            System.out.println(\"Prefixes not present!\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SetDeadlineCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        LocalDateTime dateTime;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_TASK_INDEX).get());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            dateTime \u003d DateTimeUtil.parseDateTime(argMultimap.getValue(PREFIX_DEADLINE).get());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            System.out.println(\"Index or invalid date time not present!\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SetDeadlineCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        return new SetDeadlineCommand(index, dateTime);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ambhinav": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ThemeCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.logic.commands.ThemeCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.settings.Theme;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ambhinav"
        },
        "content": " * Parses input arguments and creates a new ThemeCommand parser object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ambhinav"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "public class ThemeCommandParser implements Parser\u003cThemeCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * @param userInput"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public ThemeCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        Theme newTheme;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            newTheme \u003d ParserUtil.parseTheme(userInput);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            return new ThemeCommand(newTheme);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ThemeCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambhinav": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/stub/AddTaskCommandParserStub.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "package seedu.address.logic.parser.stub;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "/*import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_STATUS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_TAG;*/"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "//import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import seedu.address.logic.commands.AddTaskCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import seedu.address.model.task.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import seedu.address.model.task.TaskStatus;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seahlynn"
        },
        "content": " * Parses input arguments and creates a new AddTaskCommand object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seahlynn"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "public class AddTaskCommandParserStub implements Parser\u003cAddTaskCommand\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public AddTaskCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        Name taskStubName \u003d new Name(\"finish homework \");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        Task task \u003d new Task(taskStubName, TaskStatus.UNBEGUN, new HashSet\u003cTag\u003e());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        return new AddTaskCommand(task);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ArunBeCoding": 1,
      "seahlynn": 11,
      "gabrielseow": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/stub/DoneTaskCommandParserStub.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "package seedu.address.logic.parser.stub;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import seedu.address.logic.commands.DoneTaskCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "public class DoneTaskCommandParserStub implements Parser\u003cDoneTaskCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public DoneTaskCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        Index stubIndex1 \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        return new DoneTaskCommand(stubIndex1);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seahlynn": 1,
      "gabrielseow": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/stub/SetDeadlineCommandParserStub.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "package seedu.address.logic.parser.stub;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.commons.util.DateTimeUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import seedu.address.logic.commands.SetDeadlineCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "public class SetDeadlineCommandParserStub implements Parser\u003cSetDeadlineCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    private static int count \u003d 1;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public SetDeadlineCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        Index stubIndex1 \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        LocalDateTime stubDateTime;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        LocalDateTime stubDateTime0;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        LocalDateTime stubDateTime1;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        LocalDateTime stubDateTime2;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            stubDateTime0 \u003d DateTimeUtil.parseDateTime(\"15/12/201  13:00\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            stubDateTime1 \u003d DateTimeUtil.parseDateTime(\"10/10/201  18:00\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            stubDateTime2 \u003d DateTimeUtil.parseDateTime(\"20/10/201  18:00\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SetDeadlineCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        switch (count % 3) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        case 0:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            stubDateTime \u003d stubDateTime0;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        case 1:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            stubDateTime \u003d stubDateTime1;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        case 2:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            stubDateTime \u003d stubDateTime2;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            stubDateTime \u003d null;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        count++;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        return new SetDeadlineCommand(stubIndex1, stubDateTime);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambhinav": 15,
      "ArunBeCoding": 2,
      "seahlynn": 2,
      "gabrielseow": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import seedu.address.model.inventory.Inventory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import seedu.address.model.member.Member;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import seedu.address.model.member.MemberId;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.settings.ClockFormat;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.settings.Theme;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.model.statistics.Statistics;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import seedu.address.model.mapping.InvMemMapping;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import seedu.address.model.mapping.InvTasMapping;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import seedu.address.model.mapping.TasMemMapping;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import seedu.address.model.mapping.Mapping;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    Predicate\u003cTask\u003e PREDICATE_SHOW_ALL_TASKS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    Predicate\u003cMember\u003e PREDICATE_SHOW_ALL_MEMBERS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    Predicate\u003cInventory\u003e PREDICATE_SHOW_ALL_INVENTORIES \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    Predicate\u003cMapping\u003e PREDICATE_SHOW_ALL_MAPPINGS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * Returns the user prefs\u0027 project dashboard file path."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    Path getProjectDashboardFilePath();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * Sets the user prefs\u0027 project dashboard file path."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    void setProjectDashboardFilePath(Path projectDashboardFilePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * Replaces address book data with the data in {@code projectDashboard}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    void setProjectDashboard(ReadOnlyProjectDashboard projectDashboard);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    /** Returns the ProjectDashboard */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    ReadOnlyProjectDashboard getProjectDashboard();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    /// Task"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * Returns true if a task with the same identity as {@code task} exists in the address book."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    boolean hasTask(Task task);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * Deletes the given task."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * The task must exist in the address book."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    void deleteTask(Task target);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * Adds the given task."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * {@code task} must not already exist in the address book."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    void addTask(Task task);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * Replaces the given task {@code target} with {@code editedTask}."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * The task identity of {@code editedTask} must not be the same as another existing task in the address book."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    void setTask(Task target, Task editedTask);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    /** Returns an unmodifiable view of the filtered task list */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    ObservableList\u003cTask\u003e getFilteredTaskListByDeadline();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    /** Returns an unmodifiable view of the filtered task list */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    ObservableList\u003cTask\u003e getFilteredTaskListNotStarted();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    /** Returns an unmodifiable view of the filtered task list */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    ObservableList\u003cTask\u003e getFilteredTaskListDoing();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    /** Returns an unmodifiable view of the filtered task list */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    ObservableList\u003cTask\u003e getFilteredTaskListDone();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    /** Returns an unmodifiable view of the filtered task list */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    ObservableList\u003cTask\u003e getFilteredTasksList();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * Updates the filter of the filtered task list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    void updateFilteredTasksList(Predicate\u003cTask\u003e predicate);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    /// Member"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     * Returns true if a member with the same identity as {@code member} exists in the address book."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    boolean hasMember(Member member);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * Returns true if a member with the same identity as {@code memberId} exists in the dashboard."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    boolean hasMemberId(MemberId memId);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     * Deletes the given member."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     * The member must exist in the address book."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    void deleteMember(Member member);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     * Adds the given member."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     * {@code member} must not already exist in the address book."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    void addMember(Member member);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     * Replaces the given task {@code target} with {@code editedMember}."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     * The member identity of {@code editedMember} must not be the same as another existing task in the address book."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    void setMember(Member target, Member editedMember);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * returns length of filteredMembers"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    int getMembersLength();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    /** Returns an unmodifiable view of the filtered member list */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    ObservableList\u003cMember\u003e getFilteredMembersList();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     * Updates the filter of the filtered task list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    void updateFilteredMembersList(Predicate\u003cMember\u003e predicate);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * returns length of filteredList"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    int getTasksLength();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    /// Inventory"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /** Returns an unmodifiable view of the filtered task list */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    ObservableList\u003cInventory\u003e getFilteredInventoriesList();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * Updates the filter of the filtered inventories list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    void updateFilteredInventoriesList(Predicate\u003cInventory\u003e predicate);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * Adds the given inventory."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * {@code inventory} must not already exist in the address book."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    void addInventory(Inventory inventory);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * Returns true if a inventory with the same identity as {@code inventory} exists in the address book."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    boolean hasInventory(Inventory inventory);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * Deletes the given inventory."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * The inventory must exist in the address book."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    void deleteInventory(Inventory target);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    // Mapping"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * Replaces the given task {@code target} with {@code editedInventory}."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * The task identity of {@code editedInventory} must not be the same as another existing inventory in the dashboard."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    void setInventory(Inventory target, Inventory editedInventory);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    void addMapping(InvMemMapping mapping);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    void addMapping(InvTasMapping mapping);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    void addMapping(TasMemMapping mapping);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    void deleteMapping(InvMemMapping mapping);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    void deleteMapping(InvTasMapping mapping);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    void deleteMapping(TasMemMapping mapping);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    boolean hasMapping(InvMemMapping mapping);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    boolean hasMapping(InvTasMapping mapping);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    boolean hasMapping(TasMemMapping mapping);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    ObservableList\u003cMapping\u003e getFilteredMappingsList();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    void updateFilteredMappingsList(Predicate\u003cMapping\u003e predicate);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    Statistics getStatistics();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    void setStatistics(Statistics newStats);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    // Settings"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * Returns the user settings of +Work."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    UserSettings getUserSettings();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * Returns the user settings file path."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    Path getUserSettingsFilePath();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * Returns the current theme of +Work."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * @return the current theme"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    Theme getCurrentTheme();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * Replaces the theme of +Work with {@code newTheme}."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * @param newTheme the theme to replace with"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    void setCurrentTheme(Theme newTheme);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * Returns the current clock format of +Work."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * @return the current clock format"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    ClockFormat getCurrentClockFormat();"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * Replaces the clock format of +Work with {@code newClockFormat}."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * @param newClockFormat the format to replace with"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    void setClockFormat(ClockFormat newClockFormat);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambhinav": 81,
      "ArunBeCoding": 51,
      "seahlynn": 29,
      "-": 82,
      "gabrielseow": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.commons.util.DateTimeUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import seedu.address.model.inventory.Inventory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import seedu.address.model.mapping.InvMemMapping;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.mapping.InvTasMapping;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import seedu.address.model.mapping.Mapping;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.mapping.TasMemMapping;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.member.Member;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.member.MemberId;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.settings.ClockFormat;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.settings.Theme;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.model.statistics.Statistics;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ambhinav"
        },
        "content": " * Represents the in-memory model of +Work data."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    private final ProjectDashboard projectDashboard;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    private final UserSettings userSettings;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    private final FilteredList\u003cTask\u003e filteredTasks;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    private final FilteredList\u003cTask\u003e filteredTasksNotStarted;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    private final FilteredList\u003cTask\u003e filteredTasksDoing;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    private final FilteredList\u003cTask\u003e filteredTasksDone;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    private final FilteredList\u003cTask\u003e filteredTasksByDeadline;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    private final FilteredList\u003cMember\u003e filteredMembers;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    private final FilteredList\u003cMapping\u003e filteredMappings;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    private final FilteredList\u003cInventory\u003e filteredInventories;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    private Statistics stats;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * Initialises a ModelManager with the given projectDashboard, userPrefs and userSettings."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public ModelManager(ReadOnlyProjectDashboard projectDashboard, ReadOnlyUserPrefs userPrefs,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                        ReadOnlyUserSettings userSettings) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        requireAllNonNull(projectDashboard, userPrefs, userSettings);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + projectDashboard + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        this.projectDashboard \u003d new ProjectDashboard(projectDashboard);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        this.userSettings \u003d new UserSettings(userSettings);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        filteredTasks \u003d new FilteredList\u003c\u003e(this.projectDashboard.getTaskList());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        filteredTasksNotStarted \u003d new FilteredList\u003c\u003e(this.projectDashboard.getTasksNotStarted());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        filteredTasksDoing \u003d new FilteredList\u003c\u003e(this.projectDashboard.getTasksDoing());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        filteredTasksDone \u003d new FilteredList\u003c\u003e(this.projectDashboard.getTasksDone());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        filteredTasksByDeadline \u003d new FilteredList\u003c\u003e(this.projectDashboard.getTasksByDeadline());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        filteredMembers \u003d new FilteredList\u003c\u003e(this.projectDashboard.getMemberList());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        filteredInventories \u003d new FilteredList\u003c\u003e(this.projectDashboard.getInventoryList());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        filteredMappings \u003d new FilteredList\u003c\u003e(this.projectDashboard.getMappingList());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        stats \u003d new Statistics(filteredMembers, filteredTasks, filteredMappings);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        stats.doCalculations();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        this(new ProjectDashboard(), new UserPrefs(), new UserSettings());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public Path getProjectDashboardFilePath() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        return userPrefs.getProjectDashboardFilePath();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public void setProjectDashboardFilePath(Path projectDashboardFilePath) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        requireNonNull(projectDashboardFilePath);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        userPrefs.setProjectDashboardFilePath(projectDashboardFilePath);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ProjectDashboard \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public void setProjectDashboard(ReadOnlyProjectDashboard projectDashboard) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        this.projectDashboard.resetData(projectDashboard);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public ReadOnlyProjectDashboard getProjectDashboard() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        return projectDashboard;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        requireNonNull(task);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        return projectDashboard.hasTask(task);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public void deleteTask(Task target) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        projectDashboard.removeTask(target);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        projectDashboard.addTask(task);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        updateFilteredTasksList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public void setTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        requireAllNonNull(target, editedTask);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        projectDashboard.setTask(target, editedTask);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Task List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public ObservableList\u003cTask\u003e getFilteredTaskListNotStarted() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        projectDashboard.splitTasksBasedOnStatus();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        return filteredTasksNotStarted;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public ObservableList\u003cTask\u003e getFilteredTaskListDoing() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        return filteredTasksDoing;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public ObservableList\u003cTask\u003e getFilteredTaskListDone() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        return filteredTasksDone;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public ObservableList\u003cTask\u003e getFilteredTaskListByDeadline() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        projectDashboard.splitTasksByDeadline();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        return filteredTasksByDeadline;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Task} backed by the internal list of"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public ObservableList\u003cTask\u003e getFilteredTasksList() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        return filteredTasks;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public void updateFilteredTasksList(Predicate\u003cTask\u003e predicate) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        filteredTasks.setPredicate(predicate);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public int getTasksLength() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        return filteredTasks.size();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Inventory  \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public void addInventory(Inventory inventory) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        projectDashboard.addInventory(inventory);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        updateFilteredInventoriesList(PREDICATE_SHOW_ALL_INVENTORIES);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public boolean hasInventory(Inventory inventory) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        requireNonNull(inventory);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        return projectDashboard.hasInventory(inventory);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public void deleteInventory(Inventory target) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        projectDashboard.removeInventory(target);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public void setInventory(Inventory target, Inventory editedInventory) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        requireAllNonNull(target, editedInventory);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        projectDashboard.setInventory(target, editedInventory);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public ObservableList\u003cInventory\u003e getFilteredInventoriesList() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        return filteredInventories;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public void updateFilteredInventoriesList(Predicate\u003cInventory\u003e predicate) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        filteredInventories.setPredicate(predicate);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        return projectDashboard.equals(other.projectDashboard)"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                \u0026\u0026 userSettings.equals(other.userSettings)"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "                \u0026\u0026 filteredTasks.equals(other.filteredTasks)"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "                \u0026\u0026 filteredMembers.equals(other.filteredMembers);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ProjectDashboard (member) \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public boolean hasMember(Member member) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        requireNonNull(member);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        return projectDashboard.hasMember(member);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public boolean hasMemberId(MemberId memId) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        requireNonNull(memId);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        return projectDashboard.hasMemId(memId);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public void deleteMember(Member target) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        projectDashboard.removeMember(target);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public void addMember(Member member) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        projectDashboard.addMember(member);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        updateFilteredMembersList(PREDICATE_SHOW_ALL_MEMBERS);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public void setMember(Member target, Member editedMember) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        requireAllNonNull(target, editedMember);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        projectDashboard.setMember(target, editedMember);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public int getMembersLength() {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        return filteredMembers.size();"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Member List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Task} backed by the internal list of"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public ObservableList\u003cMember\u003e getFilteredMembersList() {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        return filteredMembers;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public void updateFilteredMembersList(Predicate\u003cMember\u003e predicate) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        filteredMembers.setPredicate(predicate);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ProjectDashboard (mapping) \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public void addMapping(InvMemMapping mapping) {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        projectDashboard.addMapping(mapping);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        updateFilteredMappingsList(PREDICATE_SHOW_ALL_MAPPINGS);"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public void addMapping(InvTasMapping mapping) {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        projectDashboard.addMapping(mapping);"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        updateFilteredMappingsList(PREDICATE_SHOW_ALL_MAPPINGS);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public void addMapping(TasMemMapping mapping) {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        projectDashboard.addMapping(mapping);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        updateFilteredMappingsList(PREDICATE_SHOW_ALL_MAPPINGS);"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public void deleteMapping(InvMemMapping mapping) {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        projectDashboard.removeMapping(mapping);"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public void deleteMapping(InvTasMapping mapping) {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        projectDashboard.removeMapping(mapping);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public void deleteMapping(TasMemMapping mapping) {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        projectDashboard.removeMapping(mapping);"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public boolean hasMapping(InvTasMapping mapping) {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        requireNonNull(mapping);"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        return projectDashboard.hasMapping(mapping);"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public boolean hasMapping(InvMemMapping mapping) {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        requireNonNull(mapping);"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        return projectDashboard.hasMapping(mapping);"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public boolean hasMapping(TasMemMapping mapping) {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        requireNonNull(mapping);"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        return projectDashboard.hasMapping(mapping);"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Mapping List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public ObservableList\u003cMapping\u003e getFilteredMappingsList() {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        return filteredMappings;"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public void updateFilteredMappingsList(Predicate\u003cMapping\u003e predicate) {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        filteredMappings.setPredicate(predicate);"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Statistics \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public Statistics getStatistics() {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        return this.stats;"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public void setStatistics(Statistics newStats) {"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        this.stats \u003d newStats;"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d User Settings \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public UserSettings getUserSettings() {"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        return userSettings;"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public Path getUserSettingsFilePath() {"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        return userSettings.getUserSettingsFilePath();"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    // TODO for testing purposes"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public void setUserSettingsFilePath(Path newPath) {"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        requireAllNonNull(newPath);"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        userSettings.setUserSettingsFilePath(newPath);"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public Theme getCurrentTheme() {"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        return userSettings.getTheme();"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public void setCurrentTheme(Theme newTheme) {"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        userSettings.setTheme(newTheme);"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public ClockFormat getCurrentClockFormat() {"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        return userSettings.getClockFormat();"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public void setClockFormat(ClockFormat newClockFormat) {"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        userSettings.setClockFormat(newClockFormat);"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambhinav": 117,
      "ArunBeCoding": 52,
      "seahlynn": 62,
      "-": 121,
      "gabrielseow": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ProjectDashboard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.commons.util.DateTimeUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import seedu.address.model.inventory.Inventory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import seedu.address.model.inventory.UniqueInventoryList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.model.member.Member;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import seedu.address.model.member.MemberId;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import seedu.address.model.mapping.InvMemMapping;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import seedu.address.model.mapping.InvTasMapping;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import seedu.address.model.mapping.TasMemMapping;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import seedu.address.model.mapping.Mapping;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import seedu.address.model.mapping.UniqueMappingManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.model.member.UniqueMemberList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.task.TaskStatus;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.task.UniqueTaskList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ambhinav"
        },
        "content": " * Duplicates are not allowed (by .isSameTask comparison)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "public class ProjectDashboard implements ReadOnlyProjectDashboard {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    private final UniqueTaskList tasks;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    private final UniqueTaskList tasksNotStarted;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    private final UniqueTaskList tasksDoing;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    private final UniqueTaskList tasksDone;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    private final UniqueTaskList tasksByDeadline;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    private final UniqueMemberList members;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    private final UniqueInventoryList inventories;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    private final UniqueMappingManager mappings;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        tasks \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        tasksNotStarted \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        tasksDoing \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        tasksDone \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        tasksByDeadline \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        members \u003d new UniqueMemberList();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        inventories \u003d new UniqueInventoryList();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        mappings \u003d new UniqueMappingManager();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public ProjectDashboard() {}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * Creates an ProjectDashboard using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public ProjectDashboard(ReadOnlyProjectDashboard toBeCopied) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * Replaces the contents of the task list with {@code tasks}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * {@code tasks} must not contain duplicate tasks."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public void setTasks(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        this.tasks.setTasks(tasks);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        splitTasksBasedOnStatus(); // initial loading"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        splitTasksByDeadline();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public void setMembers(List\u003cMember\u003e members) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        this.members.setMembers(members);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public void setMappings(List\u003cInvMemMapping\u003e invMemMappings,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                            List\u003cInvTasMapping\u003e invTasMappings,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                            List\u003cTasMemMapping\u003e tasMemMappings) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        this.mappings.setInvMemMappings(invMemMappings);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        this.mappings.setInvTasMappings(invTasMappings);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        this.mappings.setTasMemMappings(tasMemMappings);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * Resets the existing data of this {@code ProjectDashboard} with {@code newData}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * Replaces the contents of the inventory list with {@code inventories}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public void setInventories(List\u003cInventory\u003einventories) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        this.inventories.setInventories(inventories);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * Resets the existing data of this {@code ProjectDashboard} with {@code newData}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public void resetData(ReadOnlyProjectDashboard newData) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        setTasks(newData.getTaskList());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        setInventories(newData.getInventoryList());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        setMembers(newData.getMemberList());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        setMappings(newData.getInvMemMappingList(), newData.getInvTasMappingList(), newData.getTasMemMappingList());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    //// task-level operations"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * Returns true if a task with the same identity as {@code task} exists in the project dashboard."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        requireNonNull(task);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        return tasks.contains(task);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * Adds a task to the address book."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * The task must not already exist in the address book."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public void addTask(Task p) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        tasks.add(p);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * Replaces the given task {@code target} in the list with {@code editedTask}."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * {@code target} must exist in the project dashboard."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * The task identity of {@code editedTask} must not be the same as another existing task in the project dashboard."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public void setTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        requireNonNull(editedTask);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        tasks.setTask(target, editedTask);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * Removes {@code key} from this {@code ProjectDashboard}."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public void removeTask(Task key) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        int index \u003d tasks.getIndexOf(key);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        tasks.remove(key);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        mappings.updateTaskRemoved(index);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    //// inventory-level operations"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * Returns true if a inventory with the same identity as {@code inventory} exists in the dashboard."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public boolean hasInventory(Inventory inventory) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        requireNonNull(inventory);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        return inventories.contains(inventory);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * Adds a inventory to the dashboard."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * The inventory must not already exist in the dashboard."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public void addInventory(Inventory inventory) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        inventories.add(inventory);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * Removes {@code key} from this {@code ProjectDashboard}."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * {@code key} must exist in the dashboard."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public void removeInventory(Inventory target) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        int index \u003d inventories.getIndexOf(target);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        inventories.remove(target);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        mappings.updateInventoryRemoved(index);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    //// util methods TODO add them to the another util class, this breaks SRP"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * Replaces the given inventory {@code target} in the list with {@code editedInventory}."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * {@code target} must exist in the project dashboard."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * The inventory identity of {@code editedInventory} must not be the same as another existing inventory in the project dashboard."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public void setInventory(Inventory target, Inventory editedInventory) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        requireNonNull(editedInventory);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        inventories.setInventory(target, editedInventory);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    //// Task util"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * Utility method to split the main task list into three separate lists based on progress status."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * Called by the getter methods in {@code ModelManager}"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public void splitTasksBasedOnStatus() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        tasksNotStarted.setTasks(tasks.toStream()"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                .filter(task -\u003e task.getTaskStatus().equals(TaskStatus.UNBEGUN)).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        tasksDoing.setTasks(tasks.toStream()"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                .filter(task -\u003e task.getTaskStatus().equals(TaskStatus.DOING)).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        tasksDone.setTasks(tasks.toStream()"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                .filter(task -\u003e task.getTaskStatus().equals(TaskStatus.DONE)).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * Utility method to split tasks by their deadline, for Ui purposes."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * Called by getter methods in {@code ModelManager}"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public void splitTasksByDeadline() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        tasksByDeadline.setTasks(tasks.toStream()"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                .filter(Task::hasDeadline)"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                .filter(task -\u003e !(task.getTaskStatus().equals(TaskStatus.UNBEGUN)))"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                .filter(task -\u003e DateTimeUtil.checkIfDueSoon(2, task.getDeadline()))"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    /// Mapping util"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public void addMapping(InvMemMapping mapping) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        mappings.add(mapping);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public void addMapping(InvTasMapping mapping) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        mappings.add(mapping);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public void addMapping(TasMemMapping mapping) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        mappings.add(mapping);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public void removeMapping(InvMemMapping mapping) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        mappings.remove(mapping);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public void removeMapping(InvTasMapping mapping) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        mappings.remove(mapping);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public void removeMapping(TasMemMapping mapping) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        mappings.remove(mapping);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * returns whether the mapping list contains targetMapping"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public boolean hasMapping(InvMemMapping mapping) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        requireNonNull(mapping);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        return mappings.contains(mapping);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "     * returns whether the mapping list contains targetMapping"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public boolean hasMapping(InvTasMapping mapping) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        requireNonNull(mapping);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        return mappings.contains(mapping);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "     * returns whether the mapping list contains targetMapping"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public boolean hasMapping(TasMemMapping mapping) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        requireNonNull(mapping);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        return mappings.contains(mapping);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        return tasks.asUnmodifiableObservableList().size() + \" tasks\";"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public ObservableList\u003cInventory\u003e getInventoryList() {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        return inventories.asUnmodifiableList();"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public ObservableList\u003cInvMemMapping\u003e getInvMemMappingList() {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        return mappings.getUnmodifiableObservableInvMemList();"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public ObservableList\u003cInvTasMapping\u003e getInvTasMappingList() {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        return mappings.getUnmodifiableObservableInvTasList();"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public ObservableList\u003cTasMemMapping\u003e getTasMemMappingList() {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        return mappings.getUnmodifiableObservableTasMemList();"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public ObservableList\u003cMapping\u003e getMappingList() {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        return mappings.getUnmodifiableObserableList();"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public ObservableList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        return tasks.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public ObservableList\u003cTask\u003e getTasksNotStarted() {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        return tasksNotStarted.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public ObservableList\u003cTask\u003e getTasksDoing() {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        return tasksDoing.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public ObservableList\u003cTask\u003e getTasksDone() {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        return tasksDone.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public ObservableList\u003cTask\u003e getTasksByDeadline() {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        return tasksByDeadline.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                || (other instanceof ProjectDashboard // instanceof handles nulls"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                \u0026\u0026 tasks.equals(((ProjectDashboard) other).tasks));"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    /*@Override"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        return tasks.hashCode();"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    //// member-level operations"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     * Returns true if a task with the same identity as {@code task} exists in the address book."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public boolean hasMember(Member member) {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        requireNonNull(member);"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        return members.contains(member);"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * Returns true if a member with the same identity as {@code memberId} exists in the dashboard."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public boolean hasMemId(MemberId memId) {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        requireNonNull(memId);"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        return members.containsId(memId);"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     * Adds a task to the address book."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     * The task must not already exist in the address book."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public void addMember(Member member) {"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        members.add(member);"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     * Replaces the given task {@code target} in the list with {@code editedTask}."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     * The task identity of {@code editedTask} must not be the same as another existing task in the address book."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public void setMember(Member target, Member editedMember) {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        requireNonNull(editedMember);"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        members.setMember(target, editedMember);"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     * Removes {@code key} from this {@code ProjectDashboard}."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public void removeMember(Member key) {"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        int index \u003d members.getIndexOf(key);"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        members.remove(key);"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        mappings.updateMemberRemoved(index);"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    /*Override"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        return members.asUnmodifiableObservableList().size() + \" members\";"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public ObservableList\u003cMember\u003e getMemberList() {"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        return members.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    /*@Override"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        return members.hashCode();"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public HashMap\u003cTask, ObservableList\u003cMember\u003e\u003e listMemberByTask() {"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        HashMap\u003cInteger, ObservableList\u003cInteger\u003e\u003e indexedListMemberByTask \u003d mappings.listMemberByTask();"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        HashMap\u003cTask, ObservableList\u003cMember\u003e\u003e result \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        ObservableList\u003cTask\u003e tasksObservableList \u003d tasks.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        ObservableList\u003cMember\u003e membersObservableList \u003d members.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        for (int taskIndex : indexedListMemberByTask.keySet()) {"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            Task currentTask \u003d tasksObservableList.get(taskIndex);"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            ObservableList\u003cMember\u003e mappedMembers \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            result.put(currentTask, mappedMembers);"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            for (int memberIndex : indexedListMemberByTask.get(taskIndex)) {"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                mappedMembers.add(membersObservableList.get(memberIndex));"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambhinav": 107,
      "ArunBeCoding": 68,
      "seahlynn": 62,
      "-": 72,
      "gabrielseow": 115
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyProjectDashboard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import seedu.address.model.inventory.Inventory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import seedu.address.model.member.Member;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import seedu.address.model.mapping.InvMemMapping;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import seedu.address.model.mapping.InvTasMapping;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import seedu.address.model.mapping.TasMemMapping;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import seedu.address.model.mapping.Mapping;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "public interface ReadOnlyProjectDashboard {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * Returns an unmodifiable view of the task list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * This list will not contain any duplicate tasks."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    ObservableList\u003cTask\u003e getTaskList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     * Returns an unmodifiable view of the persons list."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     * This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    ObservableList\u003cMember\u003e getMemberList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * Returns an unmodifiable view of the expenses list."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    ObservableList\u003cInventory\u003e getInventoryList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    HashMap\u003cTask, ObservableList\u003cMember\u003e\u003e listMemberByTask();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    ObservableList\u003cInvMemMapping\u003e getInvMemMappingList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    ObservableList\u003cInvTasMapping\u003e getInvTasMappingList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    ObservableList\u003cTasMemMapping\u003e getTasMemMappingList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    ObservableList\u003cMapping\u003e getMappingList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    ObservableList\u003cTask\u003e getTasksNotStarted();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    ObservableList\u003cTask\u003e getTasksDoing();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    ObservableList\u003cTask\u003e getTasksDone();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambhinav": 9,
      "ArunBeCoding": 12,
      "seahlynn": 5,
      "-": 12,
      "gabrielseow": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyUserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    Path getProjectDashboardFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    Path getUserSettingsFilePath();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambhinav": 2,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyUserSettings.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.settings.ClockFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.settings.Theme;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ambhinav"
        },
        "content": " * Unmodifiable view of user settings."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ambhinav"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "public interface ReadOnlyUserSettings {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    Path getUserSettingsFilePath();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    Theme getTheme();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    ClockFormat getClockFormat();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambhinav": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    private Path projectDashboardFilePath \u003d Paths.get(\"data\" , \"projectdashboard.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    private Path userSettingsFilePath \u003d Paths.get(\"data\" , \"plusworksettings.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        setProjectDashboardFilePath(newUserPrefs.getProjectDashboardFilePath());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public Path getProjectDashboardFilePath() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        return projectDashboardFilePath;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public Path getUserSettingsFilePath() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        return userSettingsFilePath;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public void setProjectDashboardFilePath(Path projectDashboardFilePath) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        requireNonNull(projectDashboardFilePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        this.projectDashboardFilePath \u003d projectDashboardFilePath;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                \u0026\u0026 projectDashboardFilePath.equals(o.projectDashboardFilePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        return Objects.hash(guiSettings, projectDashboardFilePath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + projectDashboardFilePath);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambhinav": 15,
      "-": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserSettings.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.commons.util.DateTimeUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.settings.ClockFormat;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.settings.Theme;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ambhinav"
        },
        "content": " * Represents user settings of +Work."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ambhinav"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "public class UserSettings implements ReadOnlyUserSettings {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    private Path userSettingsFilePath \u003d Paths.get(\"data\", \"plusworksettings.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    // default settings"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    private Theme theme \u003d Theme.DARK;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    private ClockFormat clockFormat \u003d ClockFormat.TWENTY_FOUR;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * Creates a {@code UserSettings} with default values."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public UserSettings() {};"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * Creates a {@code UserSettings} with the settings in {@code userSettings}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public UserSettings(ReadOnlyUserSettings userSettings) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        resetData(userSettings);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * Resets the existing data of this {@code UserSettings} with {@code newUserSettings}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public void resetData(ReadOnlyUserSettings newUserSettings) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        requireNonNull(newUserSettings);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        setClockFormat(newUserSettings.getClockFormat());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        setTheme(newUserSettings.getTheme());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        setUserSettingsFilePath(newUserSettings.getUserSettingsFilePath());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public Path getUserSettingsFilePath() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        return userSettingsFilePath;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public void setUserSettingsFilePath(Path newUserSettingsFilePath) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        requireNonNull(userSettingsFilePath);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        userSettingsFilePath \u003d newUserSettingsFilePath;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public Theme getTheme() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        return theme;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public void setTheme(Theme newTheme) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        theme \u003d newTheme;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public ClockFormat getClockFormat() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        return clockFormat;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public void setClockFormat(ClockFormat newClockFormat) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        DateTimeUtil.switchDisplayFormat(newClockFormat.getDisplayFormatter());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        clockFormat \u003d newClockFormat;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        if (!(other instanceof UserSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        UserSettings o \u003d (UserSettings) other;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        return theme.equals(o.theme)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                \u0026\u0026 clockFormat.equals(o.clockFormat)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                \u0026\u0026 userSettingsFilePath.equals(o.userSettingsFilePath);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        return Objects.hash(userSettingsFilePath);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        sb.append(\"Current theme : \" + theme);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        sb.append(\"Current clockFormat : \" + clockFormat.getDisplayName());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + userSettingsFilePath);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambhinav": 105
    }
  },
  {
    "path": "src/main/java/seedu/address/model/inventory/InvName.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "package seedu.address.model.inventory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import seedu.address.model.task.Name;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": " * Represents a Inventory\u0027s name in ProjectDashBoard."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seahlynn"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidMemberName(String)}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "public class InvName {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public InvName(String name) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public InvName() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        fullName \u003d null;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ArunBeCoding": 10,
      "seahlynn": 1,
      "-": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/model/inventory/Inventory.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "package seedu.address.model.inventory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "//import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": " * Represents a Inventory in ProjectDashBoard."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "public class Inventory {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    //private final Task task;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    private final InvName name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /*private final memIndex memID;*/"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    private final Price price;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public Inventory(/*Task task,*/ InvName name, /*,memIndex memID, */Price price) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        requireAllNonNull(/*task,*/ name, price);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        //this.task \u003d task;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        /*this.memID \u003d memID*/"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        this.price \u003d price;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public Inventory(/*Task task,*/ InvName name/*,memIndex memID, */) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        requireAllNonNull(/*task,*/ name);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        //this.task \u003d task;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        /*this.memID \u003d memID*/"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        this.price \u003d new Price(0);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    // TODO add multiple constructors so that users can add aditional info later"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public InvName getName() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    //public Task getTask() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    //    return task;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public Price getPrice() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        return price;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * Returns true if both tasks of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public boolean isSameInventory(Inventory otherInv) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        if (otherInv \u003d\u003d this) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        // TODO change the logic to check for the identity fields of status and member"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        // basically the name cannot be the same, that\u0027s it"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        return otherInv !\u003d null"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                \u0026\u0026 otherInv.getName().equals(getName())"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                \u0026\u0026 otherInv.getPrice().equals(getPrice())"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                /*\u0026\u0026 otherInv.getTask().equals(getTask())*/;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        if (!(other instanceof Inventory)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        Inventory otherInv \u003d (Inventory) other;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        return otherInv.getName().equals(getName())"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                /*\u0026\u0026 otherInv.getTask().equals(getTask())*/"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                \u0026\u0026 otherInv.getPrice().equals(getPrice());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        return Objects.hash(/*task, */name, price);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                //.append(\" Task: \" + getTask().getName())"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                .append(\" Price: \" + getPrice());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ArunBeCoding": 108
    }
  },
  {
    "path": "src/main/java/seedu/address/model/inventory/Price.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "package seedu.address.model.inventory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": " * represents the price of inventory"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": " * ensures the price is a positive value"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "public class Price {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            \"Price should be a positive value\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public final double price;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * @param price A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public Price(double price) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        requireNonNull(price);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        checkArgument(isValidName(price), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        this.price \u003d price;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public Price() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        price \u003d -1;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public static boolean isValidName(double price) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        return price \u003e\u003d 0;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public double getPrice() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        return price;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        return Double.toString(price);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                || (other instanceof Price // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                \u0026\u0026 (price \u003d\u003d (((Price) other).price))); // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        return Double.valueOf(price).hashCode();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ArunBeCoding": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/model/inventory/UniqueInventoryList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "package seedu.address.model.inventory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import seedu.address.model.inventory.exceptions.DuplicateInventoryException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import seedu.address.model.inventory.exceptions.InventoryNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": " * A list of inventories that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": " * A inventory is considered unique by comparing using {@code Inventory#isSameInventory(Inventory)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": " * As such, adding and updating of persons uses Inventory#isSameInventory(Inventory) for equality so as to ensure that"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": " * the inventory being added or updated is unique in terms of identity in the UniqueInventoryList. However, the"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": " * removal of a inventory uses Inventory#equals(Object) so as to ensure that the inventory with exactly the same fields"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": " * will be removed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "public class UniqueInventoryList implements Iterable\u003cInventory\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    private final ObservableList\u003cInventory\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    private final ObservableList\u003cInventory\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * Returns true if the list contains an equivalent Inventory as the given argument."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public boolean contains(Inventory toCheck) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameInventory);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * Adds a Inventory to the list."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * The Inventory must not already exist in the list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public void add(Inventory toAdd) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            throw new DuplicateInventoryException();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * Replaces the inventory {@code target} in the list with {@code editedInventory}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * The inventory identity of {@code editedInventory} must not be the same as another existing task in the list."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public void setInventory(Inventory target, Inventory editedInventory) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        requireAllNonNull(target, editedInventory);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            throw new InventoryNotFoundException();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        if (!target.isSameInventory(editedInventory) \u0026\u0026 contains(editedInventory)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            throw new DuplicateInventoryException();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        internalList.set(index, editedInventory);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * Removes the equivalent Inventory from the list."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * The inventory must exist in the list."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public void remove(Inventory toRemove) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            throw new InventoryNotFoundException();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public void setInventories(UniqueInventoryList replacement) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        internalList.clear();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        internalList.addAll(replacement.internalList);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * Replaces the contents of this list with {@code tasks}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * {@code tasks} must not contain duplicate tasks."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public void setInventories(List\u003cInventory\u003e inventories) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        requireAllNonNull(inventories);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        if (!inventoriesAreUnique(inventories)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            throw new DuplicateInventoryException();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        internalList.clear();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        internalList.addAll(inventories);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public int getIndexOf(Inventory target) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            throw new InventoryNotFoundException();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        return index;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public ObservableList\u003cInventory\u003e asUnmodifiableList() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public Iterator\u003cInventory\u003e iterator() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                || (other instanceof UniqueInventoryList // instanceof handles nulls"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueInventoryList) other).internalList));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * Returns true if {@code inventories} contains only unique tasks."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    private boolean inventoriesAreUnique(List\u003cInventory\u003e inventories) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        for (int i \u003d 0; i \u003c inventories.size() - 1; i++) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            for (int j \u003d i + 1; j \u003c inventories.size(); j++) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                if (inventories.get(i).isSameInventory(inventories.get(j))) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ArunBeCoding": 137,
      "gabrielseow": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/inventory/exceptions/DuplicateInventoryException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "package seedu.address.model.inventory.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": " * Signals that the operation will result in duplicate inventories (Inventories are considered duplicates if"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": " * they have the same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "public class DuplicateInventoryException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public DuplicateInventoryException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        super(\"Operation would result in duplicate tasks\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ArunBeCoding": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/inventory/exceptions/InventoryNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "package seedu.address.model.inventory.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": " * Signals that the operation is unable to find the specified task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "public class InventoryNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ArunBeCoding": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/mapping/InvMemMapping.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "package seedu.address.model.mapping;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "public class InvMemMapping extends Mapping{"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    private final int memberIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    private final int inventoryIndex;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public InvMemMapping(int memberIndex, int inventoryIndex) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        this.memberIndex \u003d memberIndex;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        this.inventoryIndex \u003d inventoryIndex;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public int getMemberIndex() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        return memberIndex;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public int getInventoryIndex() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        return inventoryIndex;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "     * Returns true if both tasks of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public boolean isSameMapping(InvMemMapping otherMapping) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        if (otherMapping \u003d\u003d this) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        // TODO change the logic to check for the identity fields of status and member"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        // basically the name cannot be the same, that\u0027s it"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        return memberIndex \u003d\u003d otherMapping.getMemberIndex()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                \u0026\u0026 inventoryIndex \u003d\u003d otherMapping.getInventoryIndex();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        if (!(other instanceof InvMemMapping)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        InvMemMapping otherMapping \u003d (InvMemMapping) other;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        return otherMapping !\u003d null"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                \u0026\u0026 memberIndex \u003d\u003d otherMapping.getMemberIndex()"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                \u0026\u0026 inventoryIndex \u003d\u003d otherMapping.getInventoryIndex();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        return Objects.hash(memberIndex, inventoryIndex);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        builder.append(\"Placeholder string for InvMemMapping toString method\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "gabrielseow": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/model/mapping/InvTasMapping.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "package seedu.address.model.mapping;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "public class InvTasMapping extends Mapping{"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    private final int taskIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    private final int inventoryIndex;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public InvTasMapping(int taskIndex, int inventoryIndex) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        this.taskIndex \u003d taskIndex;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        this.inventoryIndex \u003d inventoryIndex;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public int getTaskIndex() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        return taskIndex;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public int getInventoryIndex() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        return inventoryIndex;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "     * Returns true if both tasks of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public boolean isSameMapping(InvTasMapping otherMapping) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        if (otherMapping \u003d\u003d this) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        // TODO change the logic to check for the identity fields of status and member"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        // basically the name cannot be the same, that\u0027s it"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        return taskIndex \u003d\u003d otherMapping.getTaskIndex()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                \u0026\u0026 inventoryIndex \u003d\u003d otherMapping.getInventoryIndex();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        if (!(other instanceof InvTasMapping)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        InvTasMapping otherMapping \u003d (InvTasMapping) other;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        return otherMapping !\u003d null"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                \u0026\u0026 taskIndex \u003d\u003d otherMapping.getTaskIndex()"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                \u0026\u0026 inventoryIndex \u003d\u003d otherMapping.getInventoryIndex();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        return Objects.hash(taskIndex, inventoryIndex);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        builder.append(\"Placeholder string for InvTasMapping toString method\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "gabrielseow": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/model/mapping/Mapping.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "package seedu.address.model.mapping;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "public abstract class Mapping {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielseow": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/model/mapping/TasMemMapping.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "package seedu.address.model.mapping;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "public class TasMemMapping extends Mapping{"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    private final int memberIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    private final int taskIndex;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public TasMemMapping (int taskIndex, int memberIndex) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        this.memberIndex \u003d memberIndex;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        this.taskIndex \u003d taskIndex;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public int getMemberIndex() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        return memberIndex;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public boolean hasMember(int memberIndex) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        return this.memberIndex \u003d\u003d memberIndex;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public int getTaskIndex() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        return taskIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public boolean hasTask(int taskIndex) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        return this.taskIndex \u003d\u003d taskIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "     * Returns true if both tasks of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public boolean isSameMapping(TasMemMapping otherMapping) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        if (otherMapping \u003d\u003d this) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        // TODO change the logic to check for the identity fields of status and member"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        // basically the name cannot be the same, that\u0027s it"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        return memberIndex \u003d\u003d otherMapping.getMemberIndex()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                \u0026\u0026 taskIndex \u003d\u003d otherMapping.getTaskIndex();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        if (!(other instanceof TasMemMapping)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        TasMemMapping otherMapping \u003d (TasMemMapping) other;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        return otherMapping !\u003d null"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                \u0026\u0026 memberIndex \u003d\u003d otherMapping.getMemberIndex()"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                \u0026\u0026 taskIndex \u003d\u003d otherMapping.getTaskIndex();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        return Objects.hash(taskIndex, memberIndex);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        builder.append(\"Placeholder string for Mapping toString method\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "gabrielseow": 85
    }
  },
  {
    "path": "src/main/java/seedu/address/model/mapping/UniqueInvMemMappingList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "package seedu.address.model.mapping;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import java.util.ListIterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import seedu.address.model.mapping.exceptions.DuplicateMappingException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import seedu.address.model.mapping.exceptions.MappingNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": " * A list of persons that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": " * A task is considered unique by comparing using {@code Task#isSameTask(Task)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": " * persons uses Task#isSameTask(Task) for equality so as to ensure that the task being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": " * unique in terms of identity in the UniqueTaskList. However, the removal of a task uses Task#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": " * as to ensure that the task with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": " * @see Task#isSameTask(Task)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "public class UniqueInvMemMappingList implements Iterable\u003cInvMemMapping\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    private final ObservableList\u003cInvMemMapping\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    private final ObservableList\u003cInvMemMapping\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "     * Returns true if the list contains an equivalent task as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public boolean contains(InvMemMapping toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameMapping);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "     * Adds a task to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "     * The task must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public void add(InvMemMapping toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            throw new DuplicateMappingException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "     * Replaces the task {@code target} in the list with {@code editedTask}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "     * The task identity of {@code editedTask} must not be the same as another existing task in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public void setMapping(InvMemMapping target, InvMemMapping editedMapping) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        requireAllNonNull(target, editedMapping);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            throw new MappingNotFoundException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        if (!target.isSameMapping(editedMapping) \u0026\u0026 contains(editedMapping)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            throw new DuplicateMappingException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        internalList.set(index, editedMapping);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "     * Removes the equivalent task from the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "     * The task must exist in the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public void remove(InvMemMapping toRemove) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            throw new MappingNotFoundException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public void setMappings(UniqueInvMemMappingList replacement) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "     * Replaces the contents of this list with {@code tasks}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "     * {@code tasks} must not contain duplicate tasks."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public void setMappings(List\u003cInvMemMapping\u003e mappings) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        requireAllNonNull(mappings);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        if (!mappingsAreUnique(mappings)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            throw new DuplicateMappingException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        internalList.setAll(mappings);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public void updateMemberRemoved(int index) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        ListIterator\u003cInvMemMapping\u003e iterator \u003d iterator();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        while (iterator.hasNext()) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            InvMemMapping mapping \u003d iterator.next();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            int mappingIndex \u003d mapping.getMemberIndex();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            if (mappingIndex \u003d\u003d index) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                iterator.remove();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            } else if (mappingIndex \u003e index) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                InvMemMapping updatedMapping \u003d new InvMemMapping(mapping.getInventoryIndex(), mappingIndex - 1);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                iterator.remove();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                iterator.add(updatedMapping);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public void updateInventoryRemoved(int index) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        ListIterator\u003cInvMemMapping\u003e iterator \u003d iterator();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        while (iterator.hasNext()) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            InvMemMapping mapping \u003d iterator.next();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            int mappingIndex \u003d mapping.getInventoryIndex();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            if (mappingIndex \u003d\u003d index) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                iterator.remove();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            } else if (mappingIndex \u003e index) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                InvMemMapping updatedMapping \u003d new InvMemMapping(mappingIndex - 1, mapping.getMemberIndex());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                iterator.remove();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                iterator.add(updatedMapping);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public ObservableList\u003cInvMemMapping\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public ListIterator\u003cInvMemMapping\u003e iterator() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        return internalList.listIterator();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                || (other instanceof UniqueInvMemMappingList // instanceof handles nulls"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueInvMemMappingList) other).internalList));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "     * Returns true if {@code tasks} contains only unique tasks."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    private boolean mappingsAreUnique(List\u003cInvMemMapping\u003e mappings) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        for (int i \u003d 0; i \u003c mappings.size() - 1; i++) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            for (int j \u003d i + 1; j \u003c mappings.size(); j++) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                if (mappings.get(i).isSameMapping(mappings.get(j))) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielseow": 167
    }
  },
  {
    "path": "src/main/java/seedu/address/model/mapping/UniqueInvTasMappingList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "package seedu.address.model.mapping;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import java.util.ListIterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import seedu.address.model.mapping.exceptions.DuplicateMappingException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import seedu.address.model.mapping.exceptions.MappingNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": " * A list of persons that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": " * A task is considered unique by comparing using {@code Task#isSameTask(Task)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": " * persons uses Task#isSameTask(Task) for equality so as to ensure that the task being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": " * unique in terms of identity in the UniqueTaskList. However, the removal of a task uses Task#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": " * as to ensure that the task with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": " * @see Task#isSameTask(Task)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "public class UniqueInvTasMappingList implements Iterable\u003cInvTasMapping\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    private final ObservableList\u003cInvTasMapping\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    private final ObservableList\u003cInvTasMapping\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "     * Returns true if the list contains an equivalent task as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public boolean contains(InvTasMapping toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameMapping);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "     * Adds a task to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "     * The task must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public void add(InvTasMapping toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            throw new DuplicateMappingException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "     * Replaces the task {@code target} in the list with {@code editedTask}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "     * The task identity of {@code editedTask} must not be the same as another existing task in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public void setMapping(InvTasMapping target, InvTasMapping editedMapping) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        requireAllNonNull(target, editedMapping);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            throw new MappingNotFoundException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        if (!target.isSameMapping(editedMapping) \u0026\u0026 contains(editedMapping)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            throw new DuplicateMappingException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        internalList.set(index, editedMapping);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "     * Removes the equivalent task from the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "     * The task must exist in the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public void remove(InvTasMapping toRemove) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            throw new MappingNotFoundException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public void setMappings(UniqueInvTasMappingList replacement) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "     * Replaces the contents of this list with {@code tasks}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "     * {@code tasks} must not contain duplicate tasks."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public void setMappings(List\u003cInvTasMapping\u003e mappings) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        requireAllNonNull(mappings);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        if (!mappingsAreUnique(mappings)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            throw new DuplicateMappingException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        internalList.setAll(mappings);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public void updateTaskRemoved(int index) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        ListIterator\u003cInvTasMapping\u003e iterator \u003d iterator();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        while (iterator.hasNext()) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            InvTasMapping mapping \u003d iterator.next();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            int mappingIndex \u003d mapping.getTaskIndex();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            if (mappingIndex \u003d\u003d index) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                iterator.remove();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            } else if (mappingIndex \u003e index) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                InvTasMapping updatedMapping \u003d new InvTasMapping(mapping.getInventoryIndex(), mappingIndex - 1);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                iterator.remove();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                iterator.add(updatedMapping);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public void updateInventoryRemoved(int index) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        ListIterator\u003cInvTasMapping\u003e iterator \u003d iterator();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        while (iterator.hasNext()) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            InvTasMapping mapping \u003d iterator.next();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            int mappingIndex \u003d mapping.getInventoryIndex();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            if (mappingIndex \u003d\u003d index) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                iterator.remove();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            } else if (mappingIndex \u003e index) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                InvTasMapping updatedMapping \u003d new InvTasMapping(mappingIndex - 1, mapping.getTaskIndex());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                iterator.remove();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                iterator.add(updatedMapping);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public ObservableList\u003cInvTasMapping\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public ListIterator\u003cInvTasMapping\u003e iterator() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        return internalList.listIterator();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                || (other instanceof UniqueInvTasMappingList // instanceof handles nulls"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueInvTasMappingList) other).internalList));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "     * Returns true if {@code tasks} contains only unique tasks."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    private boolean mappingsAreUnique(List\u003cInvTasMapping\u003e mappings) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        for (int i \u003d 0; i \u003c mappings.size() - 1; i++) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            for (int j \u003d i + 1; j \u003c mappings.size(); j++) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                if (mappings.get(i).isSameMapping(mappings.get(j))) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielseow": 167
    }
  },
  {
    "path": "src/main/java/seedu/address/model/mapping/UniqueMappingManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "package seedu.address.model.mapping;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import seedu.address.model.mapping.exceptions.DuplicateMappingException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import seedu.address.model.mapping.exceptions.MappingNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import seedu.address.model.member.Member;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": " * A list of persons that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": " * A task is considered unique by comparing using {@code Task#isSameTask(Task)}. As such, adding and updating of"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": " * persons uses Task#isSameTask(Task) for equality so as to ensure that the task being added or updated is"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": " * unique in terms of identity in the UniqueTaskList. However, the removal of a task uses Task#equals(Object) so"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": " * as to ensure that the task with exactly the same fields will be removed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": " *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": " * @see Task#isSameTask(Task)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "public class UniqueMappingManager {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    private final UniqueInvMemMappingList invMemMappingList;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    private final UniqueInvTasMappingList invTasMappingList;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    private final UniqueTasMemMappingList tasMemMappingList;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public UniqueMappingManager() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        invMemMappingList \u003d new UniqueInvMemMappingList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        invTasMappingList \u003d new UniqueInvTasMappingList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        tasMemMappingList \u003d new UniqueTasMemMappingList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d InvMem methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public void add(InvMemMapping toAdd) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        invMemMappingList.add(toAdd);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public void remove(InvMemMapping toRemove) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        invMemMappingList.remove(toRemove);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public boolean contains(InvMemMapping toCheck) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        return invMemMappingList.contains(toCheck);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public void setMapping(InvMemMapping target, InvMemMapping editedMapping) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        requireAllNonNull(target, editedMapping);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        invMemMappingList.setMapping(target, editedMapping);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public void setMappings(UniqueInvMemMappingList replacement) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        invMemMappingList.setMappings(replacement);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public ObservableList\u003cInvMemMapping\u003e getUnmodifiableObservableInvMemList() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        return invMemMappingList.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d InvTas methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public void add(InvTasMapping toAdd) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        invTasMappingList.add(toAdd);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public void remove(InvTasMapping toRemove) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        invTasMappingList.remove(toRemove);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public boolean contains(InvTasMapping toCheck) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        return invTasMappingList.contains(toCheck);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public void setMapping(InvTasMapping target, InvTasMapping editedMapping) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        requireAllNonNull(target, editedMapping);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        invTasMappingList.setMapping(target, editedMapping);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public void setMappings(UniqueInvTasMappingList replacement) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        invTasMappingList.setMappings(replacement);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public ObservableList\u003cInvTasMapping\u003e getUnmodifiableObservableInvTasList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        return invTasMappingList.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d TasMem methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public ObservableList\u003cInteger\u003e getMembersMappedToTask(int taskIndex) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        return tasMemMappingList.getMembersMappedToTask(taskIndex);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public ObservableList\u003cInteger\u003e getTasksMappedToMember(int memberIndex) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        return tasMemMappingList.getTasksMappedToMember(memberIndex);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "     *returns a hashMap of members by tasks"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public HashMap\u003cInteger, ObservableList\u003cInteger\u003e\u003e listMemberByTask() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        return tasMemMappingList.listMemberByTask();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public void add(TasMemMapping toAdd) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        tasMemMappingList.add(toAdd);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public void remove(TasMemMapping toRemove) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        tasMemMappingList.remove(toRemove);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public boolean contains(TasMemMapping toCheck) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        return tasMemMappingList.contains(toCheck);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public void setMapping(TasMemMapping target, TasMemMapping editedMapping) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        requireAllNonNull(target, editedMapping);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        tasMemMappingList.setMapping(target, editedMapping);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public void setMappings(UniqueTasMemMappingList replacement) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        tasMemMappingList.setMappings(replacement);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public void setInvMemMappings(List\u003cInvMemMapping\u003e replacement) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        invMemMappingList.setMappings(replacement);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public void setInvTasMappings(List\u003cInvTasMapping\u003e replacement) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        invTasMappingList.setMappings(replacement);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public void setTasMemMappings(List\u003cTasMemMapping\u003e replacement) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        tasMemMappingList.setMappings(replacement);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public ObservableList\u003cTasMemMapping\u003e getUnmodifiableObservableTasMemList() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        return tasMemMappingList.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public ObservableList\u003cMapping\u003e getUnmodifiableObserableList() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        ObservableList\u003cMapping\u003e result \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        result.addAll(invMemMappingList.asUnmodifiableObservableList());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        result.addAll(invTasMappingList.asUnmodifiableObservableList());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        result.addAll(tasMemMappingList.asUnmodifiableObservableList());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public void updateTaskRemoved(int index) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        invTasMappingList.updateTaskRemoved(index);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        tasMemMappingList.updateTaskRemoved(index);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public void updateMemberRemoved(int index) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        invMemMappingList.updateMemberRemoved(index);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        tasMemMappingList.updateMemberRemoved(index);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public void updateInventoryRemoved(int index) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        invMemMappingList.updateInventoryRemoved(index);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        invTasMappingList.updateInventoryRemoved(index);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielseow": 197
    }
  },
  {
    "path": "src/main/java/seedu/address/model/mapping/UniqueTasMemMappingList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "package seedu.address.model.mapping;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import java.util.ListIterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import seedu.address.model.mapping.exceptions.DuplicateMappingException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import seedu.address.model.mapping.exceptions.MappingNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.model.member.Member;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": " * A list of persons that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": " * A task is considered unique by comparing using {@code Task#isSameTask(Task)}. As such, adding and updating of"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": " * persons uses Task#isSameTask(Task) for equality so as to ensure that the task being added or updated is"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": " * unique in terms of identity in the UniqueTaskList. However, the removal of a task uses Task#equals(Object) so"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": " * as to ensure that the task with exactly the same fields will be removed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": " *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": " * @see Task#isSameTask(Task)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "public class UniqueTasMemMappingList implements Iterable\u003cTasMemMapping\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    private final ObservableList\u003cTasMemMapping\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    private final ObservableList\u003cTasMemMapping\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public ObservableList\u003cInteger\u003e getMembersMappedToTask(int taskIndex) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        ObservableList\u003cInteger\u003e result \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        for (TasMemMapping mapping : internalList) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            if (mapping.hasTask(taskIndex)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                result.add(mapping.getMemberIndex());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public ObservableList\u003cInteger\u003e getTasksMappedToMember(int memberIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        ObservableList\u003cInteger\u003e result \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        for (TasMemMapping mapping : internalList) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            if (mapping.hasMember(memberIndex)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                result.add(mapping.getTaskIndex());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     *returns a hashMap of members by tasks"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public HashMap\u003cInteger, ObservableList\u003cInteger\u003e\u003e listMemberByTask() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        HashMap\u003cInteger, ObservableList\u003cInteger\u003e\u003e result \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        for (TasMemMapping mapping : internalList) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            int currentTaskIndex \u003d mapping.getTaskIndex();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            if (result.get(currentTaskIndex) \u003d\u003d null) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                result.put(currentTaskIndex, FXCollections.observableArrayList());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            result.get(currentTaskIndex).add(mapping.getMemberIndex());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "     * Returns true if the list contains an equivalent task as the given argument."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public void add(TasMemMapping toAdd) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            throw new DuplicateMappingException();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public void remove(TasMemMapping toRemove) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            throw new MappingNotFoundException();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public boolean contains(TasMemMapping toCheck) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameMapping);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "     * Replaces the task {@code target} in the list with {@code editedTask}."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "     * The task identity of {@code editedTask} must not be the same as another existing task in the list."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public void setMapping(TasMemMapping target, TasMemMapping editedMapping) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        requireAllNonNull(target, editedMapping);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            throw new MappingNotFoundException();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        if (!target.isSameMapping(editedMapping) \u0026\u0026 contains(editedMapping)) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            throw new DuplicateMappingException();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        internalList.set(index, editedMapping);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public void setMappings(UniqueTasMemMappingList replacement) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "     * Replaces the contents of this list with {@code tasks}."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "     * {@code tasks} must not contain duplicate tasks."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public void setMappings(List\u003cTasMemMapping\u003e mappings) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        requireAllNonNull(mappings);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        if (!mappingsAreUnique(mappings)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            throw new DuplicateMappingException();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        internalList.setAll(mappings);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public void updateTaskRemoved(int index) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        ListIterator\u003cTasMemMapping\u003e iterator \u003d iterator();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        while (iterator.hasNext()) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            TasMemMapping mapping \u003d iterator.next();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            int mappingIndex \u003d mapping.getTaskIndex();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            if (mappingIndex \u003d\u003d index) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                iterator.remove();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            } else if (mappingIndex \u003e index) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                TasMemMapping updatedMapping \u003d new TasMemMapping(mappingIndex - 1, mapping.getMemberIndex());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                iterator.remove();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                iterator.add(updatedMapping);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public void updateMemberRemoved(int index) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        ListIterator\u003cTasMemMapping\u003e iterator \u003d iterator();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        while (iterator.hasNext()) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            TasMemMapping mapping \u003d iterator.next();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            int mappingIndex \u003d mapping.getMemberIndex();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            if (mappingIndex \u003d\u003d index) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                iterator.remove();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            } else if (mappingIndex \u003e index) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                TasMemMapping updatedMapping \u003d new TasMemMapping(mapping.getTaskIndex(), mappingIndex - 1);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                iterator.remove();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                iterator.add(updatedMapping);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public ObservableList\u003cTasMemMapping\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public ListIterator\u003cTasMemMapping\u003e iterator() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        return internalList.listIterator();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                || (other instanceof UniqueTasMemMappingList // instanceof handles nulls"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueTasMemMappingList) other).internalList));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "     * Returns true if {@code tasks} contains only unique tasks."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    private boolean mappingsAreUnique(List\u003cTasMemMapping\u003e mappings) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        for (int i \u003d 0; i \u003c mappings.size() - 1; i++) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            for (int j \u003d i + 1; j \u003c mappings.size(); j++) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                if (mappings.get(i).isSameMapping(mappings.get(j))) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ArunBeCoding": 3,
      "seahlynn": 3,
      "gabrielseow": 193
    }
  },
  {
    "path": "src/main/java/seedu/address/model/mapping/exceptions/DuplicateMappingException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "package seedu.address.model.mapping.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": " * Signals that the operation will result in duplicate Persons (Persons are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "public class DuplicateMappingException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public DuplicateMappingException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        super(\"Operation would result in duplicate tasks\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielseow": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/mapping/exceptions/MappingNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "package seedu.address.model.mapping.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": " * Signals that the operation is unable to find the specified task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "public class MappingNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "gabrielseow": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/member/Member.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "package seedu.address.model.member;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seahlynn"
        },
        "content": " * Represents a Member in the address book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seahlynn"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seahlynn"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "public class Member {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    private final MemberName name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    private final MemberId id;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public Member(MemberName name, MemberId id, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        requireAllNonNull(name, tags);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public Member() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        this.name \u003d null;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        this.id \u003d null;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        this.tags.addAll(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    // TODO add multiple constructors so that users can add additional info later"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public MemberId getId() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        return id;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public MemberName getName() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     * Returns true if both tasks of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public boolean isSameMember(Member otherMember) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        if (otherMember \u003d\u003d this) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        // TODO change the logic to check for the identity fields of status and member"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        // basically the name cannot be the same, that\u0027s it"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        return otherMember !\u003d null"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "                \u0026\u0026 otherMember.getName().equals(getName());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        if (!(other instanceof Member)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        Member otherMember \u003d (Member) other;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        return otherMember.getName().equals(getName())"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "                \u0026\u0026 (otherMember.getId() \u003d\u003d getId())"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "                \u0026\u0026 otherMember.getTags().equals(getTags());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        return Objects.hash(name, tags);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "                .append(\"Member ID: \" + getId())"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ArunBeCoding": 6,
      "seahlynn": 104
    }
  },
  {
    "path": "src/main/java/seedu/address/model/member/MemberId.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "package seedu.address.model.member;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seahlynn"
        },
        "content": " * Represents a Member\u0027s ID in the address book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seahlynn"
        },
        "content": " * Guarantees: Field values are validated, immutable."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seahlynn"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "public class MemberId {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            \"Invalid member ID, please enter a alphanumeric code\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alpha}]*\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    private String displayId;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     * Enum constructor to give UI-friendly display names."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     * Cannot be called by other components."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     * @param displayId an alternate name for the member ID"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public MemberId(String displayId) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        this.displayId \u003d displayId;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "     * Default MemberId constructor for Json support"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public MemberId() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        displayId \u003d null;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public static boolean isValidId(String test) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public String getDisplayId() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        return displayId;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "                || (other instanceof MemberId // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "                \u0026\u0026 displayId.equals(((MemberId) other).displayId)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambhinav": 1,
      "ArunBeCoding": 3,
      "seahlynn": 39,
      "gabrielseow": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/model/member/MemberName.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "package seedu.address.model.member;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seahlynn"
        },
        "content": " * Represents a Member\u0027s name in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seahlynn"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seahlynn"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "public class MemberName {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public MemberName(String name) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        checkArgument(isValidMemberName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public MemberName() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        fullName \u003d null;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public static boolean isValidMemberName(String test) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "                || (other instanceof MemberName // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "                \u0026\u0026 fullName.equals(((MemberName) other).fullName)); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ArunBeCoding": 4,
      "seahlynn": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/model/member/MemberNameContainsKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "package seedu.address.model.member;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seahlynn"
        },
        "content": " * Tests that a {@code Mamber}\u0027s {@code MemberName} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seahlynn"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "public class MemberNameContainsKeywordsPredicate implements Predicate\u003cMember\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public MemberNameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public boolean test(Member member) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(member.getName().fullName, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "                || (other instanceof MemberNameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "                \u0026\u0026 keywords.equals(((MemberNameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seahlynn": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/model/member/UniqueMemberList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "package seedu.address.model.member;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.model.member.exceptions.DuplicateMemberException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.model.member.exceptions.MemberNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seahlynn"
        },
        "content": " * A list of members that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seahlynn"
        },
        "content": " * A task is considered unique by comparing using {@code Task#isSameTask(Task)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seahlynn"
        },
        "content": " * persons uses Task#isSameTask(Task) for equality so as to ensure that the task being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seahlynn"
        },
        "content": " * unique in terms of identity in the UniqueTaskList. However, the removal of a task uses Task#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seahlynn"
        },
        "content": " * as to ensure that the task with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seahlynn"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seahlynn"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seahlynn"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seahlynn"
        },
        "content": " * @see Member#isSameMember(Member)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seahlynn"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "public class UniqueMemberList implements Iterable\u003cMember\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    private final ObservableList\u003cMember\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    private final ObservableList\u003cMember\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     * Returns true if the list contains an equivalent task as the given argument."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public boolean contains(Member toCheck) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameMember);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * Returns true if the list contains an equivalent memId as the given argument."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public boolean containsId(MemberId memId) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        requireAllNonNull(memId);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        for (Member mem: internalList) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            if (mem.getId().equals(memId)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     * Adds a task to the list."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     * The task must not already exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public void add(Member toAdd) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            throw new DuplicateMemberException();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     * Replaces the task {@code target} in the list with {@code editedTask}."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     * The task identity of {@code editedTask} must not be the same as another existing task in the list."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public void setMember(Member target, Member editedMember) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        requireAllNonNull(target, editedMember);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        int index \u003d getIndexOf(target);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        if (!target.isSameMember(editedMember) \u0026\u0026 contains(editedMember)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            throw new DuplicateMemberException();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        internalList.set(index, editedMember);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     * Removes the equivalent task from the list."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     * The task must exist in the list."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public void remove(Member toRemove) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            throw new MemberNotFoundException();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public void setMembers(UniqueMemberList replacement) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     * Replaces the contents of this list with {@code tasks}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     * {@code tasks} must not contain duplicate tasks."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public void setMembers(List\u003cMember\u003e members) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        requireAllNonNull(members);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        if (!membersAreUnique(members)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            throw new DuplicateMemberException();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        internalList.setAll(members);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public int getIndexOf(Member target) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            throw new MemberNotFoundException();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        return index;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public ObservableList\u003cMember\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public Iterator\u003cMember\u003e iterator() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "                || (other instanceof UniqueMemberList // instanceof handles nulls"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueMemberList) other).internalList));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     * Returns true if {@code tasks} contains only unique tasks."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    private boolean membersAreUnique(List\u003cMember\u003e members) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        for (int i \u003d 0; i \u003c members.size() - 1; i++) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            for (int j \u003d i + 1; j \u003c members.size(); j++) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "                if (members.get(i).isSameMember(members.get(j))) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "                }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ArunBeCoding": 13,
      "seahlynn": 132,
      "gabrielseow": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/model/member/exceptions/DuplicateMemberException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "package seedu.address.model.member.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seahlynn"
        },
        "content": " * Signals that the operation will result in duplicate Member (Members are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seahlynn"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seahlynn"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "public class DuplicateMemberException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public DuplicateMemberException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        super(\"Operation would result in duplicate member\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seahlynn": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/member/exceptions/MemberNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "package seedu.address.model.member.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seahlynn"
        },
        "content": " * Signals that the operation is unable to find the specified member."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seahlynn"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "public class MemberNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seahlynn": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/settings/ClockFormat.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "package seedu.address.model.settings;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.commons.util.DateTimeUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ambhinav"
        },
        "content": " * Represents the current display format chosen by the user for task deadlines in +Work."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ambhinav"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "public enum ClockFormat {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    TWELVE(\"12HR\", DateTimeUtil.getDisplayFormatterTwelveHour()),"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    TWENTY_FOUR(\"24HR\", DateTimeUtil.getDisplayFormatterTwentyFourHour());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        \"Invalid clock format, please enter one of twelve or twenty_four.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    private String displayName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    private DateTimeFormatter formatter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * Enum constructor to give UI-friendly display names."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * Cannot be called by other components."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * @param displayName an alternate name for the theme"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    ClockFormat(String displayName, DateTimeFormatter formatter) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        this.displayName \u003d displayName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        this.formatter \u003d formatter;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    ClockFormat() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        this.displayName \u003d null;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public String getDisplayName() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        return this.displayName;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public DateTimeFormatter getDisplayFormatter() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        return this.formatter;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambhinav": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/model/settings/Theme.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "package seedu.address.model.settings;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ambhinav"
        },
        "content": " * Represents the current theme selected by the user for +Work."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ambhinav"
        },
        "content": " * Stores the required CSS Urls."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ambhinav"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "public enum Theme {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    DARK(Theme.class.getClassLoader().getResource(\"view/DarkTheme.css\").toExternalForm(),"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            Theme.class.getClassLoader().getResource(\"view/Extensions.css\").toExternalForm()),"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    LIGHT(Theme.class.getClassLoader().getResource(\"view/LightTheme.css\").toExternalForm(),"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            Theme.class.getClassLoader().getResource(\"view/ExtensionsLight.css\").toExternalForm());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            \"Invalid theme code, please enter one of light or dark.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    private String themeUrl;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    private String extensionUrl;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * Create a theme enum with the associated CSS files."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * @param themeUrl an alternate name for the theme"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    Theme(String themeUrl, String extensionUrl) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        this.themeUrl \u003d themeUrl;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        this.extensionUrl \u003d extensionUrl;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public String getExtensionUrl() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        return extensionUrl;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public String getThemeUrl() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        return themeUrl;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambhinav": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/model/statistics/SortingMethod.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "package seedu.address.model.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "public class SortingMethod {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            \"Invalid member ID, please enter a alphanumeric code\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    private String sortBy;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     * Enum constructor to give UI-friendly display names."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     * Cannot be called by other components."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     * @param sortBy an alternate name for the member ID"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public SortingMethod(String sortBy) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        this.sortBy \u003d sortBy;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public static boolean isValidSortingMethod(String test) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        return test.equals(\"task-status\") || test.equals(\"member-tasks\") || test.equals(\"member-claims\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "                || (other instanceof SortingMethod // instanceof handles nulls"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "                \u0026\u0026 sortBy.equals(((SortingMethod) other).sortBy)); // state check"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seahlynn": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/model/statistics/Statistics.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "package seedu.address.model.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.model.mapping.Mapping;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.model.member.Member;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.model.task.TaskStatus;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "public class Statistics {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    private final List\u003cMember\u003e members;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    private final List\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    //private final SortingMethod sortingMethod;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    private final List\u003cMapping\u003e mappings;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    private final HashMap\u003cTaskStatus, Integer\u003e portionTasksByStatus \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    private final HashMap\u003cMember, Integer\u003e portionMemberByTasks \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    //private final HashMap\u003cMember, Integer\u003e portionMemberByPrice;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    //NOTE SORTINGMETHOD IS NOT IN USE AS OF NOW"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public Statistics(List\u003cMember\u003e members, List\u003cTask\u003e tasks, List\u003cMapping\u003e mappings) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        requireAllNonNull(members, tasks, mappings);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        this.members \u003d members;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        this.mappings \u003d mappings;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     * Returns true if both tasks of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public boolean isSameStatistics(Statistics otherStats) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        if (otherStats \u003d\u003d this) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        // TODO change the logic to check for the identity fields of status and member"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        // basically the name cannot be the same, that\u0027s it"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        return members.equals(otherStats.getMemberList())"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "                \u0026\u0026 tasks.equals(otherStats.getTaskList())"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "                \u0026\u0026 mappings.equals(otherStats.getMappingList());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public List\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        return this.tasks;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public List\u003cMember\u003e getMemberList() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        return this.members;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public List\u003cMapping\u003e getMappingList() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        return this.mappings;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    //only do if the statistics object is unique"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public void doCalculations() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        for(Member member: members) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            int numTasks \u003d 0;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            for(Mapping mapping : mappings) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "//                if(mapping.hasMember(member)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "//                    numTasks++;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "//                }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            portionMemberByTasks.put(member, numTasks);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        int unbegun \u003d 0;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        int doing \u003d 0;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        int done \u003d 0;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        for(Task task: tasks) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            switch (task.getTaskStatus()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "                case UNBEGUN:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "                    unbegun++;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "                case DOING:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "                    doing++;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "                case DONE:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "                    done++;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "                    assert(false);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        portionTasksByStatus.put(TaskStatus.UNBEGUN, unbegun);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        portionTasksByStatus.put(TaskStatus.DOING, doing);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        portionTasksByStatus.put(TaskStatus.DONE, done);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public HashMap\u003cMember, Integer\u003e getPortionMembersByTasks() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        return portionMemberByTasks;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public HashMap\u003cTaskStatus, Integer\u003e getPortionTasksByStatus() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        return portionTasksByStatus;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        if (!(other instanceof Statistics)) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        Statistics otherStats \u003d (Statistics) other;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        return otherStats !\u003d null"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "                \u0026\u0026 tasks.equals(otherStats.getTaskList())"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "                \u0026\u0026 mappings.equals(otherStats.getMappingList())"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "                \u0026\u0026 members.equals(otherStats.getMemberList());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        return Objects.hash(tasks, members, mappings);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        builder.append(\"Statistics for Project Manager\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seahlynn": 139,
      "gabrielseow": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/statistics/exceptions/DuplicateStatisticsException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "package seedu.address.model.statistics.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "public class DuplicateStatisticsException extends RuntimeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public DuplicateStatisticsException() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        super(\"Operation would result in duplicate statistics\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seahlynn": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/statistics/exceptions/StatisticsNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "package seedu.address.model.statistics.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "public class StatisticsNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seahlynn": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/Tag.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Tag in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public Tag() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        tagName \u003d null;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ArunBeCoding": 4,
      "-": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/Name.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ambhinav"
        },
        "content": " * Represents a Task\u0027s name in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seahlynn"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidMemberName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        checkArgument(isValidMemberName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public Name() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        fullName \u003d null;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public static boolean isValidMemberName(String test) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambhinav": 2,
      "ArunBeCoding": 4,
      "seahlynn": 3,
      "-": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/NameContainsKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.model.member.Member;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ambhinav"
        },
        "content": " * Tests that a {@code Task}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cTask\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public boolean test(Task task) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(task.getName().fullName, keyword));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambhinav": 5,
      "seahlynn": 1,
      "-": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/Task.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import java.time.format.FormatStyle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ambhinav"
        },
        "content": " * Represents a Task in the address book."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    private final TaskStatus taskStatus;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    private LocalDateTime deadline \u003d null;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    private Instant timeStart \u003d null;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    private Instant timeEnd \u003d null;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public Task(Name name, TaskStatus taskStatus, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        requireAllNonNull(name, tags);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        this.taskStatus \u003d taskStatus;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    // for test purposes"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public Task(Name name, TaskStatus taskStatus, Set\u003cTag\u003e tags, LocalDateTime dateTime) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        requireAllNonNull(name, tags);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        this.taskStatus \u003d taskStatus;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        this.deadline \u003d dateTime;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public Task() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        name \u003d null;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        taskStatus \u003d null;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    // TODO add multiple constructors so that users can add aditional info later"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public void setDeadline(LocalDateTime deadline) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public boolean hasDeadline() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        return deadline !\u003d null;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public LocalDateTime getDeadline() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        return deadline;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public TaskStatus getTaskStatus() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        return taskStatus;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public Instant getTimeStart() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        return timeStart;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public void setTimeStart(Instant timeStart) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        this.timeStart \u003d timeStart;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public Instant getTimeEnd() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        return timeEnd;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public void setTimeEnd(Instant timeEnd) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        this.timeEnd \u003d timeEnd;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public String getTimeSpent() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        String timeTaken \u003d \" \";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        if (timeEnd \u003d\u003d null) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            timeTaken \u003d \" Task has yet to be completed \";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            Duration timeElasped \u003d Duration.between(timeStart, timeEnd);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            timeTaken \u003d timeElasped.toHours() + \" hours\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        return timeTaken;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * Returns true if both tasks of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public boolean isSameTask(Task otherTask) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        if (otherTask \u003d\u003d this) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        // TODO change the logic to check for the identity fields of status and member"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        // basically the name cannot be the same, that\u0027s it"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        return otherTask !\u003d null"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            \u0026\u0026 otherTask.getName().equals(getName());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        if (!(other instanceof Task)) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        Task otherTask \u003d (Task) other;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        if (otherTask.hasDeadline() !\u003d hasDeadline()) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        if (hasDeadline()) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            return otherTask.getName().equals(getName())"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                    \u0026\u0026 (otherTask.getTaskStatus() \u003d\u003d getTaskStatus())"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                    \u0026\u0026 otherTask.getDeadline().equals(getDeadline())"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                    \u0026\u0026 otherTask.getTags().equals(getTags());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            return otherTask.getName().equals(getName())"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                    \u0026\u0026 (otherTask.getTaskStatus() \u003d\u003d getTaskStatus())"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                    \u0026\u0026 otherTask.getTags().equals(getTags());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        return Objects.hash(name, tags);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                .append(\"Task status: \" + getTaskStatus().getDisplayName())"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        if (hasDeadline()) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            String formattedDeadline \u003d getDeadline().format(DateTimeFormatter"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                            .ofLocalizedDateTime(FormatStyle.MEDIUM)"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                            .withLocale(Locale.UK));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            builder.append(\" Deadline: \")"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                    .append(formattedDeadline);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambhinav": 33,
      "ArunBeCoding": 8,
      "seahlynn": 33,
      "-": 77,
      "gabrielseow": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/TaskStatus.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ambhinav"
        },
        "content": " * Represents a Task\u0027s progress status in the project dashboard."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ambhinav"
        },
        "content": " * Can be changed by the user to reflect change in Task\u0027s progress."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ambhinav"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "public enum TaskStatus {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    UNBEGUN(\"Not Started\"), DOING(\"In Progress\"), DONE(\"Completed\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            \"Invalid task status, please enter one of unbegun, doing or done\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    private String displayName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * Enum constructor to give UI-friendly display names."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * Cannot be called by other components."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * @param displayName an alternate name for the task status"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    TaskStatus(String displayName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        this.displayName \u003d displayName;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    TaskStatus() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        this.displayName \u003d null;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public String getDisplayName() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        return this.displayName;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambhinav": 30,
      "ArunBeCoding": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/UniqueTaskList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.task.exceptions.DuplicateTaskException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.task.exceptions.TaskNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * A list of persons that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ambhinav"
        },
        "content": " * A task is considered unique by comparing using {@code Task#isSameTask(Task)}. As such, adding and updating of"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ambhinav"
        },
        "content": " * persons uses Task#isSameTask(Task) for equality so as to ensure that the task being added or updated is"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ambhinav"
        },
        "content": " * unique in terms of identity in the UniqueTaskList. However, the removal of a task uses Task#equals(Object) so"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ambhinav"
        },
        "content": " * as to ensure that the task with exactly the same fields will be removed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ambhinav"
        },
        "content": " * @see Task#isSameTask(Task)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "public class UniqueTaskList implements Iterable\u003cTask\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    private final ObservableList\u003cTask\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    private final ObservableList\u003cTask\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * Returns true if the list contains an equivalent task as the given argument."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public boolean contains(Task toCheck) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameTask);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * Adds a task to the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * The task must not already exist in the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public void add(Task toAdd) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            throw new DuplicateTaskException();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * Replaces the task {@code target} in the list with {@code editedTask}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * The task identity of {@code editedTask} must not be the same as another existing task in the list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public void setTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        requireAllNonNull(target, editedTask);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        int index \u003d getIndexOf(target);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        if (!target.isSameTask(editedTask) \u0026\u0026 contains(editedTask)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            throw new DuplicateTaskException();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        internalList.set(index, editedTask);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * Removes the equivalent task from the list."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * The task must exist in the list."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public void remove(Task toRemove) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            throw new TaskNotFoundException();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * Clears the task list of all tasks."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public void clearAll() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        internalList.clear();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public Stream\u003cTask\u003e toStream() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        return internalList.stream();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public void setTasks(UniqueTaskList replacement) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * Replaces the contents of this list with {@code tasks}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * {@code tasks} must not contain duplicate tasks."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public void setTasks(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        requireAllNonNull(tasks);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        if (!tasksAreUnique(tasks)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            throw new DuplicateTaskException();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        internalList.setAll(tasks);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public int getIndexOf(Task target) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            throw new TaskNotFoundException();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        return index;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public ObservableList\u003cTask\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public Iterator\u003cTask\u003e iterator() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                || (other instanceof UniqueTaskList // instanceof handles nulls"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueTaskList) other).internalList));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * Returns true if {@code tasks} contains only unique tasks."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    private boolean tasksAreUnique(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size() - 1; i++) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            for (int j \u003d i + 1; j \u003c tasks.size(); j++) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                if (tasks.get(i).isSameTask(tasks.get(j))) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambhinav": 58,
      "-": 86,
      "gabrielseow": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/exceptions/DuplicateTaskException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "package seedu.address.model.task.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that the operation will result in duplicate Persons (Persons are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "public class DuplicateTaskException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public DuplicateTaskException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        super(\"Operation would result in duplicate tasks\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambhinav": 4,
      "-": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/exceptions/TaskNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "package seedu.address.model.task.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ambhinav"
        },
        "content": " * Signals that the operation is unable to find the specified task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "public class TaskNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "ambhinav": 3,
      "-": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleMemberDataUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.model.ProjectDashboard;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.model.ReadOnlyProjectDashboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.model.member.Member;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.model.member.MemberId;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.model.member.MemberName;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": " * provides a sample member data"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "public class SampleMemberDataUtil {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public static Member[] getSampleMembers() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        return new Member[] {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            new Member(new MemberName(\"Gabriel Seow\"), new MemberId(\"GS\"), getTagSet(\"Cheif Programmer\")),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            new Member(new MemberName(\"Abhinav\"), new MemberId(\"AB\"), getTagSet(\"Programmer, UI Designer\")),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            new Member(new MemberName(\"Arun\"), new MemberId(\"AR\"), getTagSet(\"Programmer\")),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            new Member(new MemberName(\"Seah Lynn\"), new MemberId(\"SL\"), getTagSet(\"Programmer, Pitcher\")),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            new Member(new MemberName(\"Elsa Koh\"), new MemberId(\"EK\"), getTagSet(\"Programmer, Pitcher\")),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            new Member(new MemberName(\"John Doe\"), new MemberId(\"JD\"), getTagSet(\"Helps out when he cans\"))"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        };"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public static ReadOnlyProjectDashboard getSampleProjectDashboard() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        ProjectDashboard sampleAb \u003d new ProjectDashboard();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        for (Member sampleMember : getSampleMembers()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            sampleAb.addMember(sampleMember);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ArunBeCoding": 3,
      "seahlynn": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleTaskDataUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.ProjectDashboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.ReadOnlyProjectDashboard;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import seedu.address.model.inventory.InvName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import seedu.address.model.inventory.Inventory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import seedu.address.model.inventory.Price;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import seedu.address.model.member.Member;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import seedu.address.model.member.MemberId;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import seedu.address.model.member.MemberName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.task.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.task.TaskStatus;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ambhinav"
        },
        "content": " * Contains utility methods for populating {@code ProjectDashboard} with sample data."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "public class SampleTaskDataUtil {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public static Task[] getSampleTasks() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        return new Task[] {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            new Task(new Name(\"Review Budget\"), TaskStatus.UNBEGUN, getTagSet(\"Finance\"),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                LocalDateTime.now().plusWeeks(1)),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            new Task(new Name(\"Increase Funding\"), TaskStatus.DOING,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                getTagSet(\"Finance\", \"Urgent\"), LocalDateTime.now().plusWeeks(1)),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            new Task(new Name(\"Settle Claims\"), TaskStatus.DOING, getTagSet(\"Finance\")),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            new Task(new Name(\"Update Website\"), TaskStatus.DONE, getTagSet(\"Branding\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                LocalDateTime.now().plusWeeks(1)),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            new Task(new Name(\"Shirts for Freshman Open Day\"), TaskStatus.DOING, getTagSet(\"Logistics\")),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            new Task(new Name(\"Design Poster\"), TaskStatus.UNBEGUN,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                getTagSet(\"Branding\"), LocalDateTime.now().plusWeeks(7))"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public static Member[] getSampleMembers() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        return new Member[] {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            new Member(new MemberName(\"Gabriel Seow\"), new MemberId(\"GS\"), getTagSet(\"Programmer\")),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            new Member(new MemberName(\"Abhinav\"), new MemberId(\"AB\"), getTagSet(\"UIDesigner\")),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            new Member(new MemberName(\"Arun\"), new MemberId(\"AR\"), getTagSet(\"Programmer\")),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            new Member(new MemberName(\"Seah Lynn\"), new MemberId(\"SL\"), getTagSet(\"Pitcher\")),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            new Member(new MemberName(\"Elsa Koh\"), new MemberId(\"EK\"), getTagSet(\"Pitcher\")),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            new Member(new MemberName(\"John Doe\"), new MemberId(\"JD\"), getTagSet(\"Helper\"))"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        };"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public static Inventory[] getSampleInventory() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        return new Inventory[] {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            new Inventory(new InvName(\"Toy\"), new Price(8.90)),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            new Inventory(new InvName(\"Bench\"), new Price(59.90)),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            new Inventory(new InvName(\"Chairs\")),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            new Inventory(new InvName(\"Bag\"), new Price(50.0)),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            new Inventory(new InvName(\"Condoms\"), new Price(17.90)),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            new Inventory(new InvName(\"Laptop\"), new Price(1111.11)),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        };"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public static ReadOnlyProjectDashboard getSampleProjectDashboard() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        ProjectDashboard samplePd \u003d new ProjectDashboard();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        for (Task sampleTask : getSampleTasks()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            samplePd.addTask(sampleTask);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        for (Member sampleMember : getSampleMembers()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            samplePd.addMember(sampleMember);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        for (Inventory sampleInventory : getSampleInventory()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            samplePd.addInventory(sampleInventory);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        return samplePd;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambhinav": 28,
      "ArunBeCoding": 32,
      "-": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedInvMemMapping.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import seedu.address.model.mapping.InvMemMapping;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": " * Jackson-friendly version of {@link Task}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "class JsonAdaptedInvMemMapping {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Mapping\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    private final int memberIndex;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    private final int inventoryIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "     * Constructs a {@code JsonAdaptedTask} with the given task details."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public JsonAdaptedInvMemMapping(@JsonProperty(\"member\") int memberIndex,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                              @JsonProperty(\"inventory\") int inventoryIndex){"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        this.memberIndex \u003d memberIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        this.inventoryIndex \u003d inventoryIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "     * Converts a given {@code Task} into this class for Jackson use."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public JsonAdaptedInvMemMapping(InvMemMapping source) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        memberIndex \u003d source.getMemberIndex();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        inventoryIndex \u003d source.getInventoryIndex();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "     * Converts this Jackson-friendly adapted task object into the model\u0027s {@code Task} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted task."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public InvMemMapping toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        return new InvMemMapping(inventoryIndex, memberIndex);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielseow": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedInvTasMapping.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import seedu.address.model.mapping.InvTasMapping;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": " * Jackson-friendly version of {@link Task}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "class JsonAdaptedInvTasMapping {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Mapping\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    private final int taskIndex;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    private final int inventoryIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "     * Constructs a {@code JsonAdaptedTask} with the given task details."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public JsonAdaptedInvTasMapping(@JsonProperty(\"task\") int taskIndex,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                              @JsonProperty(\"inventory\") int inventoryIndex){"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        this.taskIndex \u003d taskIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        this.inventoryIndex \u003d inventoryIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "     * Converts a given {@code Task} into this class for Jackson use."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public JsonAdaptedInvTasMapping(InvTasMapping source) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        taskIndex \u003d source.getTaskIndex();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        inventoryIndex \u003d source.getInventoryIndex();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "     * Converts this Jackson-friendly adapted task object into the model\u0027s {@code Task} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted task."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public InvTasMapping toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        return new InvTasMapping(inventoryIndex, taskIndex);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielseow": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedInventory.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import seedu.address.model.inventory.InvName;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import seedu.address.model.inventory.Inventory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import seedu.address.model.inventory.Price;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "//import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": " * Jackson-friendly version of {@link Inventory}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "public class JsonAdaptedInventory {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Inventory\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    //private final Task task;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    private final InvName name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /*private final memIndex memID;*/"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    private final Price price;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * Constructs a {@code JsonAdaptedTask} with the given task details."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public JsonAdaptedInventory(@JsonProperty(\"name\") InvName name/*, @JsonProperty(\"task\") Task task*/,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                           @JsonProperty(\"price\") Price price) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        //this.task \u003d task;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        this.price \u003d price;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * Converts a given {@code Inventory} into this class for Jackson use."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public JsonAdaptedInventory(Inventory source) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        name \u003d source.getName();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        //task \u003d source.getTask();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        price \u003d source.getPrice();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * Converts this Jackson-friendly adapted inventory object into the model\u0027s {@code Inventory} object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted inventory."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public Inventory toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"InvName\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        if (!InvName.isValidName(name.toString())) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            throw new IllegalValueException(InvName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        if (price \u003d\u003d null) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                    \"price\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        if (!Price.isValidName(price.getPrice())) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            throw new IllegalValueException(Price.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        final InvName modelName \u003d new InvName(name.toString());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        //final Task modelTask \u003d new Task(task.getName(), task.getTaskStatus(), task.getTags());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        final Price modelPrice \u003d new Price(price.getPrice());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        return new Inventory(/*modelTask,*/ modelName, modelPrice);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ArunBeCoding": 70
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedMember.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import seedu.address.model.member.Member;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import seedu.address.model.member.MemberId;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import seedu.address.model.member.MemberName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": " * Jackson-friendly version of {@link Member}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "class JsonAdaptedMember {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Member\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    //private final MemberId id;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    private final String id;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "     * Constructs a {@code JsonAdaptedMember} with the given member details."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public JsonAdaptedMember(@JsonProperty(\"name\") String name, @JsonProperty(\"id\") String id,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                           @JsonProperty(\"tags\") List\u003cJsonAdaptedTag\u003e tags) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        if (tags !\u003d null) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            this.tags.addAll(tags);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * Converts a given {@code Mmeber} into this class for Jackson use."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public JsonAdaptedMember(Member source) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        id \u003d source.getId().getDisplayId();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        tags.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * Converts this Jackson-friendly adapted task object into the model\u0027s {@code Member} object."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted task."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public Member toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        final List\u003cTag\u003e memberTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        for (JsonAdaptedTag tag : tags) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            memberTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, MemberName.class.getSimpleName()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        if (id \u003d\u003d null) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                    MemberId.class.getSimpleName()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "elsakoh"
        },
        "content": "        if (!MemberName.isValidMemberName(name.toString())) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            throw new IllegalValueException(MemberName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        final MemberName modelName \u003d new MemberName(name);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        final MemberId modelId \u003d new MemberId(id);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(memberTags);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        return new Member(modelName, modelId, modelTags);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ArunBeCoding": 73,
      "elsakoh": 1,
      "gabrielseow": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedTasMemMapping.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import seedu.address.model.mapping.TasMemMapping;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": " * Jackson-friendly version of {@link Task}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "class JsonAdaptedTasMemMapping {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Mapping\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    private final int taskIndex;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    private final int memberIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "     * Constructs a {@code JsonAdaptedTask} with the given task details."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public JsonAdaptedTasMemMapping(@JsonProperty(\"task\") int taskIndex,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                              @JsonProperty(\"member\") int memberIndex){"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        this.taskIndex \u003d taskIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        this.memberIndex \u003d memberIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "     * Converts a given {@code Task} into this class for Jackson use."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public JsonAdaptedTasMemMapping(TasMemMapping source) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        taskIndex \u003d source.getTaskIndex();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        memberIndex \u003d source.getMemberIndex();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "     * Converts this Jackson-friendly adapted task object into the model\u0027s {@code Task} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted task."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public TasMemMapping toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        return new TasMemMapping(taskIndex, memberIndex);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielseow": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedTask.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.task.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.task.TaskStatus;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ambhinav"
        },
        "content": " * Jackson-friendly version of {@link Task}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "class JsonAdaptedTask {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Task\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    private final TaskStatus taskStatus;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    private String deadline \u003d null;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * Constructs a {@code JsonAdaptedTask} with the given task details."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public JsonAdaptedTask(@JsonProperty(\"name\") String name, @JsonProperty(\"status\") TaskStatus taskStatus,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                           @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                           @JsonProperty(\"deadline\") String deadline) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        this.taskStatus \u003d taskStatus;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "//    public JsonAdaptedTask(@JsonProperty(\"name\") String name, @JsonProperty(\"status\") TaskStatus taskStatus,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "//                           @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "//        this.name \u003d name;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "//        this.taskStatus \u003d taskStatus;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "//        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "//            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * Converts a given {@code Task} into this class for Jackson use."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public JsonAdaptedTask(Task source) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        taskStatus \u003d source.getTaskStatus();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        if (source.hasDeadline()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            deadline \u003d source.getDeadline().format(DateTimeFormatter.ISO_DATE_TIME);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * Converts this Jackson-friendly adapted task object into the model\u0027s {@code Task} object."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted task."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public Task toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            personTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        if (taskStatus \u003d\u003d null) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                    TaskStatus.class.getSimpleName()));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        if (!Name.isValidMemberName(name)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        final TaskStatus modelTaskStatus \u003d TaskStatus.valueOf(taskStatus.name());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        final Task modelTask \u003d new Task(modelName, modelTaskStatus, modelTags);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        if (deadline !\u003d null) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            final LocalDateTime modelDeadline \u003d LocalDateTime.parse(deadline);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            modelTask.setDeadline(modelDeadline);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        return modelTask;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambhinav": 32,
      "ArunBeCoding": 1,
      "seahlynn": 2,
      "-": 55,
      "gabrielseow": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonProjectDashboardStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.ReadOnlyProjectDashboard;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ambhinav"
        },
        "content": " * A class to access ProjectDashboard data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "public class JsonProjectDashboardStorage implements ProjectDashboardStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonProjectDashboardStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public JsonProjectDashboardStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public Path getProjectDashboardFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public Optional\u003cReadOnlyProjectDashboard\u003e readProjectDashBoard() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        return readProjectDashBoard(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * Similar to {@link #readProjectDashBoard()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public Optional\u003cReadOnlyProjectDashboard\u003e readProjectDashBoard(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        Optional\u003cJsonSerializableProjectDashboard\u003e jsonAddressBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                filePath, JsonSerializableProjectDashboard.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!jsonAddressBook.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.of(jsonAddressBook.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public void saveProjectDashboard(ReadOnlyProjectDashboard projectDashboard) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        saveProjectDashboard(projectDashboard, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * Similar to {@link #saveProjectDashboard(ReadOnlyProjectDashboard)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public void saveProjectDashboard(ReadOnlyProjectDashboard projectDashboard, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        requireNonNull(projectDashboard);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableProjectDashboard(projectDashboard), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambhinav": 18,
      "-": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableProjectDashboard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.ProjectDashboard;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.ReadOnlyProjectDashboard;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import seedu.address.model.inventory.Inventory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import seedu.address.model.member.Member;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import seedu.address.model.mapping.InvTasMapping;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import seedu.address.model.mapping.InvMemMapping;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import seedu.address.model.mapping.TasMemMapping;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ambhinav"
        },
        "content": " * An Immutable ProjectDashboard that is serializable to JSON format."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "@JsonRootName(value \u003d \"projectdashboard\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "class JsonSerializableProjectDashboard {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TASKS \u003d \"Tasks list contains duplicate task(s).\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_INVENTORIES \u003d \"Inventory list contains duplicate inventory(s).\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_MEMBERS \u003d \"Members list contains duplicate member(s).\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_MAPPINGS \u003d \"Mappings list contains duplicate mapping(s).\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    private final List\u003cJsonAdaptedTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    private final List\u003cJsonAdaptedMember\u003e members \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    private final List\u003cJsonAdaptedInventory\u003e inventory \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    private final List\u003cJsonAdaptedInvMemMapping\u003e invMemMappings \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    private final List\u003cJsonAdaptedInvTasMapping\u003e invTasMappings \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    private final List\u003cJsonAdaptedTasMemMapping\u003e tasMemMappings \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * Constructs a {@code JsonSerializableProjectDashboard} with the given task."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public JsonSerializableProjectDashboard(@JsonProperty(\"tasks\") List\u003cJsonAdaptedTask\u003e tasks,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                                            @JsonProperty(\"members\") List\u003cJsonAdaptedMember\u003e members,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                                            @JsonProperty(\"invMemMappings\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                                                        List\u003cJsonAdaptedInvMemMapping\u003e invMemMappings,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                                            @JsonProperty(\"invTasMappings\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                                                        List\u003cJsonAdaptedInvTasMapping\u003e invTasMappings,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                                            @JsonProperty(\"tasMemMappings\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                                                        List\u003cJsonAdaptedTasMemMapping\u003e tasMemMappings,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                                            @JsonProperty(\"inventory\") List\u003cJsonAdaptedInventory\u003e inventory) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        this.tasks.addAll(tasks);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        this.inventory.addAll(inventory);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        this.members.addAll(members);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        this.invMemMappings.addAll(invMemMappings);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        this.invTasMappings.addAll(invTasMappings);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        this.tasMemMappings.addAll(tasMemMappings);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * Converts a given {@code ReadOnlyProjectDashboard} into this class for Jackson use."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableProjectDashboard}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public JsonSerializableProjectDashboard(ReadOnlyProjectDashboard source) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        tasks.addAll(source.getTaskList().stream().map(JsonAdaptedTask::new)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        members.addAll(source.getMemberList().stream().map(JsonAdaptedMember::new)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        inventory.addAll(source.getInventoryList().stream().map(JsonAdaptedInventory::new)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        invMemMappings.addAll(source.getInvMemMappingList().stream().map(JsonAdaptedInvMemMapping::new)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        invTasMappings.addAll(source.getInvTasMappingList().stream().map(JsonAdaptedInvTasMapping::new)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        tasMemMappings.addAll(source.getTasMemMappingList().stream().map(JsonAdaptedTasMemMapping::new)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * Converts this project information into the model\u0027s {@code ProjectDashboard} object."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public ProjectDashboard toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        ProjectDashboard projectDashboard \u003d new ProjectDashboard();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        for (JsonAdaptedTask jsonAdaptedTask : tasks) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            Task task \u003d jsonAdaptedTask.toModelType();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            if (projectDashboard.hasTask(task)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_TASKS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            projectDashboard.addTask(task);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        for (JsonAdaptedInventory jsonAdaptedInv : inventory) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            Inventory inventory \u003d jsonAdaptedInv.toModelType();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            if (projectDashboard.hasInventory(inventory)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_INVENTORIES);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            projectDashboard.addInventory(inventory);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        for (JsonAdaptedMember jsonAdaptedMem: members) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            Member member \u003d jsonAdaptedMem.toModelType();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            if (projectDashboard.hasMember(member)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_MEMBERS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            projectDashboard.addMember(member);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        for (JsonAdaptedInvMemMapping jsonAdaptedInvMemMapping : invMemMappings) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            InvMemMapping invMemMapping \u003d jsonAdaptedInvMemMapping.toModelType();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            if (projectDashboard.hasMapping(invMemMapping)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_MAPPINGS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            projectDashboard.addMapping(invMemMapping);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        for (JsonAdaptedInvTasMapping jsonAdaptedInvTasMapping : invTasMappings) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            InvTasMapping invTasMapping \u003d jsonAdaptedInvTasMapping.toModelType();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            if (projectDashboard.hasMapping(invTasMapping)) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_MAPPINGS);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            projectDashboard.addMapping(invTasMapping);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        for (JsonAdaptedTasMemMapping jsonAdaptedTasMemMapping : tasMemMappings) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            TasMemMapping tasMemMapping \u003d jsonAdaptedTasMemMapping.toModelType();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            if (projectDashboard.hasMapping(tasMemMapping)) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_MAPPINGS);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            projectDashboard.addMapping(tasMemMapping);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        return projectDashboard;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambhinav": 22,
      "ArunBeCoding": 31,
      "-": 35,
      "gabrielseow": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonUserSettingsStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.ReadOnlyUserSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.UserSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ambhinav"
        },
        "content": " * A class to access user settings stored in the hard disk as a json file."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ambhinav"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "public class JsonUserSettingsStorage implements UserSettingsStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUserSettingsStorage.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public JsonUserSettingsStorage(Path filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * Returns the file path of the UserSettings data file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public Path getUserSettingsFilePath() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * Returns UserSettings data from storage."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * @throws IOException             if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public Optional\u003cUserSettings\u003e readUserSettings() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        return readUserSettings(filePath);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * @param filePath location of data. Cannot be null."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * @see #getUserSettingsFilePath()."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public Optional\u003cUserSettings\u003e readUserSettings(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        return JsonUtil.readJsonFile(filePath, UserSettings.class);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * Saves the given {@link ReadOnlyUserSettings} to the storage."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * @param userSettings cannot be null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public void saveUserSettings(ReadOnlyUserSettings userSettings) throws IOException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        saveUserSettings(userSettings, filePath);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * Saves the given {@link ReadOnlyUserSettings} to the storage."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * @param userSettings cannot be null."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * @throws IOException if there was any problem writing to file."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public void saveUserSettings(ReadOnlyUserSettings userSettings, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        requireAllNonNull(userSettings, filePath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        JsonUtil.saveJsonFile(userSettings, filePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambhinav": 86
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/ProjectDashboardStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.ProjectDashboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.ReadOnlyProjectDashboard;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ambhinav"
        },
        "content": " * Represents a storage for {@link ProjectDashboard}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "public interface ProjectDashboardStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    Path getProjectDashboardFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * Returns ProjectDashboard data as a {@link ReadOnlyProjectDashboard}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    Optional\u003cReadOnlyProjectDashboard\u003e readProjectDashBoard() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * @see #getProjectDashboardFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    Optional\u003cReadOnlyProjectDashboard\u003e readProjectDashBoard(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * Saves the given {@link ReadOnlyProjectDashboard} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * @param projectDashboard cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    void saveProjectDashboard(ReadOnlyProjectDashboard projectDashboard) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * @see #saveProjectDashboard(ReadOnlyProjectDashboard)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    void saveProjectDashboard(ReadOnlyProjectDashboard projectDashboard, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambhinav": 14,
      "-": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.ReadOnlyProjectDashboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.ReadOnlyUserSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.UserSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "public interface Storage extends ProjectDashboardStorage, UserPrefsStorage, UserSettingsStorage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    Path getProjectDashboardFilePath();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    Optional\u003cReadOnlyProjectDashboard\u003e readProjectDashBoard() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    void saveProjectDashboard(ReadOnlyProjectDashboard projectDashboard) throws IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    Path getUserSettingsFilePath();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    Optional\u003cUserSettings\u003e readUserSettings() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    Optional\u003cUserSettings\u003e readUserSettings(Path filePath) throws DataConversionException;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    void saveUserSettings(ReadOnlyUserSettings userSettings) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    void saveUserSettings(ReadOnlyUserSettings userSettings, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambhinav": 21,
      "-": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.ReadOnlyProjectDashboard;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.ReadOnlyUserSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.UserSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ambhinav"
        },
        "content": " * Manages storage of ProjectDashboard data in local storage."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    private ProjectDashboardStorage projectDashboardStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    private UserSettingsStorage userSettingsStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public StorageManager(ProjectDashboardStorage projectDashboardStorage, UserPrefsStorage userPrefsStorage,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                          UserSettingsStorage userSettingsStorage) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        this.projectDashboardStorage \u003d projectDashboardStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        this.userSettingsStorage \u003d userSettingsStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ProjectDashboard methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public Path getProjectDashboardFilePath() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        return projectDashboardStorage.getProjectDashboardFilePath();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public Optional\u003cReadOnlyProjectDashboard\u003e readProjectDashBoard() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        return readProjectDashBoard(projectDashboardStorage.getProjectDashboardFilePath());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public Optional\u003cReadOnlyProjectDashboard\u003e readProjectDashBoard(Path filePath)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        return projectDashboardStorage.readProjectDashBoard(filePath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public void saveProjectDashboard(ReadOnlyProjectDashboard projectDashboard) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        saveProjectDashboard(projectDashboard, projectDashboardStorage.getProjectDashboardFilePath());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public void saveProjectDashboard(ReadOnlyProjectDashboard projectDashboard, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        projectDashboardStorage.saveProjectDashboard(projectDashboard, filePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserSettings methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public Path getUserSettingsFilePath() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        return userSettingsStorage.getUserSettingsFilePath();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public Optional\u003cUserSettings\u003e readUserSettings() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        return readUserSettings(userSettingsStorage.getUserSettingsFilePath());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public Optional\u003cUserSettings\u003e readUserSettings(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        return userSettingsStorage.readUserSettings(filePath);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public void saveUserSettings(ReadOnlyUserSettings userSettings) throws IOException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        saveUserSettings(userSettings, userSettingsStorage.getUserSettingsFilePath());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public void saveUserSettings(ReadOnlyUserSettings userSettings, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        userSettingsStorage.saveUserSettings(userSettings, filePath);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambhinav": 48,
      "-": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/UserSettingsStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.ReadOnlyUserSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.UserSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ambhinav"
        },
        "content": " * Represents a storage for {@link seedu.address.model.UserSettings}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ambhinav"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "public interface UserSettingsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * Returns the file path of the UserSettings data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    Path getUserSettingsFilePath();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * Returns UserSettings data from storage."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    Optional\u003cUserSettings\u003e readUserSettings() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * @see #getUserSettingsFilePath()."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    Optional\u003cUserSettings\u003e readUserSettings(Path filePath) throws DataConversionException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * Saves the given {@link seedu.address.model.ReadOnlyUserSettings} to the storage."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * @param userSettings cannot be null."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    void saveUserSettings(ReadOnlyUserSettings userSettings) throws IOException;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    void saveUserSettings(ReadOnlyUserSettings userSettings, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambhinav": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.settings.Theme;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    // Interface between main stage, user view\u0027s controller and the command parser (which switches the user view using"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    // it\u0027s controller!"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    private UserViewMain userViewMain;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    private UserViewUpdate userViewUpdate;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    // static Ui parts"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    private Scene scene;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    private StackPane userNavigableView;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        setDefaultTheme(logic.getCurrentTheme());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        userViewMain \u003d new UserViewMain(logic);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        userViewUpdate \u003d new UserViewUpdate(userNavigableView, userViewMain);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * By default, the project dashboard is shown"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getProjectDashboardFilePath());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * Sets the default theme of +Work based on {@code defaultTheme}."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    private void setDefaultTheme(Theme defaultTheme) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        requireNonNull(defaultTheme);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        scene.getStylesheets().clear();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        scene.getStylesheets().add(defaultTheme.getThemeUrl());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        scene.getStylesheets().add(defaultTheme.getExtensionUrl());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * Updates user view upon execution of command."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            if (commandResult.isThemeChanged()) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                setDefaultTheme(logic.getCurrentTheme());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            userViewUpdate.parseUserCommand(commandText);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambhinav": 38,
      "-": 183
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UserViewController.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import javafx.scene.layout.Pane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ambhinav"
        },
        "content": " * Controller class for the user views."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ambhinav"
        },
        "content": " *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ambhinav"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "public class UserViewController {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    /** Holder of a switchable user view. */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    private Pane userViewHolder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public Pane getCurrentView() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        return userViewHolder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * Replaces the view displayed to the user with a new one."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * @param uiPart the UiPart to be swapped in."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public void setUserView(UiPart\u003cRegion\u003e uiPart) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        userViewHolder.getChildren().clear(); // clear the view"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        userViewHolder.getChildren().add(uiPart.getRoot());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambhinav": 31,
      "ArunBeCoding": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UserViewMain.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import javafx.scene.layout.Pane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ambhinav"
        },
        "content": " * Sets up the controller {@code UserViewController} to dynamically change user views."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ambhinav"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "public class UserViewMain {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    private static final String FXML \u003d \"UserViewMain.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    private UserViewController userViewController;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    private UserViewNavigator userViewNavigator;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public UserViewMain(Logic logic) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        FXMLLoader fxmlLoader \u003d new FXMLLoader(MainApp.class.getResource(\"/view/\" + FXML));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        userViewController \u003d fxmlLoader.getController();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assert userViewController !\u003d null;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        userViewNavigator \u003d new UserViewNavigator();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        UserViewNavigator.setMainController(userViewController);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * Shows the viewer the dashboard."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * @return the dashboard layout"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public Pane loadDashboard() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        userViewNavigator.loadDashboard(logic);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        return userViewController.getCurrentView();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * Shows the user the list of tasks."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * @return the task list pane"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public Pane loadTasks() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        userViewNavigator.loadTaskListView(logic);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        return userViewController.getCurrentView();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * Shows the user the list of members."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * @return the task list pane"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public Pane loadMembers() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        userViewNavigator.loadMemberListView(logic);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        return userViewController.getCurrentView();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public Pane loadMemberStats() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        userViewNavigator.loadMemberStatsView(logic);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        return userViewController.getCurrentView();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * Shows the user the list of inventories."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * @return the task list pane"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public Pane loadInventories() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        userViewNavigator.loadInventoriesListView(logic);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        return userViewController.getCurrentView();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public Pane loadTaskStats() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        userViewNavigator.loadTaskStatsView(logic);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        return userViewController.getCurrentView();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * Shows the user the current settings."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * @return the settings view"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public Pane loadSettingsView() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        userViewNavigator.loadSettingsView(logic);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        return userViewController.getCurrentView();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambhinav": 79,
      "ArunBeCoding": 9,
      "seahlynn": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UserViewNavigator.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.ui.views.MemberListPanel;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import seedu.address.ui.views.InventoryListPanel;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.ui.views.ProjectDashboardView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.ui.views.MemberStatisticsView;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.ui.views.SettingsView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.ui.views.TaskListPanel;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.ui.views.TaskStatisticsView;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ambhinav"
        },
        "content": " * Utility class for controlling navigation between user views."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ambhinav"
        },
        "content": " * Stores the different views here."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ambhinav"
        },
        "content": " *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ambhinav"
        },
        "content": " * Main access of the navigator is from {@code UserViewMain}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ambhinav"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "public class UserViewNavigator {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    /** The main application layout controller. */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    private static UserViewController userViewController;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    /** The views to switch between **/"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    private ProjectDashboardView projectDashboardView;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    private TaskListPanel taskListPanel;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    private InventoryListPanel inventoryListPanel;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    private MemberStatisticsView memberStatsView;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    private TaskStatisticsView taskStatsView;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    private SettingsView settingsView;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * Stores the main controller for later use in navigation tasks."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * @param userViewController the dynamic application layout controller."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public static void setMainController(UserViewController userViewController) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        UserViewNavigator.userViewController \u003d userViewController;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * Relays to the controller to swap current user view with dashboard."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * @param logic to access the task data"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public void loadDashboard(Logic logic) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        ProjectDashboardView projectDashboardView \u003d new ProjectDashboardView(logic.getFilteredTaskListNotStarted(),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                logic.getFilteredTaskListDoing(), logic.getFilteredTaskListDone(),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                logic.getFilteredTaskListByDeadline());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        userViewController.setUserView(projectDashboardView);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * Relays to controller to swap current user view with task list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * @param logic to access task data"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public void loadTaskListView(Logic logic) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        TaskListPanel taskListPanel \u003d new TaskListPanel(logic.getFilteredTaskList());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        userViewController.setUserView(taskListPanel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    // TODO get filtered member list from logic interface"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * Relays to controller to swap current user view with member list."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * @param logic to access task data"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public void loadMemberListView(Logic logic) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        MemberListPanel memberListPanel \u003d new MemberListPanel(logic.getProjectDashboard().getMemberList());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        userViewController.setUserView(memberListPanel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * Relays to controller to swap current user view with inventory list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * @param logic to access inventory data"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public void loadInventoriesListView(Logic logic) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        inventoryListPanel \u003d new InventoryListPanel(logic.getFilteredInventoryList());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        userViewController.setUserView(inventoryListPanel);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * Relays to controller to swap current user view with member list."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     * @param logic to access task data"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public void loadMemberStatsView(Logic logic) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        memberStatsView \u003d new MemberStatisticsView(logic.getStatistics(), logic.getFilteredMemberList());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        userViewController.setUserView(memberStatsView);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     * Relays to controller to swap current user view with task list."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     * @param logic to access task data"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public void loadTaskStatsView(Logic logic) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        taskStatsView \u003d new TaskStatisticsView(logic.getStatistics(), logic.getFilteredTaskList());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        userViewController.setUserView(taskStatsView);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * Relays to the controller to swap current user view with settings view."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * @param logic to access settings data"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public void loadSettingsView(Logic logic) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        settingsView \u003d new SettingsView(logic.getCurrentTheme(), logic.getClockFormat());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        userViewController.setUserView(settingsView);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambhinav": 75,
      "ArunBeCoding": 11,
      "seahlynn": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UserViewUpdate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import javafx.scene.layout.Pane;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ambhinav"
        },
        "content": " * Communicates with {@code UserViewManager} to update the view based on user\u0027s command."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ambhinav"
        },
        "content": " * Updates each time a command is executed to refresh data."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ambhinav"
        },
        "content": " *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ambhinav"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "public class UserViewUpdate {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    private Pane paneToRender;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    private UserViewMain userViewMain;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public UserViewUpdate(Pane paneToRender, UserViewMain userViewMain) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        this.paneToRender \u003d paneToRender;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        this.userViewMain \u003d userViewMain;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        paneToRender.getChildren().add(userViewMain.loadDashboard());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * Retrieves user command\u0027s preamble and retrieves the respective pane."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * Clears the current view first and switches to the desired view."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * If a command that does not require a view to be switched is entered,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * the view persists."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * @param commandText raw command of user"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public void parseUserCommand(String commandText) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        String preamble \u003d commandText.split(\" \")[0];"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assert !(preamble.isEmpty());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        paneToRender.getChildren().clear();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        switch(preamble) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        case \"add-task\":"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        case \"list-tasks\":"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        case \"delete-task\":"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        case \"edit-task\":"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        case \"set-deadline\":"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        case \"doing-task\":"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        case \"done-task\":"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        case \"find-task\":"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            paneToRender.getChildren().add(userViewMain.loadTasks());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        case \"add-member\":"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        case \"find-member\":"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        case \"remove-member\":"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        case \"list-members\":"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            paneToRender.getChildren().add(userViewMain.loadMembers());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        case \"delete-inv\":"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        case \"edit-inv\":"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        case \"add-inv\":"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        case \"list-inv\":"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            paneToRender.getChildren().add(userViewMain.loadInventories());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        case \"assign-member\":"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        case \"fire-member\":"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        case \"get-member-stats\":"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "           paneToRender.getChildren().add(userViewMain.loadMemberStats());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "           break;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        case \"assign-task\":"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        case \"fire-task\":"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        case \"get-task-stats\":"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            paneToRender.getChildren().add(userViewMain.loadTaskStats());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        case \"settings\":"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        case \"theme\":"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        case \"clock\":"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            paneToRender.getChildren().add(userViewMain.loadSettingsView());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        case \"clear\":"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        case \"home\":"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            paneToRender.getChildren().add(userViewMain.loadDashboard());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            // show nothing (only exit has no case)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambhinav": 102,
      "ArunBeCoding": 1,
      "seahlynn": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/views/AutoCompleteFields.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "//package seedu.address.ui.views;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "//import java.net.URL;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "//import java.util.ResourceBundle;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "//import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "//import javafx.fxml.Initializable;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "//import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "//import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "//import org.controlsfx.control.textfield.TextFields;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "//"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "//public class AutoCompleteFields implements Initializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "//"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "//    @FXML"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "//    private AnchorPane root;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "//    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "//    private TextField input;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "//"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "//    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "//    public void initialize(URL url, ResourceBundle rb) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "//        TextFields.bindAutoCompletion(input,possibleSuggestions);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "ambhinav": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/views/InventoryCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "package seedu.address.ui.views;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import seedu.address.model.inventory.Inventory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": " * An UI component that displays information of a {@code Inventory}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "public class InventoryCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    private static final String FXML \u003d \"InventoryListCard.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on ProjectDashboard level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public final Inventory inventory;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    private Label InvName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    private Label Price;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    private Label MemberName;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public InventoryCard(Inventory inventory, int displayedIndex) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        this.inventory \u003d inventory;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        InvName.setText(inventory.getName().fullName);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        Price.setText(inventory.getPrice().toString());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        if (!(other instanceof TaskCard)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        InventoryCard card \u003d (InventoryCard) other;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                \u0026\u0026 inventory.equals(card.inventory);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ArunBeCoding": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/views/InventoryListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "package seedu.address.ui.views;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import seedu.address.model.inventory.Inventory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": " * Panel containing the list of inventories."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": " * Called by {@code UserViewUpdate} when user executes {@code ListInventoriesCommand}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "public class InventoryListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    private static final String FXML \u003d \"InventoryListPanel.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(InventoryListPanel.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    private ListView\u003cInventory\u003e InventoryListView;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public InventoryListPanel(ObservableList\u003cInventory\u003e inventoryList) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        InventoryListView.setItems(inventoryList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        InventoryListView.setCellFactory(listView -\u003e new InventoryListViewCell());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    class InventoryListViewCell extends ListCell\u003cInventory\u003e {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        protected void updateItem(Inventory inventory, boolean empty) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            super.updateItem(inventory, empty);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            if (empty || inventory \u003d\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                setGraphic(new InventoryCard(inventory, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ArunBeCoding": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/views/MemberCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "package seedu.address.ui.views;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.member.Member;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ambhinav"
        },
        "content": " * An UI component that displays information of a {@code Task}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "public class MemberCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    private static final String FXML \u003d \"MemberListCard.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on ProjectDashboard level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public final Member member;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    private Label displayId;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public MemberCard(Member member, int displayedIndex) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        this.member \u003d member;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        displayId.setText(member.getId().getDisplayId());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        name.setText(member.getName().fullName);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        member.getTags().stream()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        if (!(other instanceof TaskCard)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        MemberCard card \u003d (MemberCard) other;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                \u0026\u0026 member.equals(card.member);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ambhinav": 20,
      "-": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/views/MemberListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "package seedu.address.ui.views;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.member.Member;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ambhinav"
        },
        "content": " * Panel containing the list of tasks."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ambhinav"
        },
        "content": " * Called by {@code UserViewUpdate} when user executes {@code LisTaskCommand}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ambhinav"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "public class MemberListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    private static final String FXML \u003d \"MemberListPanel.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(MemberListPanel.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    private ListView\u003cMember\u003e memberListView;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public MemberListPanel(ObservableList\u003cMember\u003e memberList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        memberListView.setItems(memberList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        memberListView.setCellFactory(listView -\u003e new MemberListViewCell());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    class MemberListViewCell extends ListCell\u003cMember\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        protected void updateItem(Member member, boolean empty) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            super.updateItem(member, empty);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            if (empty || member \u003d\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                setGraphic(new MemberCard(member, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ambhinav": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/views/MemberStatisticsView.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "package seedu.address.ui.views;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import javafx.beans.binding.Bindings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import javafx.scene.chart.PieChart;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.model.member.Member;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.model.statistics.Statistics;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.model.task.TaskStatus;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "public class MemberStatisticsView extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    private static final String FXML \u003d \"MemberStatistics.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(MemberStatisticsView.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    private PieChart memberByTasks;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    private PieChart memberByInv;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public MemberStatisticsView(Statistics stats, List\u003cMember\u003e members) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        //For PieChart memberByTasks"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        ObservableList\u003cPieChart.Data\u003e memberByTasksData \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        for (Member mem : members) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            PieChart.Data toBeAdded \u003d new PieChart.Data(mem.getName().toString(), stats.getPortionMembersByTasks().get(mem));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            memberByTasksData.add(toBeAdded);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        memberByTasks.setData(memberByTasksData);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        memberByTasksData.forEach(data -\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "                data.nameProperty().bind("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "                        Bindings.concat("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "                                data.getName(), \" \", Math.round(data.getPieValue()), \" tasks\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "                        )"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "                )"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        );"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seahlynn": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/views/ProjectDashboardView.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "package seedu.address.ui.views;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ambhinav"
        },
        "content": " * Panel containing the dashboard, with tasks separated by status."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ambhinav"
        },
        "content": " * Is the default view called by {@code UserViewUpdate}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "public class ProjectDashboardView extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    private static final String FXML \u003d \"ProjectDashboard.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ProjectDashboardView.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    private ListView\u003cTask\u003e taskListViewNotStarted;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    private ListView\u003cTask\u003e taskListViewDoing;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    private ListView\u003cTask\u003e taskListViewDone;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    private ListView\u003cTask\u003e taskListViewUpcomingDeadlines;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public ProjectDashboardView(ObservableList\u003cTask\u003e taskListNotStarted, ObservableList\u003cTask\u003e taskListDoing,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                                ObservableList\u003cTask\u003e taskListDone, ObservableList\u003cTask\u003e taskListDeadline) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        taskListViewNotStarted.setItems(taskListNotStarted);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        taskListViewDoing.setItems(taskListDoing);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        taskListViewDone.setItems(taskListDone);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        taskListViewUpcomingDeadlines.setItems(taskListDeadline);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        taskListViewNotStarted.setCellFactory(listView -\u003e new TaskListViewCell());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        taskListViewDoing.setCellFactory(listView -\u003e new TaskListViewCell());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        taskListViewDone.setCellFactory(listView -\u003e new TaskListViewCell());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        taskListViewUpcomingDeadlines.setCellFactory(listView -\u003e new TaskListViewCell());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Task} using a {@code TaskCard}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    class TaskListViewCell extends ListCell\u003cTask\u003e {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        protected void updateItem(Task task, boolean empty) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            super.updateItem(task, empty);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            if (empty || task \u003d\u003d null) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                TaskCard cardToRender \u003d new TaskCard(task, getIndex() + 1);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                setGraphic(cardToRender.getRoot());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambhinav": 35,
      "-": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/views/SettingsView.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "package seedu.address.ui.views;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.settings.ClockFormat;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.settings.Theme;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ambhinav"
        },
        "content": " * Layout displaying the current settings in +Work."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ambhinav"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "public class SettingsView extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    private static final String FXML \u003d \"SettingsWindow.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    private static final String LABEL_UNHIGHLIGHTED \u003d \"label-unhighlighted\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    private static final String LABEL_HIGHLIGHTED \u003d \"label-highlighted\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(SettingsView.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    private Theme theme;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    private ClockFormat clockFormat;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    private AnchorPane themeSetting;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    private AnchorPane clockSetting;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    private Label themeLabelDark;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    private Label themeLabelLight;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    private Label clockLabelTwentyFour;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    private Label clockLabelTwelve;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public SettingsView(Theme theme, ClockFormat clockFormat) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        handleTheme();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        handleClock();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        this.theme \u003d theme;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        this.clockFormat \u003d clockFormat;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        updateHighlights();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    private void handleTheme() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        themeLabelLight.setText(\"LIGHT\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        themeLabelDark.setText(\"DARK\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    private void handleClock() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        clockLabelTwelve.setText(\"12HR\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        clockLabelTwentyFour.setText(\"24HR\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * Highlights the chosen option."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * @param option the option that is chosen"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    private void highlightChoice(AnchorPane setting, String option) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        setting.getChildren().forEach(child -\u003e unhighlightLabel((Label) child));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        Stream\u003cNode\u003e nodeStream \u003d setting.getChildren().stream();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        nodeStream.filter(child -\u003e ((Label) child).getText().equals(option))"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                .forEach(child -\u003e highlightLabel((Label) child));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    private void highlightLabel(Label label) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        label.getStyleClass().clear();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        label.getStyleClass().add(LABEL_HIGHLIGHTED);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    private void unhighlightLabel(Label label) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        label.getStyleClass().clear();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        label.getStyleClass().add(LABEL_UNHIGHLIGHTED);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * Updates the panel to match the current state of settings."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public void updateHighlights() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        highlightChoice(themeSetting, theme.toString());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        highlightChoice(clockSetting, clockFormat.getDisplayName());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambhinav": 91
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/views/TaskCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "package seedu.address.ui.views;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import com.sun.javafx.scene.control.skin.Utils;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import javafx.scene.text.Font;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.commons.util.DateTimeUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ambhinav"
        },
        "content": " * An UI component that displays information of a {@code Task}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "public class TaskCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    private static final String FXML \u003d \"TaskListCard.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on ProjectDashboard level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public final Task task;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    private Label deadline;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public TaskCard(Task task, int displayedIndex) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        name.setText(task.getName().fullName);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        task.getTags().stream()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        if (task.hasDeadline()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            deadline.setText(\"Due on: \" + DateTimeUtil.displayDateTime(task.getDeadline()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            deadline.setText(\"No deadline set\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public Label getDeadlineLabel() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        return deadline;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        if (!(other instanceof TaskCard)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        TaskCard card \u003d (TaskCard) other;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                \u0026\u0026 task.equals(card.task);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambhinav": 28,
      "-": 51,
      "gabrielseow": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/views/TaskCardForStats.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "package seedu.address.ui.views;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "public class TaskCardForStats extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    private static final String FXML \u003d \"TaskCardForStats.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public final Task task;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    private Label timeTaken;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public TaskCardForStats(Task task, int displayedIndex) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        name.setText(task.getName().fullName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        timeTaken.setText(task.getTimeSpent());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        if (!(other instanceof TaskCard)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        TaskCardForStats card \u003d (TaskCardForStats) other;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "                \u0026\u0026 task.equals(card.task);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seahlynn": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/views/TaskListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "package seedu.address.ui.views;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ambhinav"
        },
        "content": " * Panel containing the list of tasks."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ambhinav"
        },
        "content": " * Called by {@code UserViewUpdate} when user executes {@code LisTaskCommand}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "public class TaskListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    private static final String FXML \u003d \"TaskListPanel.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(TaskListPanel.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    private ListView\u003cTask\u003e taskListView;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public TaskListPanel(ObservableList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        taskListView.setItems(taskList);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        taskListView.setCellFactory(listView -\u003e new TaskListViewCell());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Task} using a {@code TaskCard}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    class TaskListViewCell extends ListCell\u003cTask\u003e {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        protected void updateItem(Task task, boolean empty) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            super.updateItem(task, empty);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            if (empty || task \u003d\u003d null) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                setGraphic(new TaskCard(task, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ambhinav": 19,
      "-": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/views/TaskStatisticsView.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "package seedu.address.ui.views;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import javafx.beans.binding.Bindings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import javafx.scene.chart.PieChart;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.model.member.Member;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.model.statistics.Statistics;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.model.task.TaskStatus;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "public class TaskStatisticsView extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    private static final String FXML \u003d \"TaskStatistics.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(MemberStatisticsView.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    private PieChart taskByStatus;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    private ListView\u003cTask\u003e taskListView;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public TaskStatisticsView(Statistics stats, ObservableList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        //For list of tasks"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        taskListView.setItems(tasks);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        taskListView.setCellFactory(listView -\u003e new TaskListViewCell());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        //For PieChart taskByStatus"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        ObservableList\u003cPieChart.Data\u003e taskByStatusData \u003d FXCollections.observableArrayList("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "                new PieChart.Data(\"NOT STARTED\", stats.getPortionTasksByStatus().get(TaskStatus.UNBEGUN)),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "                new PieChart.Data(\"DOING\", stats.getPortionTasksByStatus().get(TaskStatus.DOING)),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "                new PieChart.Data(\"DONE\", stats.getPortionTasksByStatus().get(TaskStatus.DONE)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        taskByStatus.setData(taskByStatusData);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        taskByStatusData.forEach(data -\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "                data.nameProperty().bind("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "                        Bindings.concat("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "                                data.getName(), \" \", Math.round(data.getPieValue()), \" tasks\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "                        )"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "                )"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        );"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Task} using a {@code TaskCard}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    class TaskListViewCell extends ListCell\u003cTask\u003e {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        protected void updateItem(Task task, boolean empty) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            super.updateItem(task, empty);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            if (empty || task \u003d\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "                setGraphic(new TaskCardForStats(task, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seahlynn": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/views/TaskWithMembersCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "package seedu.address.ui.views;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ambhinav"
        },
        "content": " * An UI component that displays information of a {@code Task}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ambhinav"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "public class TaskWithMembersCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    private static final String FXML \u003d \"TaskListCard.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on ProjectDashboard level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public final Task task;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    private Label deadline;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    private FlowPane members;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public TaskWithMembersCard(Task task, int displayedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        name.setText(task.getName().fullName);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        task.getTags().stream()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        if (task.hasDeadline()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            deadline.setText(task.getDeadline().toString());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            deadline.setText(\"No deadline set\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        if (!(other instanceof TaskCard)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        TaskWithMembersCard card \u003d (TaskWithMembersCard) other;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                \u0026\u0026 task.equals(card.task);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambhinav": 76
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ".label-dashboard {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-text-fill: #c1c1c1;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "#filterField, #taskListPanel, #taskWebpage {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ".chart-pie-label { /*this is what you need for labels*/"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    -fx-font-size: 1em;"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambhinav": 8,
      "seahlynn": 5,
      "-": 351
    }
  },
  {
    "path": "src/main/resources/view/Extensions.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ".error {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d06651 !important; /* The error class should always override the default text-fill style */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:empty {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Empty cells will not have alternating colours */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background: #383838;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ".tag-selector {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 3;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 3;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ".tooltip-text {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ".label-highlighted {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-text-fill: #ff8259;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ".label-unhighlighted {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ".separator *.line {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-border-color: #848484;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-border-style: solid;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-border-width: 2px;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambhinav": 20,
      "-": 20
    }
  },
  {
    "path": "src/main/resources/view/ExtensionsLight.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ".error {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-text-fill: #d06651 !important; /* The error class should always override the default text-fill style */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ".list-cell:empty {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    /* Empty cells will not have alternating colours */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-background-color: derive(#c1c1c1, 30%);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ".tag-selector {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-border-color: #000000;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-border-radius: 3;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-background-radius: 3;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ".tooltip-text {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-text-fill: #000000;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ".label-highlighted {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-text-fill: #3e7b91;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ".label-unhighlighted {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-text-fill: #000000;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ".separator *.line {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-border-color: #c1c1c1;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-border-style: solid;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-border-width: 2px;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambhinav": 41
    }
  },
  {
    "path": "src/main/resources/view/InventoryListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"300\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "              \u003cAnchorPane minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"105\" prefWidth\u003d\"150.0\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                  \u003cchildren\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                      \u003cLabel fx:id\u003d\"InvName\" layoutX\u003d\"14.0\" layoutY\u003d\"44.0\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                  \u003c/children\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "              \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "              \u003cAnchorPane minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"105\" prefWidth\u003d\"100.0\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                  \u003cchildren\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                      \u003cLabel fx:id\u003d\"Price\" layoutX\u003d\"10.0\" layoutY\u003d\"44.0\" styleClass\u003d\"label\" text\u003d\"\\$first\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                  \u003c/children\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "              \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "ArunBeCoding": 45
    }
  },
  {
    "path": "src/main/resources/view/InventoryListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    \u003cListView fx:id\u003d\"InventoryListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "ArunBeCoding": 8
    }
  },
  {
    "path": "src/main/resources/view/LightTheme.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-background-color: #848484;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    background-color: #c1c1c1; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-font-size: 11.5pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-text-fill: #000000;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ".label-dashboard {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-text-fill: #3e7b91;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-text-fill: #000000;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-text-fill: #000000;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-text-fill: #000000;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-base: #e2e2e2;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-control-inner-background: #e2e2e2;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-background-color: #e2e2e2;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-background-color: derive(#c7c7c7, 20%);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-background-color: derive(#c7c7c7, 20%);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "}"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-background-color: derive(#c7c7c7, 20%);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "}"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "}"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-background-color: #c1c1c1;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "}"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-background-color: #a5acae;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "}"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-text-fill: #000000;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "}"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "}"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "}"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     -fx-background-color: derive(#e2e2e2, 20%);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     -fx-background-color: derive(#e2e2e2, 20%);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     -fx-border-color: derive(#e2e2e2, 10%);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-background-color: derive(#3e7b91, 30%);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "}"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-background-color: derive(#e2e2e2, 30%);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-text-fill: #000000;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "}"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-text-fill: #000000 /*!important */;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "}"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-text-fill: #000000;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "}"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-background-color: derive(#3e7b91, 30%);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-border-color: derive(#e2e2e2, 25%);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "}"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-text-fill: #000000;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "}"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-background-color: derive(#e2e2e2, 30%);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-border-color: derive(#e2e2e2, 30%);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "}"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-background-color: derive(#e2e2e2, 30%);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "}"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-background-color: derive(#e2e2e2, 50%);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "}"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "}"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-background-color: derive(#e2e2e2, 20%);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "}"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-text-fill: #000000;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "}"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-background-color: #e2e2e2;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "}"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "/*"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ambhinav"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ambhinav"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ambhinav"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ambhinav"
        },
        "content": " */"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-border-color: #000000;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-background-color: #e2e2e2;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "}"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "}"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "  -fx-background-color: #000000;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "  -fx-text-fill: #c7c7c7;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "}"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-border-color: #000000, #000000;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "}"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-background-color: #e2e2e2;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-text-fill: #000000;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "}"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-text-fill: #000000;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "}"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "}"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-background-color: #e2e2e2;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "}"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-background-color: #e2e2e2;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "}"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-text-fill: #000000;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "}"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-background-color: derive(#c7c7c7, 25%);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "}"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-fill: #e2e2e2;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-text-fill: #000000;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "}"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-background-color: derive(#848484, 20%);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "}"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-background-color: derive(#848484, 50%);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "}"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "}"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "}"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "}"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "}"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "}"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "}"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-background-color: inherit;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-text-fill: #000000;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "}"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "#filterField, #taskListPanel, #taskWebpage {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "}"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "#resultDisplay {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "}"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-background-color: derive(#e2e2e2, 20%);"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "}"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "}"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-text-fill: #000000;"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "}"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ".chart-pie-label { /*this is what you need for labels*/"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-fill: #3e7b91;"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    -fx-font-size: 1em;"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambhinav": 371
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "\u003cfx:root minHeight\u003d\"600\" minWidth\u003d\"450\" onCloseRequest\u003d\"#handleExit\" title\u003d\"+Work\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    \u003cScene fx:id\u003d\"scene\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"150.0\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        \u003cVBox minHeight\u003d\"500\" minWidth\u003d\"340\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "          \u003cStackPane fx:id\u003d\"userNavigableView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "ambhinav": 10,
      "-": 43
    }
  },
  {
    "path": "src/main/resources/view/MemberListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                \u003cLabel fx:id\u003d\"displayId\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "\u003c/HBox\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ambhinav": 40
    }
  },
  {
    "path": "src/main/resources/view/MemberListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    \u003cListView fx:id\u003d\"memberListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "\u003c/VBox\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ambhinav": 10
    }
  },
  {
    "path": "src/main/resources/view/MemberStatistics.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "\u003c?import java.lang.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "\u003c?import java.util.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "\u003c?import javafx.scene.*?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "\u003c?import javafx.scene.chart.PieChart?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "\u003cHBox VBox.vgrow\u003d\"ALWAYS\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        \u003cVBox minHeight\u003d\"600.0\" alignment\u003d\"TOP_CENTER\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "                \u003cLabel id\u003d\"memberByTasks\" text\u003d\"Members by tasks allocated\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "                \u003cPieChart fx:id\u003d\"memberByTasks\" prefWidth\u003d\"300\" prefHeight\u003d\"300\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        \u003cVBox minHeight\u003d\"600.0\" alignment\u003d\"TOP_CENTER\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "                \u003cLabel id\u003d\"doneLabel\" text\u003d\"Members by items bought\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "                \u003cPieChart fx:id\u003d\"memberByItems\" prefWidth\u003d\"300\" prefHeight\u003d\"300\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "\u003c/HBox\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ambhinav": 1,
      "seahlynn": 25
    }
  },
  {
    "path": "src/main/resources/view/ProjectDashboard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "\u003c?import javafx.scene.layout.BorderPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "\u003cBorderPane xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "   \u003ccenter\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "      \u003cHBox BorderPane.alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        \u003cchildren\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            \u003cVBox minHeight\u003d\"600.0\" minWidth\u003d\"-Infinity\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                  \u003cLabel id\u003d\"notStartedLabel\" styleClass\u003d\"label-dashboard\" contentDisplay\u003d\"CENTER\" text\u003d\"Not Started\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                \u003cListView fx:id\u003d\"taskListViewNotStarted\" maxHeight\u003d\"800.0\" minWidth\u003d\"300.0\" prefHeight\u003d\"600.0\" prefWidth\u003d\"350.0\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                     \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                        \u003cInsets top\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                     \u003c/padding\u003e\u003c/ListView\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "               \u003cpadding\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                  \u003cInsets right\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "               \u003c/padding\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "               \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                  \u003cInsets left\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "               \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            \u003cVBox minHeight\u003d\"600.0\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                  \u003cLabel id\u003d\"doingLabel\" styleClass\u003d\"label-dashboard\" alignment\u003d\"CENTER\" text\u003d\"Doing\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                \u003cListView fx:id\u003d\"taskListViewDoing\" maxHeight\u003d\"800.0\" minWidth\u003d\"300.0\" prefHeight\u003d\"600.0\" prefWidth\u003d\"350.0\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                     \u003cpadding\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                        \u003cInsets top\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                     \u003c/padding\u003e\u003c/ListView\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "               \u003cpadding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                  \u003cInsets right\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "               \u003c/padding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            \u003cVBox minHeight\u003d\"600.0\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                  \u003cLabel id\u003d\"doneLabel\" styleClass\u003d\"label-dashboard\" alignment\u003d\"CENTER\" text\u003d\"Done\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                \u003cListView fx:id\u003d\"taskListViewDone\" maxHeight\u003d\"800.0\" minWidth\u003d\"300.0\" prefHeight\u003d\"600.0\" prefWidth\u003d\"350.0\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                     \u003cpadding\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                        \u003cInsets top\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                     \u003c/padding\u003e\u003c/ListView\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "               \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                  \u003cInsets /\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "               \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        \u003c/children\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "         \u003cBorderPane.margin\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            \u003cInsets bottom\u003d\"10.0\" top\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "         \u003c/BorderPane.margin\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "   \u003c/center\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "   \u003cright\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "      \u003cVBox BorderPane.alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            \u003cInsets left\u003d\"20.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "         \u003c/padding\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            \u003cLabel styleClass\u003d\"label-dashboard\" text\u003d\"Upcoming deadlines\" /\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            \u003cListView fx:id\u003d\"taskListViewUpcomingDeadlines\" minWidth\u003d\"300.0\" prefHeight\u003d\"400.0\" prefWidth\u003d\"350.0\"\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "               \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                  \u003cInsets /\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "               \u003c/VBox.margin\u003e\u003c/ListView\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "         \u003cBorderPane.margin\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            \u003cInsets bottom\u003d\"10.0\" left\u003d\"20.0\" right\u003d\"10.0\" top\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "         \u003c/BorderPane.margin\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "   \u003c/right\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "\u003c/BorderPane\u003e"
      }
    ],
    "authorContributionMap": {
      "ambhinav": 76
    }
  },
  {
    "path": "src/main/resources/view/SettingsWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "\u003c?import javafx.scene.control.Separator?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "\u003cVBox fx:id\u003d\"vBox\" prefHeight\u003d\"400.0\" prefWidth\u003d\"600.0\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    \u003cAnchorPane fx:id\u003d\"themeSetting\" styleClass\u003d\"setting-pane\" prefHeight\u003d\"200.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            \u003cLabel text\u003d\"THEME\" AnchorPane.leftAnchor\u003d\"50.0\" AnchorPane.topAnchor\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            \u003cLabel fx:id\u003d\"themeLabelLight\" AnchorPane.bottomAnchor\u003d\"92.0\" AnchorPane.rightAnchor\u003d\"250.0\" AnchorPane.topAnchor\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            \u003cLabel fx:id\u003d\"themeLabelDark\" AnchorPane.bottomAnchor\u003d\"92.0\" AnchorPane.rightAnchor\u003d\"100.0\" AnchorPane.topAnchor\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        \u003c/children\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    \u003cSeparator styleClass\u003d\"separator\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    \u003cAnchorPane fx:id\u003d\"clockSetting\" styleClass\u003d\"setting-pane\" prefHeight\u003d\"200.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        \u003cchildren\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            \u003cLabel text\u003d\"CLOCK\" AnchorPane.leftAnchor\u003d\"50.0\" AnchorPane.topAnchor\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            \u003cLabel fx:id\u003d\"clockLabelTwelve\" AnchorPane.bottomAnchor\u003d\"92.0\" AnchorPane.rightAnchor\u003d\"250.0\" AnchorPane.topAnchor\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            \u003cLabel fx:id\u003d\"clockLabelTwentyFour\" AnchorPane.bottomAnchor\u003d\"92.0\" AnchorPane.rightAnchor\u003d\"100.0\" AnchorPane.topAnchor\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        \u003c/children\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "ambhinav": 24
    }
  },
  {
    "path": "src/main/resources/view/TaskCardForStats.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            \u003cLabel fx:id\u003d\"timeTaken\" text\u003d\"\\$first\" styleClass\u003d\"label\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "\u003c/HBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "seahlynn": 34
    }
  },
  {
    "path": "src/main/resources/view/TaskListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "      \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        \u003cLabel fx:id\u003d\"deadline\" styleClass\u003d\"label\" text\u003d\"\\$first\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "ambhinav": 9,
      "-": 29
    }
  },
  {
    "path": "src/main/resources/view/TaskListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    \u003cListView fx:id\u003d\"taskListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "ambhinav": 2,
      "-": 6
    }
  },
  {
    "path": "src/main/resources/view/TaskStatistics.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "\u003c?import java.lang.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "\u003c?import java.util.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "\u003c?import javafx.scene.*?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "\u003c?import javafx.scene.chart.PieChart?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "\u003cHBox VBox.vgrow\u003d\"ALWAYS\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        \u003cVBox minHeight\u003d\"600.0\" alignment\u003d\"TOP_CENTER\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "                \u003cLabel id\u003d\"notStartedLabel\" contentDisplay\u003d\"CENTER\" text\u003d\"Duration of each tasks\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "                \u003cListView fx:id\u003d\"taskListView\" maxHeight\u003d\"800.0\" prefHeight\u003d\"600.0\" styleClass\u003d\"pane-with-border\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        \u003cVBox minHeight\u003d\"600.0\" alignment\u003d\"TOP_CENTER\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "                \u003cLabel id\u003d\"Tasks by status\" alignment\u003d\"CENTER\" text\u003d\"Proportion of tasks with status\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "                \u003cPieChart fx:id\u003d\"taskByStatus\" prefWidth\u003d\"300\" prefHeight\u003d\"300\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "ambhinav": 1,
      "seahlynn": 24
    }
  },
  {
    "path": "src/main/resources/view/TaskWithMembersCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            \u003cLabel fx:id\u003d\"deadline\" styleClass\u003d\"label\" text\u003d\"\\$first\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"members\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "\u003c/HBox\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ambhinav": 40
    }
  },
  {
    "path": "src/main/resources/view/UserViewMain.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "\u003c?import java.lang.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "\u003c?import java.util.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "\u003c?import javafx.scene.*?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            xmlns:fx\u003d\"http://javafx.com/fxml\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            fx:controller\u003d\"seedu.address.ui.UserViewController\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    \u003cStackPane fx:id\u003d\"userViewHolder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "ambhinav": 13
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/DateTimeUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "public class DateTimeUtilTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    private static final String VALID_DATE_TIME_FORMAT \u003d \"10/10/2018 18:00\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    private static final String INVALID_DATE_TIME_FORMAT_DASH \u003d \"10-10-2018 18-00\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    private static final String INVALID_DATE_TIME_FORMAT_ZERO \u003d \"1/1/2019 18:00\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    private static final String EXCEEDING_DAY_DATE_TIME_FORMAT \u003d \"32/10/2018 18:00\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    private static final String EXCEEDING_TIME_DATE_TIME_FORMAT \u003d \"22/10/2018 25:00\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    private static final String EXCEEDING_MONTH_DATE_TIME_FORMAT \u003d \"22/15/2018 15:00\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    private static final String FALL_SHORT_DAY_DATE_TIME_FORMAT \u003d \"0/10/2018 18:00\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    private static final String FALL_SHORT_MONTH_DATE_TIME_FORMAT \u003d \"22/00/2018 15:00\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    private static final String DUE_SOON_DATE_TIME \u003d \"31/01/2020 10:00\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public void parseDateTime_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e DateTimeUtil.parseDateTime((String) null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public void parseDateTime_invalidFormat_throwsParseException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e DateTimeUtil.parseDateTime(INVALID_DATE_TIME_FORMAT_DASH));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e DateTimeUtil.parseDateTime(INVALID_DATE_TIME_FORMAT_ZERO));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public void parseDateTime_validFormat_success() throws ParseException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertEquals(LocalDateTime.parse(VALID_DATE_TIME_FORMAT, DateTimeUtil.getDefaultFormatter()),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                DateTimeUtil.parseDateTime(VALID_DATE_TIME_FORMAT));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    // EP empty string"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public void parseDateTime_emptyString_throwsParseException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e DateTimeUtil.parseDateTime(\"\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    // EP day/month/time exceeds calendar"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public void parseDateTime_dateTimeExceeded_throwsParseException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e DateTimeUtil.parseDateTime(EXCEEDING_DAY_DATE_TIME_FORMAT));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e DateTimeUtil.parseDateTime(EXCEEDING_TIME_DATE_TIME_FORMAT));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e DateTimeUtil.parseDateTime(EXCEEDING_MONTH_DATE_TIME_FORMAT));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    // EP day/month falls short"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public void parseDateTime_dateTimeFallsShort_throwsParseException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e DateTimeUtil.parseDateTime(FALL_SHORT_DAY_DATE_TIME_FORMAT));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e DateTimeUtil.parseDateTime(FALL_SHORT_MONTH_DATE_TIME_FORMAT));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public void checkIfDueSoon_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e DateTimeUtil.checkIfDueSoon(100, (LocalDateTime) null));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public void checkIfDueSoon_dueSoon_success() throws ParseException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        //assertTrue(DateTimeUtil.checkIfDueSoon(100, DateTimeUtil.parseDateTime(DUE_SOON_DATE_TIME)));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        //assertTrue(DateTimeUtil.checkIfDueSoon(2, LocalDateTime.now().plusWeeks(2)));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambhinav": 76,
      "gabrielseow": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "//import static seedu.address.commons.core.Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.TASK_NAME_DESC_FINANCE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TASK_NAME_DESC_FINANCE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import static seedu.address.testutil.TypicalTasksMembers.REVIEW_BUDGET;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "//import static seedu.address.testutil.TypicalTasksMembers.REVIEW_BUDGET;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.ReadOnlyProjectDashboard;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "//import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.UserSettings;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.storage.JsonProjectDashboardStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.storage.JsonUserSettingsStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "//import seedu.address.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        JsonProjectDashboardStorage projectDashboardStorage \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                new JsonProjectDashboardStorage(temporaryFolder.resolve(\"projectDashboard.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        JsonUserSettingsStorage userSettingsStorage \u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                new JsonUserSettingsStorage(temporaryFolder.resolve(\"plusworksettings.json\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        StorageManager storage \u003d new StorageManager(projectDashboardStorage, userPrefsStorage, userSettingsStorage);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        String deleteTaskCommand \u003d \"delete-task 9\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        assertCommandException(deleteTaskCommand, MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        // Setup LogicManager with JsonProjectDashboardIoExceptionThrowingStub"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        JsonProjectDashboardStorage projectDashboardStorage \u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                new JsonProjectDashboardIoExceptionThrowingStub("
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                        temporaryFolder.resolve(\"ioExceptionProjectDashboard.json\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        JsonUserSettingsStorage userSettingsStorage \u003d"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                new JsonUserSettingsStorage(temporaryFolder.resolve(\"ioExceptionUserSettings.json\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        StorageManager storage \u003d new StorageManager(projectDashboardStorage, userPrefsStorage, userSettingsStorage);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        String addTaskCommand \u003d seedu.address.logic.commands.AddTaskCommand.COMMAND_WORD + TASK_NAME_DESC_FINANCE;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        Task expectedTask \u003d new TaskBuilder(REVIEW_BUDGET).withTags().build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        expectedModel.addTask(expectedTask);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        assertCommandFailure(addTaskCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public void getFilteredTaskList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredTaskList().remove(0));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getProjectDashboard(), new UserPrefs(), new UserSettings());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    private static class JsonProjectDashboardIoExceptionThrowingStub extends JsonProjectDashboardStorage {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        private JsonProjectDashboardIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        public void saveProjectDashboard(ReadOnlyProjectDashboard projectDashboard, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambhinav": 30,
      "seahlynn": 9,
      "-": 131
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddInventoryCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import seedu.address.model.ProjectDashboard;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import seedu.address.model.ReadOnlyProjectDashboard;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.UserSettings;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import seedu.address.model.inventory.InvName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import seedu.address.model.inventory.Inventory;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import seedu.address.model.inventory.Price;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import seedu.address.model.mapping.InvMemMapping;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import seedu.address.model.mapping.InvTasMapping;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import seedu.address.model.mapping.TasMemMapping;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import seedu.address.model.mapping.Mapping;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import seedu.address.model.member.Member;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import seedu.address.model.member.MemberId;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import seedu.address.model.member.MemberName;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.settings.ClockFormat;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.settings.Theme;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.model.statistics.Statistics;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import seedu.address.testutil.InventoryBuilder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "public class AddInventoryCommandTest {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public void constructor_nullTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddInventoryCommand(null,null,null));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public void execute_inventoryAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        AddInventoryCommandTest.ModelStubAcceptingInventoryAdded modelStub \u003d new AddInventoryCommandTest"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                                                                                .ModelStubAcceptingInventoryAdded();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        Inventory validInventory \u003d new InventoryBuilder().build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        CommandResult commandResult \u003d new AddInventoryCommand(new Index(0),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                validInventory.getName(), validInventory.getPrice(), new MemberId(\"rak\")).execute(modelStub);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        assertEquals(String.format(AddInventoryCommand.MESSAGE_SUCCESS, validInventory),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                                                        commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        assertEquals(Collections.singletonList(validInventory), modelStub.inventoriesAdded);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public void execute_duplicateInventory_throwsCommandException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        Inventory validInventory \u003d new InventoryBuilder().build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        AddInventoryCommand addInventoryCommand \u003d new AddInventoryCommand(new Index(0),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                                    validInventory.getName(), validInventory.getPrice(), new MemberId(\"rak\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithInventory(validInventory);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        assertThrows(CommandException.class, AddInventoryCommand.MESSAGE_DUPLICATE_INVENTORY, () -\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                addInventoryCommand.execute(modelStub));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public void execute_inValidMemberId_throwsCommandException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        AddInventoryCommand addInventoryCommand \u003d new AddInventoryCommand(new Index(0),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                new InvName(\"Toy\"), new Price(1), new MemberId(\"invalidId\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        AddInventoryCommandTest.ModelStub modelStub \u003d new AddInventoryCommandTest.ModelStub();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        assertThrows(CommandException.class, AddInventoryCommand.MESSAGE_MEMBERID_INVALID, () -\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                addInventoryCommand.execute(modelStub));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public void execute_inValidTaskId_throwsCommandException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        AddInventoryCommand addInventoryCommand \u003d new AddInventoryCommand(new Index(2),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                new InvName(\"Toy\"), new Price(1), new MemberId(\"rak\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        ModelStub modelStub \u003d new ModelStub();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        assertThrows(CommandException.class, AddInventoryCommand.MESSAGE_INDEX_EXCEEDED, () -\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                addInventoryCommand.execute(modelStub));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        Inventory toy \u003d new InventoryBuilder().withName(\"Toy\").build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        Inventory ball \u003d new InventoryBuilder().withName(\"Ball\").build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        AddInventoryCommand addToyCommand \u003d new AddInventoryCommand(new Index(1),"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                                                    toy.getName(), toy.getPrice(), new MemberId(\"rak\"));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        AddInventoryCommand addBallCommand \u003d new AddInventoryCommand(new Index(1),"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                                                    ball.getName(), ball.getPrice(), new MemberId(\"rak\"));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        assertTrue(addToyCommand.equals(addToyCommand));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        AddInventoryCommand addToyCommandCopy \u003d new AddInventoryCommand(new Index(1),"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                                                    toy.getName(), toy.getPrice(), new MemberId(\"rak\"));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        assertTrue(addToyCommand.equals(addToyCommandCopy));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        assertFalse(addToyCommand.equals(1));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        assertFalse(addToyCommand \u003d\u003d null);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        // different task -\u003e returns false"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        assertFalse(addToyCommand.equals(addBallCommand));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        public Path getProjectDashboardFilePath() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        public void setProjectDashboardFilePath(Path projectDashboardFilePath) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        public void addTask(Task task) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        public void setProjectDashboard(ReadOnlyProjectDashboard newData) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        public ReadOnlyProjectDashboard getProjectDashboard() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        public void deleteTask(Task target) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        public void setTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        public ObservableList\u003cTask\u003e getFilteredTaskListByDeadline() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        public ObservableList\u003cTask\u003e getFilteredTaskListNotStarted() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        public ObservableList\u003cTask\u003e getFilteredTaskListDoing() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        public ObservableList\u003cTask\u003e getFilteredTaskListDone() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        public ObservableList\u003cTask\u003e getFilteredTasksList() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        public void updateFilteredTasksList(Predicate\u003cTask\u003e predicate) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        public void addMember(Member member) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        public boolean hasMember(Member member) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        public boolean hasMemberId(MemberId memId) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            return memId.getDisplayId().equals(\"rak\");"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        public void deleteMember(Member target) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        public void setMember(Member target, Member editedMember) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        public int getMembersLength() {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        public ObservableList\u003cMember\u003e getFilteredMembersList() {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        public void updateFilteredMembersList(Predicate\u003cMember\u003e predicate) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        public int getTasksLength() {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        public ObservableList\u003cInventory\u003e getFilteredInventoriesList() {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        public void updateFilteredInventoriesList(Predicate\u003cInventory\u003e predicate) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        public void addInventory(Inventory inventory) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        public boolean hasInventory(Inventory inventory) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        public void deleteInventory(Inventory target) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        public void setInventory(Inventory target, Inventory editedInventory) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        public void addMapping(InvMemMapping mapping) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        public void addMapping(InvTasMapping mapping) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        public void addMapping(TasMemMapping mapping) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        public void deleteMapping(InvMemMapping mapping) {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        public void deleteMapping(InvTasMapping mapping) {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        public void deleteMapping(TasMemMapping mapping) {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        public boolean hasMapping(InvMemMapping mapping) {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        public boolean hasMapping(InvTasMapping mapping) {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        public boolean hasMapping(TasMemMapping mapping) {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        public ObservableList\u003cMapping\u003e getFilteredMappingsList() {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        public void updateFilteredMappingsList(Predicate\u003cMapping\u003e predicate) {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        public Statistics getStatistics() {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        public void setStatistics(Statistics newStats) {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        public UserSettings getUserSettings() {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        public Path getUserSettingsFilePath() {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        public Theme getCurrentTheme() {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        public void setCurrentTheme(Theme newTheme) {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        public ClockFormat getCurrentClockFormat() {"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        public void setClockFormat(ClockFormat newClockFormat) {"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * A Model stub that contains a single task."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    private class ModelStubWithInventory extends AddInventoryCommandTest.ModelStub {"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        private final Inventory inventory;"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        ModelStubWithInventory(Inventory inventory) {"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            requireNonNull(inventory);"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            this.inventory \u003d inventory;"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        public boolean hasInventory(Inventory inventory) {"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            requireNonNull(inventory);"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            return this.inventory.isSameInventory(inventory);"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * A Model stub that always accept the inventory being added."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    private class ModelStubAcceptingInventoryAdded extends AddInventoryCommandTest.ModelStub {"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        final ArrayList\u003cInventory\u003e inventoriesAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        public boolean hasInventory(Inventory inventory) {"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            requireNonNull(inventory);"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            return inventoriesAdded.stream().anyMatch(inventory::isSameInventory);"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        public void addInventory(Inventory inventory) {"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            requireNonNull(inventory);"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            inventoriesAdded.add(inventory);"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        public ReadOnlyProjectDashboard getProjectDashboard() {"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            return new ProjectDashboard();"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambhinav": 39,
      "ArunBeCoding": 347,
      "seahlynn": 11,
      "gabrielseow": 29
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddMemberCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.model.ProjectDashboard;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.model.ReadOnlyProjectDashboard;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.UserSettings;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.model.inventory.Inventory;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import seedu.address.model.mapping.InvMemMapping;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import seedu.address.model.mapping.InvTasMapping;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import seedu.address.model.mapping.TasMemMapping;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.model.mapping.Mapping;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.model.member.Member;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import seedu.address.model.member.MemberId;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.settings.ClockFormat;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.settings.Theme;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.model.statistics.Statistics;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.testutil.MemberBuilder;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "public class AddMemberCommandTest {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public void constructor_nullMember_throwsNullPointerException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddMemberCommand(null));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public void execute_memberAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        ModelStubAcceptingMemberAdded modelStub \u003d new ModelStubAcceptingMemberAdded();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        Member validMember \u003d new MemberBuilder().build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        CommandResult commandResult \u003d new AddMemberCommand(validMember).execute(modelStub);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        assertEquals(String.format(AddMemberCommand.MESSAGE_SUCCESS, validMember), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        assertEquals(Arrays.asList(validMember), modelStub.membersAdded);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public void execute_duplicateMember_throwsCommandException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        Member validMember \u003d new MemberBuilder().build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        AddMemberCommand addMemberCommand \u003d new AddMemberCommand(validMember);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithMember(validMember);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        assertThrows(CommandException.class, addMemberCommand.MESSAGE_DUPLICATE_MEMBER, () -\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "                addMemberCommand.execute(modelStub));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        Member alice \u003d new MemberBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        Member bob \u003d new MemberBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        AddMemberCommand addAliceCommand \u003d new AddMemberCommand(alice);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        AddMemberCommand addBobCommand \u003d new AddMemberCommand(bob);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        AddMemberCommand addAliceCommandCopy \u003d new AddMemberCommand(alice);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        // different task -\u003e returns false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        public Path getProjectDashboardFilePath() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        public void setProjectDashboardFilePath(Path projectDashboardFilePath) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        public void addTask(Task task) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        public void setProjectDashboard(ReadOnlyProjectDashboard newData) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        public ReadOnlyProjectDashboard getProjectDashboard() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        public void deleteTask(Task target) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        public void setTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        public ObservableList\u003cTask\u003e getFilteredTaskListByDeadline() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        public ObservableList\u003cTask\u003e getFilteredTaskListNotStarted() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        public ObservableList\u003cTask\u003e getFilteredTaskListDoing() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        public ObservableList\u003cTask\u003e getFilteredTaskListDone() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        public ObservableList\u003cTask\u003e getFilteredTasksList() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        public void updateFilteredTasksList(Predicate\u003cTask\u003e predicate) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        public void addMember(Member member) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        public boolean hasMember(Member member) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        public boolean hasMemberId(MemberId memId) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        public void deleteMember(Member target) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        public void setMember(Member target, Member editedMember) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        public int getMembersLength() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        public ObservableList\u003cMember\u003e getFilteredMembersList() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        public void updateFilteredMembersList(Predicate\u003cMember\u003e predicate) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        public int getTasksLength() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        public ObservableList\u003cInventory\u003e getFilteredInventoriesList() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        public void updateFilteredInventoriesList(Predicate\u003cInventory\u003e predicate) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        public void addInventory(Inventory inventory) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        public boolean hasInventory(Inventory inventory) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        public void deleteInventory(Inventory target) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        public void setInventory(Inventory target, Inventory editedInventory) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        public void addMapping(InvMemMapping mapping) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        public void addMapping(InvTasMapping mapping) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        public void addMapping(TasMemMapping mapping) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        public void deleteMapping(InvMemMapping mapping) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        public void deleteMapping(InvTasMapping mapping) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        public void deleteMapping(TasMemMapping mapping) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        public boolean hasMapping(InvMemMapping mapping) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        public boolean hasMapping(InvTasMapping mapping) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        public boolean hasMapping(TasMemMapping mapping) {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        public ObservableList\u003cMapping\u003e getFilteredMappingsList() {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        public void updateFilteredMappingsList(Predicate\u003cMapping\u003e predicate) {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        public Statistics getStatistics() {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        public void setStatistics(Statistics newStats) {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        public UserSettings getUserSettings() {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        public Path getUserSettingsFilePath() {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        public Theme getCurrentTheme() {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        public void setCurrentTheme(Theme newTheme) {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        public ClockFormat getCurrentClockFormat() {"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        public void setClockFormat(ClockFormat newClockFormat) {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     * A Model stub that contains a single task."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    private class ModelStubWithMember extends ModelStub {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        private final Member member;"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        ModelStubWithMember(Member member) {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            requireNonNull(member);"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            this.member \u003d member;"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        public boolean hasMember(Member member) {"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            requireNonNull(member);"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            return this.member.isSameMember(member);"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     * A Model stub that always accept the task being added."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    private class ModelStubAcceptingMemberAdded extends ModelStub {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        final ArrayList\u003cMember\u003e membersAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        public boolean hasMember(Member member) {"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            requireNonNull(member);"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            return membersAdded.stream().anyMatch(member::isSameMember);"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        public void addMember(Member member) {"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            requireNonNull(member);"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            membersAdded.add(member);"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        public ReadOnlyProjectDashboard getProjectDashboard() {"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            return new ProjectDashboard();"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambhinav": 54,
      "ArunBeCoding": 16,
      "seahlynn": 294,
      "gabrielseow": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddTaskCommandIntegrationTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static seedu.address.testutil.TypicalTasksMembers.getTypicalProjectDashboard;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.UserSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seahlynn"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddTaskCommand}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "public class AddTaskCommandIntegrationTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        model \u003d new ModelManager(getTypicalProjectDashboard(), new UserPrefs(), new UserSettings());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    // TODO @ambhinav Test fails with \"Operation would result in duplicate tasks\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public void execute_newTask_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        Task validTask \u003d new TaskBuilder().build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getProjectDashboard(), new UserPrefs(), new UserSettings());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        expectedModel.addTask(validTask);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        assertCommandSuccess(new AddTaskCommand(validTask), model,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "                String.format(AddTaskCommand.MESSAGE_SUCCESS, validTask), expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public void execute_duplicateTask_throwsCommandException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        Task taskInList \u003d model.getProjectDashboard().getTaskList().get(0);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        assertCommandFailure(new AddTaskCommand(taskInList), model, AddTaskCommand.MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambhinav": 11,
      "seahlynn": 6,
      "-": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddTaskCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.ProjectDashboard;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.ReadOnlyProjectDashboard;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.UserSettings;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import seedu.address.model.inventory.Inventory;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.mapping.Mapping;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import seedu.address.model.mapping.InvMemMapping;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import seedu.address.model.mapping.InvTasMapping;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import seedu.address.model.mapping.TasMemMapping;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.model.member.Member;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import seedu.address.model.member.MemberId;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.settings.ClockFormat;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.settings.Theme;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.model.statistics.Statistics;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "public class AddTaskCommandTest {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public void constructor_nullTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddTaskCommand(null));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public void execute_taskAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        ModelStubAcceptingTaskAdded modelStub \u003d new ModelStubAcceptingTaskAdded();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        Task validTask \u003d new TaskBuilder().build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        CommandResult commandResult \u003d new AddTaskCommand(validTask).execute(modelStub);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        assertEquals(String.format(AddTaskCommand.MESSAGE_SUCCESS, validTask), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertEquals(Arrays.asList(validTask), modelStub.tasksAdded);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public void execute_duplicateTask_throwsCommandException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        Task validTask \u003d new TaskBuilder().build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        AddTaskCommand addTaskCommand \u003d new AddTaskCommand(validTask);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithTask(validTask);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        assertThrows(CommandException.class, addTaskCommand.MESSAGE_DUPLICATE_TASK, () -\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            addTaskCommand.execute(modelStub));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        Task alice \u003d new TaskBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        Task bob \u003d new TaskBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        AddTaskCommand addAliceCommand \u003d new AddTaskCommand(alice);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        AddTaskCommand addBobCommand \u003d new AddTaskCommand(bob);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        AddTaskCommand addAliceCommandCopy \u003d new AddTaskCommand(alice);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        // different task -\u003e returns false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        public Path getProjectDashboardFilePath() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        public void setProjectDashboardFilePath(Path projectDashboardFilePath) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        public void addTask(Task task) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        public void setProjectDashboard(ReadOnlyProjectDashboard newData) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        public ReadOnlyProjectDashboard getProjectDashboard() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        public void deleteTask(Task target) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        public void setTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        public ObservableList\u003cTask\u003e getFilteredTaskListByDeadline() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        public ObservableList\u003cTask\u003e getFilteredTaskListNotStarted() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        public ObservableList\u003cTask\u003e getFilteredTaskListDoing() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        public ObservableList\u003cTask\u003e getFilteredTaskListDone() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        public ObservableList\u003cTask\u003e getFilteredTasksList() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        public void updateFilteredTasksList(Predicate\u003cTask\u003e predicate) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        public void addMember(Member member) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        public boolean hasMember(Member member) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        public boolean hasMemberId(MemberId memId) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        public void deleteMember(Member target) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        public void setMember(Member target, Member editedMember) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        public int getMembersLength() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        public ObservableList\u003cMember\u003e getFilteredMembersList() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        public void updateFilteredMembersList(Predicate\u003cMember\u003e predicate) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        public int getTasksLength() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        public ObservableList\u003cInventory\u003e getFilteredInventoriesList() {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        public void updateFilteredInventoriesList(Predicate\u003cInventory\u003e predicate) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        public void addInventory(Inventory inventory) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        public boolean hasInventory(Inventory inventory) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        public void deleteInventory(Inventory target) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        public void setInventory(Inventory target, Inventory editedInventory) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        public void addMapping(InvMemMapping mapping) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        public void addMapping(InvTasMapping mapping) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        public void addMapping(TasMemMapping mapping) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        public void deleteMapping(InvMemMapping mapping) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        public void deleteMapping(InvTasMapping mapping) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        public void deleteMapping(TasMemMapping mapping) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        public boolean hasMapping(InvMemMapping mapping) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");        }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        public boolean hasMapping(InvTasMapping mapping) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");        }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        public boolean hasMapping(TasMemMapping mapping) {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");        }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        public ObservableList\u003cMapping\u003e getFilteredMappingsList() {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");        }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        public void updateFilteredMappingsList(Predicate\u003cMapping\u003e predicate) {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        public Statistics getStatistics() {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        public void setStatistics(Statistics newStats) {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        public UserSettings getUserSettings() {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        public Path getUserSettingsFilePath() {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        public Theme getCurrentTheme() {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        public void setCurrentTheme(Theme newTheme) {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        public ClockFormat getCurrentClockFormat() {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        public void setClockFormat(ClockFormat newClockFormat) {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * A Model stub that contains a single task."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    private class ModelStubWithTask extends ModelStub {"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        private final Task task;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        ModelStubWithTask(Task task) {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            requireNonNull(task);"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            this.task \u003d task;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            requireNonNull(task);"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            return this.task.isSameTask(task);"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * A Model stub that always accept the task being added."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    private class ModelStubAcceptingTaskAdded extends ModelStub {"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        final ArrayList\u003cTask\u003e tasksAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            requireNonNull(task);"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            return tasksAdded.stream().anyMatch(task::isSameTask);"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        public void addTask(Task task) {"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            requireNonNull(task);"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            tasksAdded.add(task);"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        public ReadOnlyProjectDashboard getProjectDashboard() {"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            return new ProjectDashboard();"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambhinav": 100,
      "ArunBeCoding": 42,
      "seahlynn": 80,
      "-": 140,
      "gabrielseow": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static seedu.address.testutil.TypicalTasksMembers.getTypicalProjectDashboard;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.ProjectDashboard;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.UserSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public void execute_emptyProjectDashboard_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public void execute_nonEmptyProjectDashboard_success() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalProjectDashboard(), new UserPrefs(), new UserSettings());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalProjectDashboard(), new UserPrefs(), new UserSettings());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        expectedModel.setProjectDashboard(new ProjectDashboard());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambhinav": 7,
      "seahlynn": 1,
      "-": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandResultTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false, false)));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false, false)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true, false)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true, false, false).hashCode());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, true, false).hashCode());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambhinav": 5,
      "-": 49
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MEMBER_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_STATUS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.ProjectDashboard;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import seedu.address.model.inventory.InvName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import seedu.address.model.inventory.Price;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.model.member.Member;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.model.member.MemberId;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.model.member.MemberNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.model.member.MemberNameContainsKeywordsPredicateTest;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.task.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.task.TaskStatus;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.testutil.EditTaskDescriptorBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    /* Task related names will be split into four categories: Finance and Publicity */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public static final String VALID_TASK_NAME_FINANCE \u003d \"Review Project Budget\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public static final String VALID_MEMBER_NAME_FINANCE \u003d \"Gabriel Seow\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public static final String VALID_MEMBER_ID_FINANCE \u003d \"GS\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public static final String VALID_TASK_NAME_PUBLICITY \u003d \"Build Project Website\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public static final String VALID_MEMBER_NAME_PUBLICITY \u003d \"Abhinav\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public static final String VALID_MEMBER_ID_PUBLICITY \u003d \"AB\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public static final String VALID_TASK_STATUS_FINANCE \u003d \"unbegun\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public static final String VALID_TASK_STATUS_PUBLICITY \u003d \"doing\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public static final String VALID_TAG_FINANCE \u003d \"finance\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public static final String VALID_MEMBER_TAG_FINANCE \u003d \"ChiefProgrammer\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public static final String VALID_TAG_PUBLICITY \u003d \"publicity\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public static final String VALID_MEMBER_TAG_PUBLICITY \u003d \"UIdesigner\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public static final String VALID_TAG_URGENCY \u003d \"urgent\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public static final String TASK_NAME_DESC_FINANCE \u003d \" \" + PREFIX_TASK_NAME + VALID_TASK_NAME_FINANCE;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public static final String MEMBER_NAME_DESC_FINANCE \u003d \" \" + PREFIX_MEMBER_NAME + VALID_MEMBER_NAME_FINANCE;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public static final String TASK_NAME_DESC_PUBLICITY \u003d \" \" + PREFIX_TASK_NAME + VALID_TASK_NAME_PUBLICITY;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public static final String TASK_STATUS_DESC_FINANCE \u003d \" \" + PREFIX_TASK_STATUS + VALID_TASK_STATUS_FINANCE;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public static final String TASK_STATUS_DESC_PUBLICITY \u003d \" \" + PREFIX_TASK_STATUS + VALID_TASK_STATUS_PUBLICITY;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public static final String TAG_DESC_PUBLICITY \u003d \" \" + PREFIX_TASK_TAG + VALID_TAG_PUBLICITY;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public static final String TAG_DESC_URGENCY \u003d \" \" + PREFIX_TASK_TAG + VALID_TAG_URGENCY;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public static final String TAG_DESC_FINANCE \u003d \" \" + PREFIX_TASK_TAG + VALID_TAG_FINANCE;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public static final String VALID_INVENTORY_NAME_SPORTS \u003d \"Sports equipments\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public static final String VALID_INVENTORY_NAME_MUSIC \u003d \"Drums\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public static final double VALID_INVENTORY_PRICE_SPORTS \u003d 79.50;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public static final double VALID_INVENTORY_PRICE_MUSIC \u003d 999;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public static final String INVALID_TASK_NAME_DESC \u003d \" \" + PREFIX_TASK_NAME"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            + \"Project Review\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public static final String INVALID_TASK_STATUS_DESC \u003d \" \" + PREFIX_TASK_STATUS"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            + \"reviewing\"; // invalid status - statuses are determined in {@code TaskStatus}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TASK_TAG"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            + \"paused*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public static final EditCommand.EditTaskDescriptor TASK_DESC_FINANCE;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public static final EditCommand.EditTaskDescriptor TASK_DESC_PUBLICITY;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public static final EditInventoryCommand.EditInventoryDescriptor INVENTORY_DESC_TOY;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        TASK_DESC_FINANCE \u003d new EditTaskDescriptorBuilder().withName(VALID_TASK_NAME_FINANCE)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                .withStatus(TaskStatus.UNBEGUN)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                .withTags(VALID_TAG_FINANCE).build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        TASK_DESC_PUBLICITY \u003d new EditTaskDescriptorBuilder().withName(VALID_TASK_NAME_PUBLICITY)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                .withStatus(TaskStatus.DOING)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                .withTags(VALID_TAG_PUBLICITY).build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        INVENTORY_DESC_TOY \u003d new EditInventoryCommand.EditInventoryDescriptor();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        INVENTORY_DESC_TOY.setName(new InvName(\"toy\"));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        INVENTORY_DESC_TOY.setPrice(new Price(1));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        INVENTORY_DESC_TOY.setTaskId(new Index(1));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        INVENTORY_DESC_TOY.setMemId(new MemberId(\"rak\"));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * - the address book, filtered task list and selected task in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        ProjectDashboard expectedProjectDashboard \u003d new ProjectDashboard(actualModel.getProjectDashboard());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        List\u003cTask\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredTasksList());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertEquals(expectedProjectDashboard, actualModel.getProjectDashboard());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredTasksList());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the task at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public static void showTaskAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredTasksList().size());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        Task task \u003d model.getFilteredTasksList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        final String[] splitName \u003d task.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        model.updateFilteredTasksList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertEquals(1, model.getFilteredTasksList().size());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the member at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public static void showMemberAtId(Model model, MemberId targetId) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        List\u003cMember\u003e lastShownList \u003d model.getFilteredMembersList();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        boolean contains \u003d false;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        Member targetMember  \u003d null;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        for (int i \u003d 0; i \u003c lastShownList.size(); i++) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            if (lastShownList.get(i).getId().equals(targetId)) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "                contains \u003d true;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "                targetMember \u003d lastShownList.get(i);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        assertTrue(contains);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        final String[] splitName \u003d targetMember.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        model.updateFilteredMembersList(new MemberNameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        assertEquals(1, model.getFilteredMembersList().size());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambhinav": 49,
      "ArunBeCoding": 14,
      "seahlynn": 35,
      "-": 76
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteInventoryCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_INVENTORY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_INVENTORY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import static seedu.address.testutil.TypicalInventories.getTypicalProjectDashboard;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.UserSettings;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import seedu.address.model.inventory.Inventory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "public class DeleteInventoryCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalProjectDashboard(), new UserPrefs(), new UserSettings());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        Inventory inventoryToDelete \u003d model.getFilteredInventoriesList().get(INDEX_FIRST_INVENTORY.getZeroBased());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        DeleteInventoryCommand deleteInventoryCommand \u003d new DeleteInventoryCommand(INDEX_FIRST_INVENTORY);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteInventoryCommand.MESSAGE_DELETE_INVENTORY_SUCCESS,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                                                    inventoryToDelete);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getProjectDashboard(), new UserPrefs(), new UserSettings());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        expectedModel.deleteInventory(inventoryToDelete);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        assertCommandSuccess(deleteInventoryCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredInventoriesList().size() + 1);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        DeleteInventoryCommand deleteInventoryCommand \u003d new DeleteInventoryCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        assertCommandFailure(deleteInventoryCommand, model, Messages.MESSAGE_INVALID_INVENTORY_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        DeleteInventoryCommand deleteFirstCommand \u003d new DeleteInventoryCommand(INDEX_FIRST_INVENTORY);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        DeleteInventoryCommand deleteSecondCommand \u003d new DeleteInventoryCommand(INDEX_SECOND_INVENTORY);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        DeleteInventoryCommand deleteFirstCommandCopy \u003d new DeleteInventoryCommand(INDEX_FIRST_INVENTORY);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        // different task -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambhinav": 3,
      "ArunBeCoding": 66
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteMemberCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showMemberAtId;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static seedu.address.testutil.TypicalIds.ID_FIRST_MEMBER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static seedu.address.testutil.TypicalIds.ID_SECOND_MEMBER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static seedu.address.testutil.TypicalTasksMembers.getTypicalProjectDashboard;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.UserSettings;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.model.member.Member;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.model.member.MemberId;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seahlynn"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seahlynn"
        },
        "content": " * {@code DeleteMemberCommand}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seahlynn"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "public class DeleteMemberCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalProjectDashboard(), new UserPrefs(), new UserSettings());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public void execute_validIdUnfilteredList_success() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        Member memberToDelete \u003d null;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        List\u003cMember\u003e lastShownList \u003d model.getFilteredMembersList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        DeleteMemberCommand deleteMemberCommand \u003d new DeleteMemberCommand(ID_FIRST_MEMBER);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        for (int i \u003d 0; i \u003c lastShownList.size(); i++) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            if (lastShownList.get(i).getId().equals(ID_FIRST_MEMBER)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "                memberToDelete \u003d lastShownList.get(i);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        String expectedMessage \u003d String.format(deleteMemberCommand.MESSAGE_DELETE_MEMBER_SUCCESS, memberToDelete);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getProjectDashboard(), new UserPrefs(), new UserSettings());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        expectedModel.deleteMember(memberToDelete);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        assertCommandSuccess(deleteMemberCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public void execute_invalidIdUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        MemberId invalidId \u003d new MemberId(\"not inside\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        DeleteMemberCommand deleteMemberCommand \u003d new DeleteMemberCommand(invalidId);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        assertCommandFailure(deleteMemberCommand, model, Messages.MESSAGE_INVALID_MEMBER_ID);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public void execute_validIdFilteredList_success() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        showMemberAtId(model, ID_FIRST_MEMBER);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        Member memberToDelete \u003d null;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        List\u003cMember\u003e lastShownList \u003d model.getFilteredMembersList();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        DeleteMemberCommand deleteMemberCommand \u003d new DeleteMemberCommand(ID_FIRST_MEMBER);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        for (int i \u003d 0; i \u003c lastShownList.size(); i++) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            if (lastShownList.get(i).getId().equals(ID_FIRST_MEMBER)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "                memberToDelete \u003d lastShownList.get(i);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        String expectedMessage \u003d String.format(deleteMemberCommand.MESSAGE_DELETE_MEMBER_SUCCESS, memberToDelete);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getProjectDashboard(), new UserPrefs(), new UserSettings());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        expectedModel.deleteMember(memberToDelete);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        showNoMember(expectedModel);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        assertCommandSuccess(deleteMemberCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public void execute_invalidIdFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        showMemberAtId(model, ID_FIRST_MEMBER);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        MemberId invalidId \u003d ID_SECOND_MEMBER;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        //assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getProjectDashboard().getTaskList().size());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        DeleteMemberCommand deleteMemberCommand \u003d new DeleteMemberCommand(invalidId);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        assertCommandFailure(deleteMemberCommand, model, Messages.MESSAGE_INVALID_MEMBER_ID);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        DeleteMemberCommand deleteFirstCommand \u003d new DeleteMemberCommand(ID_FIRST_MEMBER);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        DeleteMemberCommand deleteSecondCommand \u003d new DeleteMemberCommand(ID_SECOND_MEMBER);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        DeleteMemberCommand deleteFirstCommandCopy \u003d new DeleteMemberCommand(ID_FIRST_MEMBER);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        // different task -\u003e returns false"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    private void showNoMember(Model model) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        model.updateFilteredMembersList(p -\u003e false);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        assertTrue(model.getFilteredMembersList().isEmpty());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambhinav": 4,
      "seahlynn": 123
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteTaskCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showTaskAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_TASK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static seedu.address.testutil.TypicalTasksMembers.getTypicalProjectDashboard;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.UserSettings;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seahlynn"
        },
        "content": " * {@code DeleteTaskCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "public class DeleteTaskCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalProjectDashboard(), new UserPrefs(), new UserSettings());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        Task taskToDelete \u003d model.getFilteredTasksList().get(INDEX_FIRST_TASK.getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        DeleteTaskCommand deleteTaskCommand \u003d new DeleteTaskCommand(INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        String expectedMessage \u003d String.format(deleteTaskCommand.MESSAGE_DELETE_TASK_SUCCESS, taskToDelete);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getProjectDashboard(), new UserPrefs(), new UserSettings());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        expectedModel.deleteTask(taskToDelete);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        assertCommandSuccess(deleteTaskCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredTasksList().size() + 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        DeleteTaskCommand deleteTaskCommand \u003d new DeleteTaskCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        assertCommandFailure(deleteTaskCommand, model, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        showTaskAtIndex(model, INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        Task taskToDelete \u003d model.getFilteredTasksList().get(INDEX_FIRST_TASK.getZeroBased());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        DeleteTaskCommand deleteTaskCommand \u003d new DeleteTaskCommand(INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        String expectedMessage \u003d String.format(deleteTaskCommand.MESSAGE_DELETE_TASK_SUCCESS, taskToDelete);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getProjectDashboard(), new UserPrefs(), new UserSettings());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        expectedModel.deleteTask(taskToDelete);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        showNoTask(expectedModel);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        assertCommandSuccess(deleteTaskCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        showTaskAtIndex(model, INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_TASK;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getProjectDashboard().getTaskList().size());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        DeleteTaskCommand deleteTaskCommand \u003d new DeleteTaskCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        assertCommandFailure(deleteTaskCommand, model, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        DeleteTaskCommand deleteFirstCommand \u003d new DeleteTaskCommand(INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        DeleteTaskCommand deleteSecondCommand \u003d new DeleteTaskCommand(INDEX_SECOND_TASK);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        DeleteTaskCommand deleteFirstCommandCopy \u003d new DeleteTaskCommand(INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        // different task -\u003e returns false"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    private void showNoTask(Model model) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        model.updateFilteredTasksList(p -\u003e false);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertTrue(model.getFilteredTasksList().isEmpty());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambhinav": 22,
      "seahlynn": 16,
      "-": 72
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TASK_DESC_FINANCE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TASK_DESC_PUBLICITY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FINANCE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TASK_NAME_FINANCE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showTaskAtIndex;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_TASK;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static seedu.address.testutil.TypicalTasksMembers.getTypicalProjectDashboard;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditTaskDescriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.ProjectDashboard;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.UserSettings;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.testutil.EditTaskDescriptorBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalProjectDashboard(), new UserPrefs(), new UserSettings());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        Task editedTask \u003d new TaskBuilder().build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        EditCommand.EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder(editedTask).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_TASK, descriptor);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_TASK_SUCCESS, editedTask);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new ProjectDashboard("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                model.getProjectDashboard()), new UserPrefs(), new UserSettings());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        expectedModel.setTask(model.getFilteredTasksList().get(0), editedTask);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        Index indexLastTask \u003d Index.fromOneBased(model.getFilteredTasksList().size());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        Task lastTask \u003d model.getFilteredTasksList().get(indexLastTask.getZeroBased());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        TaskBuilder taskInList \u003d new TaskBuilder(lastTask);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        Task editedTask \u003d taskInList.withName(VALID_TASK_NAME_FINANCE)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                .withTags(VALID_TAG_FINANCE).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder().withName(VALID_TASK_NAME_FINANCE)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                .withTags(VALID_TAG_FINANCE).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastTask, descriptor);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_TASK_SUCCESS, editedTask);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new ProjectDashboard("
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                model.getProjectDashboard()), new UserPrefs(), new UserSettings());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        expectedModel.setTask(lastTask, editedTask);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_TASK, new EditTaskDescriptor());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        Task editedTask \u003d model.getFilteredTasksList().get(INDEX_FIRST_TASK.getZeroBased());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_TASK_SUCCESS, editedTask);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new ProjectDashboard("
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                model.getProjectDashboard()), new UserPrefs(), new UserSettings());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        showTaskAtIndex(model, INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        Task taskInFilteredList \u003d model.getFilteredTasksList().get(INDEX_FIRST_TASK.getZeroBased());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        Task editedTask \u003d new TaskBuilder(taskInFilteredList).withName(VALID_TASK_NAME_FINANCE).build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_TASK,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                new EditTaskDescriptorBuilder().withName(VALID_TASK_NAME_FINANCE).build());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_TASK_SUCCESS, editedTask);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new ProjectDashboard("
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                model.getProjectDashboard()), new UserPrefs(), new UserSettings());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        expectedModel.setTask(model.getFilteredTasksList().get(0), editedTask);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public void execute_duplicateTaskUnfilteredList_failure() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        Task firstTask \u003d model.getFilteredTasksList().get(INDEX_FIRST_TASK.getZeroBased());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        EditCommand.EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder(firstTask).build();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_TASK, descriptor);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public void execute_duplicateTaskFilteredList_failure() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        showTaskAtIndex(model, INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        // edit task in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        Task taskInList \u003d model.getProjectDashboard().getTaskList().get(INDEX_SECOND_TASK.getZeroBased());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_TASK,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                new EditTaskDescriptorBuilder(taskInList).build());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public void execute_invalidTaskIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredTasksList().size() + 1);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder().withName(VALID_TASK_NAME_FINANCE).build();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public void execute_invalidTaskIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        showTaskAtIndex(model, INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_TASK;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getProjectDashboard().getTaskList().size());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                new EditTaskDescriptorBuilder().withName(VALID_TASK_NAME_FINANCE).build());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_TASK, TASK_DESC_FINANCE);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        EditCommand.EditTaskDescriptor copyDescriptor \u003d new EditTaskDescriptor(TASK_DESC_FINANCE);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_TASK, copyDescriptor);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_TASK, TASK_DESC_FINANCE)));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_TASK, TASK_DESC_PUBLICITY)));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambhinav": 74,
      "seahlynn": 1,
      "-": 102
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditInventoryCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVENTORY_DESC_TOY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_INVENTORY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_INVENTORY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import static seedu.address.testutil.TypicalTasksMembers.getTypicalProjectDashboard;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import seedu.address.model.ProjectDashboard;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.UserSettings;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import seedu.address.model.inventory.InvName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import seedu.address.model.inventory.Inventory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import seedu.address.model.inventory.Price;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import seedu.address.model.member.MemberId;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import seedu.address.testutil.InventoryBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "public class EditInventoryCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalProjectDashboard(), new UserPrefs(), new UserSettings());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    private static final EditInventoryCommand.EditInventoryDescriptor INVENTORY_DESC_BALL \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                                new EditInventoryCommand.EditInventoryDescriptor();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        INVENTORY_DESC_BALL.setName(new InvName(\"Sample Inventory Name\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        INVENTORY_DESC_BALL.setPrice(new Price(0));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        INVENTORY_DESC_BALL.setTaskId(new Index(1));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        INVENTORY_DESC_BALL.setMemId(new MemberId(\"rak\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        Inventory editedInventory \u003d new InventoryBuilder().build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        EditInventoryCommand editInventoryCommand \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                new EditInventoryCommand(INDEX_FIRST_INVENTORY, INVENTORY_DESC_BALL);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        String expectedMessage \u003d String.format(EditInventoryCommand.MESSAGE_EDIT_INVENTORY_SUCCESS, editedInventory);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new ProjectDashboard("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                model.getProjectDashboard()), new UserPrefs(), new UserSettings());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        expectedModel.setInventory(model.getFilteredInventoriesList().get(0), editedInventory);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        assertCommandSuccess(editInventoryCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        Index indexLastInventory \u003d Index.fromOneBased(model.getFilteredInventoriesList().size());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        Inventory lastInventory \u003d model.getFilteredInventoriesList().get(indexLastInventory.getZeroBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        InventoryBuilder inventoryInList \u003d new InventoryBuilder(lastInventory);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        Inventory editedInventory \u003d inventoryInList.withName(\"Boxes\")"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                .withPrice(new Price(12.10)).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        INVENTORY_DESC_BALL.setName(new InvName(\"BOXES\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        INVENTORY_DESC_BALL.setPrice(new Price(12.20));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        EditInventoryCommand.EditInventoryDescriptor descriptor \u003d INVENTORY_DESC_BALL;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        EditInventoryCommand editInventoryCommand \u003d new EditInventoryCommand(indexLastInventory, descriptor);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        String expectedMessage \u003d String.format(EditInventoryCommand.MESSAGE_EDIT_INVENTORY_SUCCESS, editedInventory);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new ProjectDashboard(model.getProjectDashboard()), new UserPrefs());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        expectedModel.setInventory(lastInventory, editedInventory);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        assertCommandSuccess(editInventoryCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        EditInventoryCommand editInventoryCommand \u003d"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                new EditInventoryCommand(INDEX_FIRST_INVENTORY, new EditInventoryCommand.EditInventoryDescriptor());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        Inventory editedInventory \u003d model.getFilteredInventoriesList().get(INDEX_FIRST_INVENTORY.getZeroBased());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        String expectedMessage \u003d String.format(EditInventoryCommand.MESSAGE_EDIT_INVENTORY_SUCCESS, editedInventory);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new ProjectDashboard("
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                model.getProjectDashboard()), new UserPrefs(), new UserSettings());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        assertCommandSuccess(editInventoryCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public void execute_duplicateTaskUnfilteredList_failure() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        Inventory firstInventory \u003d model.getFilteredInventoriesList().get(INDEX_FIRST_INVENTORY.getZeroBased());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        EditInventoryCommand.EditInventoryDescriptor descriptor \u003d INVENTORY_DESC_BALL;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        EditInventoryCommand editInventoryCommand \u003d new EditInventoryCommand(INDEX_SECOND_INVENTORY, descriptor);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        assertCommandFailure(editInventoryCommand, model, EditInventoryCommand.MESSAGE_DUPLICATE_INVENTORY);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public void execute_invalidTaskIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredInventoriesList().size() + 1);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        EditInventoryCommand.EditInventoryDescriptor descriptor \u003d INVENTORY_DESC_BALL;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        EditInventoryCommand editInventoryCommand \u003d new EditInventoryCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        assertCommandFailure(editInventoryCommand, model, Messages.MESSAGE_INVALID_INVENTORY_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        final EditInventoryCommand standardCommand \u003d"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                new EditInventoryCommand(INDEX_FIRST_INVENTORY, INVENTORY_DESC_TOY);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        //"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        //// same values -\u003e returns true"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        //EditInventoryCommand.EditInventoryDescriptor copyDescriptor \u003d"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        // new EditInventoryCommand.EditInventoryDescriptor(INVENTORY_DESC_TOY);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        //EditInventoryCommand commandWithSameValues \u003d new EditInventoryCommand(INDEX_FIRST_INVENTORY, copyDescriptor);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        //assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        assertFalse(standardCommand.equals(new EditInventoryCommand(INDEX_SECOND_INVENTORY, INVENTORY_DESC_TOY)));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        assertFalse(standardCommand.equals(new EditInventoryCommand(INDEX_FIRST_INVENTORY, INVENTORY_DESC_TOY)));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambhinav": 18,
      "ArunBeCoding": 125
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditTaskDescriptorTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TASK_DESC_FINANCE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TASK_DESC_PUBLICITY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_PUBLICITY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TASK_NAME_PUBLICITY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditTaskDescriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.task.TaskStatus;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.testutil.EditTaskDescriptorBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "public class EditTaskDescriptorTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        EditTaskDescriptor descriptorWithSameValues \u003d new EditCommand.EditTaskDescriptor(TASK_DESC_FINANCE);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertTrue(TASK_DESC_FINANCE.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertTrue(TASK_DESC_FINANCE.equals(TASK_DESC_FINANCE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertFalse(TASK_DESC_FINANCE.equals(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertFalse(TASK_DESC_FINANCE.equals(5));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertFalse(TASK_DESC_FINANCE.equals(TASK_DESC_PUBLICITY));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        EditTaskDescriptor editedFinanceTask \u003d new EditTaskDescriptorBuilder(TASK_DESC_FINANCE)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                .withName(VALID_TASK_NAME_PUBLICITY).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertFalse(TASK_DESC_FINANCE.equals(editedFinanceTask));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        // different task status -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        editedFinanceTask \u003d new EditTaskDescriptorBuilder(TASK_DESC_FINANCE)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                .withStatus(TaskStatus.DOING).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertFalse(TASK_DESC_FINANCE.equals(editedFinanceTask));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        editedFinanceTask \u003d new EditTaskDescriptorBuilder(TASK_DESC_FINANCE).withTags(VALID_TAG_PUBLICITY).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertFalse(TASK_DESC_FINANCE.equals(editedFinanceTask));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambhinav": 24,
      "-": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ExitCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true, false);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambhinav": 1,
      "-": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_TASKS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static seedu.address.testutil.TypicalTasksMembers.BRIEFING_PREPARATION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static seedu.address.testutil.TypicalTasksMembers.GET_SPONSORS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static seedu.address.testutil.TypicalTasksMembers.ORGANISE_STORE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static seedu.address.testutil.TypicalTasksMembers.getTypicalProjectDashboard;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.UserSettings;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.task.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalProjectDashboard(), new UserPrefs(), new UserSettings());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalProjectDashboard(), new UserPrefs(), new UserSettings());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        // different task -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public void execute_zeroKeywords_noTaskFound() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_TASKS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        expectedModel.updateFilteredTasksList(predicate);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredTasksList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public void execute_multipleKeywords_multipleTasksFound() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_TASKS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"sponsors presentation store\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        expectedModel.updateFilteredTasksList(predicate);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertEquals(Arrays.asList(GET_SPONSORS, BRIEFING_PREPARATION, ORGANISE_STORE), model.getFilteredTasksList());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambhinav": 15,
      "seahlynn": 4,
      "-": 65
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindMemberCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_MEMBERS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static seedu.address.testutil.TypicalTasksMembers.ELSA_KOH;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static seedu.address.testutil.TypicalTasksMembers.GABRIEL_SEOW;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static seedu.address.testutil.TypicalTasksMembers.SEAH_LYNN;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static seedu.address.testutil.TypicalTasksMembers.getTypicalProjectDashboard;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.UserSettings;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.model.member.MemberNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "public class FindMemberCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalProjectDashboard(), new UserPrefs(), new UserSettings());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalProjectDashboard(), new UserPrefs(), new UserSettings());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        MemberNameContainsKeywordsPredicate firstPredicate \u003d new MemberNameContainsKeywordsPredicate(Collections.singletonList(\"John\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        MemberNameContainsKeywordsPredicate secondPredicate \u003d new MemberNameContainsKeywordsPredicate(Collections.singletonList(\"Gabriel\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        FindMemberCommand findFirstCommand \u003d new FindMemberCommand(firstPredicate);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        FindMemberCommand findSecondCommand \u003d new FindMemberCommand(secondPredicate);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        FindMemberCommand findFirstCommandCopy \u003d new FindMemberCommand(firstPredicate);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        // different task -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public void execute_zeroKeywords_noMemberFound() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_MEMBERS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        MemberNameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        FindMemberCommand command \u003d new FindMemberCommand(predicate);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        expectedModel.updateFilteredMembersList(predicate);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredMembersList());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public void execute_multipleKeywords_multipleMembersFound() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_MEMBERS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        MemberNameContainsKeywordsPredicate predicate \u003d preparePredicate(\"gabriel elsa lynn\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        FindMemberCommand command \u003d new FindMemberCommand(predicate);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        expectedModel.updateFilteredMembersList(predicate);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        assertEquals(Arrays.asList(GABRIEL_SEOW, ELSA_KOH, SEAH_LYNN), model.getFilteredMembersList());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    private MemberNameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        return new MemberNameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambhinav": 3,
      "seahlynn": 76
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/GetStatisticsCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static seedu.address.testutil.TypicalTasksMembers.getTypicalProjectDashboard;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.UserSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "public class GetStatisticsCommandTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalProjectDashboard(), new UserPrefs(), new UserSettings());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalProjectDashboard(), new UserPrefs(), new UserSettings());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambhinav": 3,
      "seahlynn": 12
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/HelpCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, true, false, false);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambhinav": 1,
      "-": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showTaskAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static seedu.address.testutil.TypicalTasksMembers.getTypicalProjectDashboard;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.UserSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        model \u003d new ModelManager(getTypicalProjectDashboard(), new UserPrefs(), new UserSettings());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getProjectDashboard(), new UserPrefs(), new UserSettings());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        showTaskAtIndex(model, INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambhinav": 6,
      "seahlynn": 1,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListMemberCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showMemberAtId;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static seedu.address.testutil.TypicalIds.ID_FIRST_MEMBER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static seedu.address.testutil.TypicalTasksMembers.getTypicalProjectDashboard;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.UserSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "public class ListMemberCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        model \u003d new ModelManager(getTypicalProjectDashboard(), new UserPrefs(), new UserSettings());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getProjectDashboard(), new UserPrefs(), new UserSettings());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        assertCommandSuccess(new ListMemberCommand(), model, ListMemberCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        showMemberAtId(model, ID_FIRST_MEMBER);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        assertCommandSuccess(new ListMemberCommand(), model, ListMemberCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambhinav": 3,
      "seahlynn": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddTaskCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "/*import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TASK_NAME_DESC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TASK_STATUS_DESC;*/"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TASK_NAME_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TASK_STATUS_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MEMBER_NAME_DESC_FINANCE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "/*import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FINANCE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_PUBLICITY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_URGENCY;*/"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FINANCE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_PUBLICITY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_URGENCY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TASK_NAME_DESC_FINANCE;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "/*import static seedu.address.logic.commands.CommandTestUtil.TASK_NAME_DESC_PUBLICITY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TASK_STATUS_DESC_FINANCE;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TASK_STATUS_DESC_PUBLICITY;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_PUBLICITY;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_URGENCY;*/"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TASK_NAME_DESC_PUBLICITY;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TASK_STATUS_DESC_FINANCE;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TASK_STATUS_DESC_PUBLICITY;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_PUBLICITY;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_URGENCY;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TASK_NAME_FINANCE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "//import static seedu.address.testutil.TypicalTasksMembers.BUILD_WEBSITE;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import static seedu.address.testutil.TypicalTasksMembers.BUILD_WEBSITE;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static seedu.address.testutil.TypicalTasksMembers.REVIEW_BUDGET;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.logic.commands.AddTaskCommand;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "//import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "//import seedu.address.model.task.Name;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.task.Name;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "//import seedu.address.model.task.TaskStatus;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.task.TaskStatus;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "public class AddTaskCommandParserTest {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    private AddTaskCommandParser parser \u003d new AddTaskCommandParser();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        Task expectedTask \u003d new TaskBuilder(BUILD_WEBSITE).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + TASK_NAME_DESC_PUBLICITY"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "                + TASK_STATUS_DESC_PUBLICITY + TAG_DESC_PUBLICITY, new AddTaskCommand(expectedTask));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertParseSuccess(parser, TASK_NAME_DESC_FINANCE + TASK_NAME_DESC_PUBLICITY"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "                + TASK_STATUS_DESC_PUBLICITY + TAG_DESC_PUBLICITY, new AddTaskCommand(expectedTask));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        // multiple status - last status accepted"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertParseSuccess(parser, TASK_NAME_DESC_PUBLICITY"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                + TASK_STATUS_DESC_FINANCE"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "                + TASK_STATUS_DESC_PUBLICITY + TAG_DESC_PUBLICITY, new AddTaskCommand(expectedTask));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        Task expectedTaskMultipleTags \u003d new TaskBuilder(BUILD_WEBSITE).withTags(VALID_TAG_PUBLICITY, VALID_TAG_URGENCY)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertParseSuccess(parser, TASK_NAME_DESC_PUBLICITY"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                + TASK_STATUS_DESC_PUBLICITY"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "                + TAG_DESC_URGENCY + TAG_DESC_PUBLICITY, new AddTaskCommand(expectedTaskMultipleTags));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        Task expectedTask \u003d new TaskBuilder(REVIEW_BUDGET).withTags().build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertParseSuccess(parser, TASK_NAME_DESC_FINANCE, new AddTaskCommand(expectedTask));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddTaskCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertParseFailure(parser, VALID_TASK_NAME_FINANCE, expectedMessage);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertParseFailure(parser, VALID_TASK_NAME_FINANCE, expectedMessage);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertParseFailure(parser, INVALID_TASK_NAME_DESC + TAG_DESC_FINANCE + TAG_DESC_PUBLICITY,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        // invalid task status"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertParseFailure(parser, TASK_NAME_DESC_PUBLICITY"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                + INVALID_TASK_STATUS_DESC"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                + TAG_DESC_FINANCE + TAG_DESC_PUBLICITY, TaskStatus.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertParseFailure(parser, TASK_NAME_DESC_PUBLICITY + INVALID_TAG_DESC + VALID_TAG_PUBLICITY,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertParseFailure(parser, INVALID_TASK_NAME_DESC, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + TASK_NAME_DESC_PUBLICITY"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                        + TAG_DESC_FINANCE + TAG_DESC_PUBLICITY,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddTaskCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambhinav": 55,
      "ArunBeCoding": 1,
      "seahlynn": 21,
      "-": 45
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteMemberCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static seedu.address.testutil.TypicalIds.ID_FIRST_MEMBER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.logic.commands.DeleteMemberCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "public class DeleteMemberCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    private DeleteMemberCommandParser parser \u003d new DeleteMemberCommandParser();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public void parse_validArgs_returnsDeleteTaskCommand() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        assertParseSuccess(parser, \"GS\", new DeleteMemberCommand(ID_FIRST_MEMBER));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        assertParseFailure(parser, \"3\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteMemberCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seahlynn": 24
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteTaskCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.logic.commands.DeleteTaskCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seahlynn"
        },
        "content": " * outside of the DeleteTaskCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seahlynn"
        },
        "content": " * same path through the DeleteTaskCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "public class DeleteTaskCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    private DeleteTaskCommandParser parser \u003d new DeleteTaskCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public void parse_validArgs_returnsDeleteTaskCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteTaskCommand(INDEX_FIRST_TASK));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteTaskCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambhinav": 1,
      "seahlynn": 8,
      "-": 23
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TASK_NAME_DESC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TASK_STATUS_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FINANCE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_PUBLICITY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_URGENCY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TASK_NAME_DESC_FINANCE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TASK_NAME_DESC_PUBLICITY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TASK_STATUS_DESC_FINANCE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TASK_STATUS_DESC_PUBLICITY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FINANCE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_PUBLICITY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_URGENCY;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TASK_NAME_FINANCE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TASK_NAME_PUBLICITY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TASK_STATUS_PUBLICITY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_TAG;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_TASK;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_TASK;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditTaskDescriptor;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.task.Name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.task.TaskStatus;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.testutil.EditTaskDescriptorBuilder;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TASK_TAG;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertParseFailure(parser, VALID_TASK_NAME_FINANCE, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertParseFailure(parser, \"-5\" + TASK_NAME_DESC_FINANCE, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertParseFailure(parser, \"0\" + TASK_NAME_DESC_FINANCE, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TASK_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Task} being edited,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_PUBLICITY + TAG_DESC_FINANCE + TAG_EMPTY,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_PUBLICITY + TAG_EMPTY + TAG_DESC_FINANCE,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_PUBLICITY + TAG_DESC_FINANCE,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TASK_NAME_DESC,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_TASK;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_DESC_FINANCE"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                + TASK_NAME_DESC_FINANCE;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder().withName(VALID_TASK_NAME_FINANCE)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                .withTags(VALID_TAG_FINANCE).build();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TASK_NAME_DESC_FINANCE;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder()"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                .withName(VALID_TASK_NAME_FINANCE).build();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    // TODO add tests for member and progress"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_TASK;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TASK_NAME_DESC_FINANCE;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        EditCommand.EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder()"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                .withName(VALID_TASK_NAME_FINANCE).build();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_PUBLICITY;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        descriptor \u003d new EditTaskDescriptorBuilder().withTags(VALID_TAG_PUBLICITY).build();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased()"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                + TASK_NAME_DESC_FINANCE"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                + TASK_STATUS_DESC_FINANCE + TAG_DESC_URGENCY"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                + TASK_NAME_DESC_PUBLICITY"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                + TASK_STATUS_DESC_PUBLICITY + TAG_DESC_PUBLICITY;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        EditCommand.EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder()"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                .withName(VALID_TASK_NAME_PUBLICITY)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                .withStatus(TaskStatus.valueOf(VALID_TASK_STATUS_PUBLICITY.toUpperCase()))"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                .withTags(VALID_TAG_PUBLICITY, VALID_TAG_URGENCY)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_TASK_STATUS_DESC + TASK_STATUS_DESC_PUBLICITY;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder()"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                .withStatus(TaskStatus.valueOf(VALID_TASK_STATUS_PUBLICITY.toUpperCase())).build();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FINANCE + INVALID_TASK_NAME_DESC"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                + TASK_NAME_DESC_FINANCE;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        descriptor \u003d new EditTaskDescriptorBuilder().withName(VALID_TASK_NAME_FINANCE).withTags(VALID_TAG_FINANCE)"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_TASK;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambhinav": 72,
      "-": 112
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FindCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.task.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambhinav": 1,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FindMemberCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.logic.commands.FindMemberCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.model.member.MemberNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "public class FindMemberCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    private FindMemberCommandParser parser \u003d new FindMemberCommandParser();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindMemberCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        FindMemberCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "                new FindMemberCommand(new MemberNameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seahlynn": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.task.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertEquals(INDEX_FIRST_TASK, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertEquals(INDEX_FIRST_TASK, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambhinav": 4,
      "-": 114
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ProjectDashboardParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.logic.commands.AddTaskCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.logic.commands.DeleteTaskCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditTaskDescriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.logic.commands.GetStatisticsCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.task.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.testutil.EditTaskDescriptorBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.testutil.TaskUtil;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "public class ProjectDashboardParserTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    private final ProjectDashboardParser parser \u003d new ProjectDashboardParser();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        Task task \u003d new TaskBuilder().build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        AddTaskCommand command \u003d (AddTaskCommand) parser.parseCommand(TaskUtil.getAddTaskCommand(task));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        assertEquals(new AddTaskCommand(task), command);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        DeleteTaskCommand command \u003d (DeleteTaskCommand) parser.parseCommand("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "                DeleteTaskCommand.COMMAND_WORD + \" \" + INDEX_FIRST_TASK.getOneBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        assertEquals(new DeleteTaskCommand(INDEX_FIRST_TASK), command);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        Task task \u003d new TaskBuilder().build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder(task).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                + INDEX_FIRST_TASK.getOneBased() + \" \" + TaskUtil.getEditTaskDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_TASK, descriptor), command);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public void parseCommand_getStats() throws Exception {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertTrue(parser.parseCommand(GetStatisticsCommand.COMMAND_WORD_MEMBER) instanceof GetStatisticsCommand);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertTrue(parser.parseCommand(GetStatisticsCommand.COMMAND_WORD_MEMBER + \" 3\")"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                instanceof GetStatisticsCommand);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertTrue(parser.parseCommand(GetStatisticsCommand.COMMAND_WORD_TASK) instanceof GetStatisticsCommand);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertTrue(parser.parseCommand(GetStatisticsCommand.COMMAND_WORD_TASK + \" 3\")"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                instanceof GetStatisticsCommand);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambhinav": 23,
      "ArunBeCoding": 1,
      "seahlynn": 12,
      "-": 77
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TASKS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static seedu.address.testutil.TypicalTasksMembers.ORDER_SHIRTS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static seedu.address.testutil.TypicalTasksMembers.PRINT_POSTERS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.task.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.testutil.ProjectDashboardBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertEquals(new ProjectDashboard(), new ProjectDashboard(modelManager.getProjectDashboard()));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        userPrefs.setProjectDashboardFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        userPrefs.setProjectDashboardFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public void setProjectDashboardFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setProjectDashboardFilePath(null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public void setProjectDashboardFilePath_validPath_setsProjectDashboardFilePath() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        modelManager.setProjectDashboardFilePath(path);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertEquals(path, modelManager.getProjectDashboardFilePath());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public void hasTask_nullTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasTask(null));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public void hasTask_taskNotInProjectDashboard_returnsFalse() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertFalse(modelManager.hasTask(ORDER_SHIRTS));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public void hasTask_taskInProjectDashboard_returnsTrue() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        modelManager.addTask(ORDER_SHIRTS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertTrue(modelManager.hasTask(ORDER_SHIRTS));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public void getFilteredTaskList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredTasksList().remove(0));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        ProjectDashboard projectDashboard \u003d"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                new ProjectDashboardBuilder().withTask(ORDER_SHIRTS).withTask(PRINT_POSTERS).build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        ProjectDashboard differentProjectDashboard \u003d new ProjectDashboard();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        UserSettings userSettings \u003d new UserSettings();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        modelManager \u003d new ModelManager(projectDashboard, userPrefs, userSettings);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(projectDashboard, userPrefs, userSettings);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        // different projectDashboard -\u003e returns false"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentProjectDashboard, userPrefs, userSettings)));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        String[] keywords \u003d ORDER_SHIRTS.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        modelManager.updateFilteredTasksList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(projectDashboard, userPrefs, userSettings)));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        modelManager.updateFilteredTasksList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        differentUserPrefs.setProjectDashboardFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(projectDashboard, differentUserPrefs, userSettings)));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambhinav": 34,
      "seahlynn": 2,
      "-": 98
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ProjectDashboardTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_PUBLICITY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_URGENCY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static seedu.address.testutil.TypicalTasksMembers.ORDER_SHIRTS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static seedu.address.testutil.TypicalTasksMembers.getTypicalProjectDashboard;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import static seedu.address.testutil.TypicalTasksMembers.GET_SPONSORS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import static seedu.address.testutil.TypicalTasksMembers.ORDER_SHIRTS;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import static seedu.address.testutil.TypicalTasksMembers.RECRUIT_MEMBERS;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import static seedu.address.testutil.TypicalTasksMembers.getTypicalProjectDashboard;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import seedu.address.model.inventory.Inventory;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.mapping.Mapping;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import seedu.address.model.mapping.InvMemMapping;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import seedu.address.model.mapping.InvTasMapping;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import seedu.address.model.mapping.TasMemMapping;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.model.member.Member;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.task.TaskStatus;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.task.exceptions.DuplicateTaskException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "public class ProjectDashboardTest {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    private final ProjectDashboard projectDashboard \u003d new ProjectDashboard();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertEquals(Collections.emptyList(), projectDashboard.getTaskList());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e projectDashboard.resetData(null));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public void resetData_withValidReadOnlyProjectDashboard_replacesData() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        ProjectDashboard newData \u003d getTypicalProjectDashboard();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        projectDashboard.resetData(newData);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertEquals(newData, projectDashboard);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public void resetData_withDuplicateTasks_throwsDuplicateTaskException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        // Two tasks with the same identity fields"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        Task editedShirtOrderTask \u003d new TaskBuilder(ORDER_SHIRTS).withTags(VALID_TAG_PUBLICITY)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        List\u003cTask\u003e newTasks \u003d Arrays.asList(ORDER_SHIRTS, editedShirtOrderTask);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        ProjectDashboardStub newData \u003d new ProjectDashboardStub(newTasks);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertThrows(DuplicateTaskException.class, () -\u003e projectDashboard.resetData(newData));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public void hasTask_nullTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e projectDashboard.hasTask(null));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public void hasTask_taskNotInProjectDashboard_returnsFalse() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertFalse(projectDashboard.hasTask(ORDER_SHIRTS));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public void hasTask_taskInProjectDashboard_returnsTrue() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        projectDashboard.addTask(ORDER_SHIRTS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertTrue(projectDashboard.hasTask(ORDER_SHIRTS));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public void hasTask_taskWithSameIdentityFieldsInProjectDashboard_returnsTrue() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        projectDashboard.addTask(ORDER_SHIRTS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        Task editedShirtOrderTask \u003d new TaskBuilder(ORDER_SHIRTS).withTags(VALID_TAG_URGENCY)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertTrue(projectDashboard.hasTask(editedShirtOrderTask));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public void getTaskList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e projectDashboard.getTaskList().remove(0));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public void addTaskNotStarted_splitTasksBasedOnTaskStatus_presentInExpectedLists() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        projectDashboard.addTask(ORDER_SHIRTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        projectDashboard.splitTasksBasedOnStatus();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertTrue(projectDashboard.getTaskList().contains(ORDER_SHIRTS));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertTrue(projectDashboard.getTasksNotStarted().contains(ORDER_SHIRTS));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertFalse(projectDashboard.getTasksDoing().contains(ORDER_SHIRTS));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertFalse(projectDashboard.getTasksDone().contains(ORDER_SHIRTS));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public void removeTaskDoing_splitTasksBasedOnTaskStatus_expectedTasksPresentInExpectedLists() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        projectDashboard.addTask(GET_SPONSORS);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        projectDashboard.removeTask(GET_SPONSORS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        projectDashboard.splitTasksBasedOnStatus();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertFalse(projectDashboard.getTaskList().contains(GET_SPONSORS));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertFalse(projectDashboard.getTasksNotStarted().contains(GET_SPONSORS));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertFalse(projectDashboard.getTasksDoing().contains(GET_SPONSORS));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertFalse(projectDashboard.getTasksDone().contains(GET_SPONSORS));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public void overloadDashboardWithDifferentTasks_splitTasksBasedOnStatus_expectedTasksPresentInExpectedLists() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        projectDashboard.addTask(ORDER_SHIRTS);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        projectDashboard.addTask(GET_SPONSORS);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        projectDashboard.splitTasksBasedOnStatus();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertTrue(projectDashboard.getTasksDone().isEmpty());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        projectDashboard.removeTask(ORDER_SHIRTS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        projectDashboard.setTask(GET_SPONSORS, RECRUIT_MEMBERS);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        projectDashboard.splitTasksBasedOnStatus();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertTrue(projectDashboard.getTasksDoing().isEmpty());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertTrue(projectDashboard.getTasksDone().contains(RECRUIT_MEMBERS));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        projectDashboard.addTask(ORDER_SHIRTS);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        projectDashboard.splitTasksBasedOnStatus();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertTrue(projectDashboard.getTaskList().contains(RECRUIT_MEMBERS));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertTrue(projectDashboard.getTasksNotStarted().contains(ORDER_SHIRTS));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        ProjectDashboard newData \u003d getTypicalProjectDashboard();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        projectDashboard.resetData(newData);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertEquals(newData, projectDashboard);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        projectDashboard.splitTasksBasedOnStatus();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertFalse(projectDashboard.getTasksNotStarted().isEmpty());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * A stub ReadOnlyProjectDashboard whose tasks list can violate interface constraints."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    private static class ProjectDashboardStub implements ReadOnlyProjectDashboard {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        private final ObservableList\u003cTask\u003e tasks \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        private final ObservableList\u003cMember\u003e members \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        private final ObservableList\u003cInventory\u003e inventories \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        private final ObservableList\u003cMapping\u003e mappings \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        private final ObservableList\u003cInvMemMapping\u003e invMemMappings \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        private final ObservableList\u003cInvTasMapping\u003e invTasMappings \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        private final ObservableList\u003cTasMemMapping\u003e tasMemMappings \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        private final HashMap\u003cTask, ObservableList\u003cMember\u003e\u003e memberByTask \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        private final ObservableList\u003cTask\u003e tasksNotStarted \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        private final ObservableList\u003cTask\u003e tasksDoing \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        private final ObservableList\u003cTask\u003e tasksDone \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        ProjectDashboardStub(Collection\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            this.tasks.setAll(tasks);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        public ObservableList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            return tasks;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        public ObservableList\u003cMember\u003e getMemberList() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            return members;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        public ObservableList\u003cInventory\u003e getInventoryList() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            return inventories;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        public ObservableList\u003cTask\u003e getTasksNotStarted() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            return tasksNotStarted;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        public ObservableList\u003cTask\u003e getTasksDoing() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            return tasksDoing;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        public ObservableList\u003cTask\u003e getTasksDone() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            return tasksDone;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        public ObservableList\u003cMapping\u003e getMappingList() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            return mappings;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        public HashMap\u003cTask, ObservableList\u003cMember\u003e\u003e listMemberByTask() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            return memberByTask;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        public ObservableList\u003cInvMemMapping\u003e getInvMemMappingList() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            return invMemMappings;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        public ObservableList\u003cInvTasMapping\u003e getInvTasMappingList() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            return invTasMappings;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        public ObservableList\u003cTasMemMapping\u003e getTasMemMappingList() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            return tasMemMappings;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambhinav": 109,
      "ArunBeCoding": 7,
      "seahlynn": 15,
      "-": 62,
      "gabrielseow": 28
    }
  },
  {
    "path": "src/test/java/seedu/address/model/UserPrefsTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public void setProjectDashBoardFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setProjectDashboardFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambhinav": 2,
      "-": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/model/inventory/InvNameTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "package seedu.address.model.inventory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "public class InvNameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new InvName(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new InvName(invalidName));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e InvName.isValidName(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        assertFalse(InvName.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        assertFalse(InvName.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        assertFalse(InvName.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        assertFalse(InvName.isValidName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        assertTrue(InvName.isValidName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        assertTrue(InvName.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        assertTrue(InvName.isValidName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        assertTrue(InvName.isValidName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        assertTrue(InvName.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ArunBeCoding": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/model/inventory/InventoryTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "package seedu.address.model.inventory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_INVENTORY_NAME_SPORTS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_INVENTORY_PRICE_MUSIC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import static seedu.address.testutil.TypicalInventories.POSTERS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import static seedu.address.testutil.TypicalInventories.SHIRTS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import seedu.address.testutil.InventoryBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "public class InventoryTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public void isSameInventory() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        assertTrue(SHIRTS.isSameInventory(SHIRTS));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        assertFalse(SHIRTS.isSameInventory(null));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        Inventory editedShirtInventory \u003d new InventoryBuilder(SHIRTS).build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        editedShirtInventory \u003d new InventoryBuilder(SHIRTS)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                .withName(VALID_INVENTORY_NAME_SPORTS).build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        assertFalse(SHIRTS.isSameInventory(editedShirtInventory));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        Inventory orderShirtsCopy \u003d new InventoryBuilder(SHIRTS).build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        assertTrue(SHIRTS.equals(orderShirtsCopy));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        assertTrue(SHIRTS.equals(SHIRTS));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        assertFalse(SHIRTS \u003d\u003d null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        assertFalse(SHIRTS.equals(5));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        // different inventory -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        assertFalse(SHIRTS.equals(POSTERS));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        Inventory editedShirtInventory \u003d new InventoryBuilder(SHIRTS).withName(VALID_INVENTORY_NAME_SPORTS).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        assertFalse(SHIRTS.equals(editedShirtInventory));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        // different price -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        editedShirtInventory \u003d new InventoryBuilder(SHIRTS).withPrice(new Price(VALID_INVENTORY_PRICE_MUSIC)).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        assertFalse(SHIRTS.equals(editedShirtInventory));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ArunBeCoding": 60
    }
  },
  {
    "path": "src/test/java/seedu/address/model/inventory/PriceTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "package seedu.address.model.inventory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "public class PriceTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        assertFalse(Price.isValidName(-1)); // negative number"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        assertFalse(Price.isValidName(-10)); // negative number"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        assertFalse(Price.isValidName(-100)); // negative number"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        assertTrue(Price.isValidName(1)); // small integer"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        assertTrue(Price.isValidName(100)); // bigger integer"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        assertTrue(Price.isValidName(50.50)); // decimal number"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        assertTrue(Price.isValidName(0)); // 0 digit"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ArunBeCoding": 23
    }
  },
  {
    "path": "src/test/java/seedu/address/model/inventory/UniqueInventoriesListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "package seedu.address.model.inventory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_INVENTORY_NAME_SPORTS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_INVENTORY_PRICE_MUSIC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import static seedu.address.testutil.TypicalInventories.BALLS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import static seedu.address.testutil.TypicalInventories.SHIRTS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import seedu.address.model.inventory.exceptions.DuplicateInventoryException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import seedu.address.model.inventory.exceptions.InventoryNotFoundException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import seedu.address.testutil.InventoryBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "public class UniqueInventoriesListTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    private final UniqueInventoryList uniqueInventoryList \u003d new UniqueInventoryList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public void contains_nullInventory_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueInventoryList.contains(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public void contains_inventoryNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        assertFalse(uniqueInventoryList.contains(SHIRTS));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public void contains_inventoryIList_returnsTrue() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        uniqueInventoryList.add(SHIRTS);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        assertTrue(uniqueInventoryList.contains(SHIRTS));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public void add_nullInventory_throwsNullPointerException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueInventoryList.add(null));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public void add_duplicateInventory_throwsDuplicateInventoryException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        uniqueInventoryList.add(SHIRTS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        assertThrows(DuplicateInventoryException.class, () -\u003e uniqueInventoryList.add(SHIRTS));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public void setInventory_nullTargetInventory_throwsNullPointerException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueInventoryList.setInventory(null, SHIRTS));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public void setInventory_nullEditedInventory_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueInventoryList.setInventory(SHIRTS, null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public void setInventory_targetInventoryNotInList_throwsInventoryNotFoundException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        assertThrows(InventoryNotFoundException.class, () -\u003e uniqueInventoryList.setInventory(SHIRTS, SHIRTS));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public void setInventory_editedInventoryIsSameInventory_success() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        uniqueInventoryList.add(SHIRTS);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        uniqueInventoryList.setInventory(SHIRTS, SHIRTS);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        UniqueInventoryList expectedUniqueInventoryList \u003d new UniqueInventoryList();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        expectedUniqueInventoryList.add(SHIRTS);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        assertEquals(expectedUniqueInventoryList, uniqueInventoryList);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public void setInventory_editedInventoryHasSameIdentity_success() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        uniqueInventoryList.add(SHIRTS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        Inventory editedAlice \u003d new InventoryBuilder(SHIRTS).withPrice(new Price(VALID_INVENTORY_PRICE_MUSIC))"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        uniqueInventoryList.setInventory(SHIRTS, editedAlice);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        UniqueInventoryList expectedUniqueInventoryList \u003d new UniqueInventoryList();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        expectedUniqueInventoryList.add(editedAlice);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        assertEquals(expectedUniqueInventoryList, uniqueInventoryList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public void setInventory_editedInventoryHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        uniqueInventoryList.add(SHIRTS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        uniqueInventoryList.setInventory(SHIRTS, BALLS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        UniqueInventoryList expectedUniqueInventoryList \u003d new UniqueInventoryList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        expectedUniqueInventoryList.add(BALLS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        assertEquals(expectedUniqueInventoryList, uniqueInventoryList);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public void setInventory_editedInventoryHasNonUniqueIdentity_throwsDuplicateInventoryException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        uniqueInventoryList.add(SHIRTS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        uniqueInventoryList.add(BALLS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        assertThrows(DuplicateInventoryException.class,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                    () -\u003e uniqueInventoryList.setInventory(SHIRTS, BALLS));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public void remove_nullInventory_throwsNullPointerException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueInventoryList.remove(null));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public void remove_InventoryDoesNotExist_throwsInventoryNotFoundException() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        assertThrows(InventoryNotFoundException.class, () -\u003e uniqueInventoryList.remove(SHIRTS));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public void remove_existingInventory_removesInventory() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        uniqueInventoryList.add(SHIRTS);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        uniqueInventoryList.remove(SHIRTS);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        UniqueInventoryList expectedUniqueTaskList \u003d new UniqueInventoryList();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        assertEquals(expectedUniqueTaskList, uniqueInventoryList);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public void setInventories_nullUniqueInventoriesList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueInventoryList.setInventories((UniqueInventoryList) null));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public void setInventories_uniqueInventoryList_replacesOwnListWithProvidedUniqueInventoriesList() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        uniqueInventoryList.add(SHIRTS);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        UniqueInventoryList expectedUniqueInventoryList \u003d new UniqueInventoryList();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        expectedUniqueInventoryList.add(BALLS);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        uniqueInventoryList.setInventories(expectedUniqueInventoryList);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        assertEquals(expectedUniqueInventoryList, uniqueInventoryList);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public void setInventories_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueInventoryList.setInventories((List\u003cInventory\u003e) null));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public void setInventories_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        uniqueInventoryList.add(SHIRTS);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        List\u003cInventory\u003e inventoryList \u003d Collections.singletonList(BALLS);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        uniqueInventoryList.setInventories(inventoryList);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        UniqueInventoryList expectedUniqueInventoryList \u003d new UniqueInventoryList();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        expectedUniqueInventoryList.add(BALLS);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        assertEquals(expectedUniqueInventoryList, uniqueInventoryList);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public void setInventories_listWithDuplicateInventories_throwsDuplicateInventoriesException() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        List\u003cInventory\u003e listWithDuplicateTasks \u003d Arrays.asList(SHIRTS, SHIRTS);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        assertThrows(DuplicateInventoryException.class, () -\u003e uniqueInventoryList"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                                                                    .setInventories(listWithDuplicateTasks));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                -\u003e uniqueInventoryList.asUnmodifiableList().remove(0));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ArunBeCoding": 163
    }
  },
  {
    "path": "src/test/java/seedu/address/model/member/MemberNameContainsKeywordsPredicateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "package seedu.address.model.member;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.testutil.MemberBuilder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "public class MemberNameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"John\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"Gabriel\", \"Seow\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        MemberNameContainsKeywordsPredicate firstPredicate \u003d new MemberNameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        MemberNameContainsKeywordsPredicate secondPredicate \u003d new MemberNameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        MemberNameContainsKeywordsPredicate firstPredicateCopy \u003d new MemberNameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        // different task -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        MemberNameContainsKeywordsPredicate predicate \u003d new MemberNameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        assertTrue(predicate.test(new MemberBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        predicate \u003d new MemberNameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        assertTrue(predicate.test(new MemberBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        predicate \u003d new MemberNameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        assertTrue(predicate.test(new MemberBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        predicate \u003d new MemberNameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        assertTrue(predicate.test(new MemberBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        MemberNameContainsKeywordsPredicate predicate \u003d new MemberNameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        assertFalse(predicate.test(new MemberBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        predicate \u003d new MemberNameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        assertFalse(predicate.test(new MemberBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        // Keywords match phone, email and address, but does not match name"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        predicate \u003d new MemberNameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        assertFalse(predicate.test(new MemberBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seahlynn": 72
    }
  },
  {
    "path": "src/test/java/seedu/address/model/member/MemberNameTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "package seedu.address.model.member;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "public class MemberNameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new MemberName(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public void constructor_invalidMemberName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        String invalidMemberName \u003d \"\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new MemberName(invalidMemberName));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public void isValidMemberName() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        // null MemberName"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e MemberName.isValidMemberName(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        // invalid MemberName"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        assertFalse(MemberName.isValidMemberName(\"\")); // empty string"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        assertFalse(MemberName.isValidMemberName(\" \")); // spaces only"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        assertFalse(MemberName.isValidMemberName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        assertFalse(MemberName.isValidMemberName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        // valid MemberName"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        assertTrue(MemberName.isValidMemberName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        assertTrue(MemberName.isValidMemberName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        assertTrue(MemberName.isValidMemberName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        assertTrue(MemberName.isValidMemberName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        assertTrue(MemberName.isValidMemberName(\"David Roger Jackson Ray Jr 2nd\")); // long MemberNames"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seahlynn": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/model/member/MemberTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "package seedu.address.model.member;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MEMBER_ID_PUBLICITY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MEMBER_NAME_FINANCE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MEMBER_NAME_PUBLICITY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static seedu.address.testutil.TypicalTasksMembers.ELSA_KOH;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static seedu.address.testutil.TypicalTasksMembers.GABRIEL_SEOW;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.testutil.MemberBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "public class MemberTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        Member member \u003d new MemberBuilder().build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e member.getTags().remove(0));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public void isSameMember() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        assertTrue(GABRIEL_SEOW.isSameMember(GABRIEL_SEOW));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        assertFalse(GABRIEL_SEOW.isSameMember(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        Member editedMemberGabrielSeow \u003d new MemberBuilder(GABRIEL_SEOW).build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        editedMemberGabrielSeow \u003d new MemberBuilder(GABRIEL_SEOW)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "                .withName(VALID_MEMBER_NAME_PUBLICITY).build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        assertFalse(GABRIEL_SEOW.isSameMember(editedMemberGabrielSeow));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        // same name, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        editedMemberGabrielSeow \u003d new MemberBuilder(GABRIEL_SEOW)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "                .withId(new MemberId(\"GT\"))"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        assertTrue(GABRIEL_SEOW.isSameMember(editedMemberGabrielSeow));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        // same name, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        editedMemberGabrielSeow \u003d new MemberBuilder(GABRIEL_SEOW)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "                .withTags(VALID_MEMBER_ID_PUBLICITY)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        assertTrue(GABRIEL_SEOW.isSameMember(editedMemberGabrielSeow));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        Member orderShirtsCopy \u003d new MemberBuilder(GABRIEL_SEOW).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        assertTrue(GABRIEL_SEOW.equals(orderShirtsCopy));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        assertTrue(GABRIEL_SEOW.equals(GABRIEL_SEOW));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        assertFalse(GABRIEL_SEOW.equals(null));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        assertFalse(GABRIEL_SEOW.equals(5));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        // different Member -\u003e returns false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        assertFalse(GABRIEL_SEOW.equals(ELSA_KOH));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        Member editedMemberGabrielSeow \u003d new MemberBuilder(GABRIEL_SEOW).withName(VALID_MEMBER_NAME_PUBLICITY).build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        assertFalse(GABRIEL_SEOW.equals(editedMemberGabrielSeow));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        editedMemberGabrielSeow \u003d new MemberBuilder(GABRIEL_SEOW).withTags(VALID_MEMBER_ID_PUBLICITY).build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        assertFalse(GABRIEL_SEOW.equals(editedMemberGabrielSeow));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        // different Member status return false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        editedMemberGabrielSeow \u003d new MemberBuilder(GABRIEL_SEOW).withId(new MemberId(\"GT\")).build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        assertFalse(GABRIEL_SEOW.equals(editedMemberGabrielSeow));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seahlynn": 81
    }
  },
  {
    "path": "src/test/java/seedu/address/model/member/UniqueMemberListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "package seedu.address.model.member;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MEMBER_ID_PUBLICITY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static seedu.address.testutil.TypicalTasksMembers.ELSA_KOH;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static seedu.address.testutil.TypicalTasksMembers.GABRIEL_SEOW;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.model.member.exceptions.DuplicateMemberException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.model.member.exceptions.MemberNotFoundException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.testutil.MemberBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "public class UniqueMemberListTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    private final UniqueMemberList uniqueMemberList \u003d new UniqueMemberList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public void contains_nullTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueMemberList.contains(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public void contains_taskNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        assertFalse(uniqueMemberList.contains(GABRIEL_SEOW));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public void contains_taskInList_returnsTrue() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        uniqueMemberList.add(GABRIEL_SEOW);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        assertTrue(uniqueMemberList.contains(GABRIEL_SEOW));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public void contains_memberWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        uniqueMemberList.add(GABRIEL_SEOW);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        Member editedMemberGabrielSeow \u003d new MemberBuilder(GABRIEL_SEOW).withTags(VALID_MEMBER_ID_PUBLICITY)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        assertTrue(uniqueMemberList.contains(editedMemberGabrielSeow));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public void add_nullMember_throwsNullPointerException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueMemberList.add(null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public void add_duplicateTask_throwsDuplicateTaskException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        uniqueMemberList.add(GABRIEL_SEOW);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        assertThrows(DuplicateMemberException.class, () -\u003e uniqueMemberList.add(GABRIEL_SEOW));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public void setMember_nullTargetTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueMemberList.setMember(null, GABRIEL_SEOW));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public void setMember_nullEditedTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueMemberList.setMember(GABRIEL_SEOW, null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public void setMember_targetTaskNotInList_throwsTaskNotFoundException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        assertThrows(MemberNotFoundException.class, () -\u003e uniqueMemberList.setMember(GABRIEL_SEOW, GABRIEL_SEOW));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public void setMember_editedTaskIsSameTask_success() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        uniqueMemberList.add(GABRIEL_SEOW);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        uniqueMemberList.setMember(GABRIEL_SEOW, GABRIEL_SEOW);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        UniqueMemberList expectedUniqueMemberList \u003d new UniqueMemberList();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        expectedUniqueMemberList.add(GABRIEL_SEOW);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        assertEquals(expectedUniqueMemberList, uniqueMemberList);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public void setMember_editedTaskHasSameIdentity_success() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        uniqueMemberList.add(GABRIEL_SEOW);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        Member editedAlice \u003d new MemberBuilder(GABRIEL_SEOW).withTags(VALID_MEMBER_ID_PUBLICITY)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        uniqueMemberList.setMember(GABRIEL_SEOW, editedAlice);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        UniqueMemberList expectedUniqueMemberList \u003d new UniqueMemberList();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        expectedUniqueMemberList.add(editedAlice);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        assertEquals(expectedUniqueMemberList, uniqueMemberList);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public void setMember_editedTaskHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        uniqueMemberList.add(GABRIEL_SEOW);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        uniqueMemberList.setMember(GABRIEL_SEOW, ELSA_KOH);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        UniqueMemberList expecteduniqueMemberList \u003d new UniqueMemberList();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        expecteduniqueMemberList.add(ELSA_KOH);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        assertEquals(expecteduniqueMemberList, uniqueMemberList);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public void setMember_editedTaskHasNonUniqueIdentity_throwsDuplicateTaskException() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        uniqueMemberList.add(GABRIEL_SEOW);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        uniqueMemberList.add(ELSA_KOH);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        assertThrows(DuplicateMemberException.class, () -\u003e uniqueMemberList.setMember(GABRIEL_SEOW, ELSA_KOH));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public void remove_nullTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueMemberList.remove(null));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public void remove_taskDoesNotExist_throwsTaskNotFoundException() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        assertThrows(MemberNotFoundException.class, () -\u003e uniqueMemberList.remove(GABRIEL_SEOW));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public void remove_existingTask_removesTask() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        uniqueMemberList.add(GABRIEL_SEOW);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        uniqueMemberList.remove(GABRIEL_SEOW);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        UniqueMemberList expecteduniqueMemberList \u003d new UniqueMemberList();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        assertEquals(expecteduniqueMemberList, uniqueMemberList);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public void setMembers_nullUniqueTasksList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueMemberList.setMembers((UniqueMemberList) null));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public void setMembers_uniqueMemberList_replacesOwnListWithProvidedUniqueTasksList() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        uniqueMemberList.add(GABRIEL_SEOW);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        UniqueMemberList expecteduniqueMemberList \u003d new UniqueMemberList();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        expecteduniqueMemberList.add(ELSA_KOH);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        uniqueMemberList.setMembers(expecteduniqueMemberList);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        assertEquals(expecteduniqueMemberList, uniqueMemberList);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public void setMembers_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueMemberList.setMembers((List\u003cMember\u003e) null));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public void setMembers_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        uniqueMemberList.add(GABRIEL_SEOW);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        List\u003cMember\u003e memberList \u003d Collections.singletonList(ELSA_KOH);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        uniqueMemberList.setMembers(memberList);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        UniqueMemberList expecteduniqueMemberList \u003d new UniqueMemberList();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        expecteduniqueMemberList.add(ELSA_KOH);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        assertEquals(expecteduniqueMemberList, uniqueMemberList);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public void setMembers_listWithDuplicateTasks_throwsDuplicateTaskException() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        List\u003cMember\u003e listWithDuplicateTasks \u003d Arrays.asList(GABRIEL_SEOW, GABRIEL_SEOW);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        assertThrows(DuplicateMemberException.class, () -\u003e uniqueMemberList.setMembers(listWithDuplicateTasks));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "                -\u003e uniqueMemberList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seahlynn": 168
    }
  },
  {
    "path": "src/test/java/seedu/address/model/task/NameContainsKeywordsPredicateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        // different task -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertTrue(predicate.test(new TaskBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertTrue(predicate.test(new TaskBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertTrue(predicate.test(new TaskBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertTrue(predicate.test(new TaskBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertFalse(predicate.test(new TaskBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertFalse(predicate.test(new TaskBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // Keywords match phone, email and address, but does not match name"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertFalse(predicate.test(new TaskBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambhinav": 10,
      "-": 64
    }
  },
  {
    "path": "src/test/java/seedu/address/model/task/NameTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public void isValidMemberName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Name.isValidMemberName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        assertFalse(Name.isValidMemberName(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        assertFalse(Name.isValidMemberName(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        assertFalse(Name.isValidMemberName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        assertFalse(Name.isValidMemberName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        assertTrue(Name.isValidMemberName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        assertTrue(Name.isValidMemberName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        assertTrue(Name.isValidMemberName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        assertTrue(Name.isValidMemberName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        assertTrue(Name.isValidMemberName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambhinav": 1,
      "seahlynn": 11,
      "-": 28
    }
  },
  {
    "path": "src/test/java/seedu/address/model/task/TaskStatusTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "public class TaskStatusTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public void statusDisplayName_shouldMatchExpectedDisplayName() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertEquals(TaskStatus.UNBEGUN.getDisplayName(), \"Not Started\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertEquals(TaskStatus.DOING.getDisplayName(), \"In Progress\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertEquals(TaskStatus.DONE.getDisplayName(), \"Completed\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambhinav": 16
    }
  },
  {
    "path": "src/test/java/seedu/address/model/task/TaskTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_PUBLICITY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TASK_NAME_FINANCE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TASK_NAME_PUBLICITY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static seedu.address.testutil.TypicalTasksMembers.BUILD_WEBSITE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static seedu.address.testutil.TypicalTasksMembers.ORDER_SHIRTS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "public class TaskTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        Task task \u003d new TaskBuilder().build();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e task.getTags().remove(0));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public void isSameTask() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertTrue(ORDER_SHIRTS.isSameTask(ORDER_SHIRTS));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertFalse(ORDER_SHIRTS.isSameTask(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        Task editedShirtOrderTask \u003d new TaskBuilder(ORDER_SHIRTS).build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        editedShirtOrderTask \u003d new TaskBuilder(ORDER_SHIRTS)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                .withName(VALID_TASK_NAME_FINANCE).build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertFalse(ORDER_SHIRTS.isSameTask(editedShirtOrderTask));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        // same name, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        editedShirtOrderTask \u003d new TaskBuilder(ORDER_SHIRTS)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                .withStatus(TaskStatus.DOING)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertTrue(ORDER_SHIRTS.isSameTask(editedShirtOrderTask));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        // same name, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        editedShirtOrderTask \u003d new TaskBuilder(ORDER_SHIRTS)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                .withTags(VALID_TAG_PUBLICITY)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertTrue(ORDER_SHIRTS.isSameTask(editedShirtOrderTask));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        Task orderShirtsCopy \u003d new TaskBuilder(ORDER_SHIRTS).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertTrue(ORDER_SHIRTS.equals(orderShirtsCopy));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertTrue(ORDER_SHIRTS.equals(ORDER_SHIRTS));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertFalse(ORDER_SHIRTS.equals(null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertFalse(ORDER_SHIRTS.equals(5));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        // different task -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertFalse(ORDER_SHIRTS.equals(BUILD_WEBSITE));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        Task editedShirtOrderTask \u003d new TaskBuilder(ORDER_SHIRTS).withName(VALID_TASK_NAME_PUBLICITY).build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertFalse(ORDER_SHIRTS.equals(editedShirtOrderTask));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        editedShirtOrderTask \u003d new TaskBuilder(ORDER_SHIRTS).withTags(VALID_TAG_PUBLICITY).build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertFalse(ORDER_SHIRTS.equals(editedShirtOrderTask));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        // different task status return false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        editedShirtOrderTask \u003d new TaskBuilder(ORDER_SHIRTS).withStatus(TaskStatus.DOING).build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertFalse(ORDER_SHIRTS.equals(editedShirtOrderTask));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambhinav": 42,
      "seahlynn": 2,
      "-": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/model/task/UniqueTaskListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_PUBLICITY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static seedu.address.testutil.TypicalTasksMembers.BUILD_WEBSITE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static seedu.address.testutil.TypicalTasksMembers.ORDER_SHIRTS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.task.exceptions.DuplicateTaskException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.task.exceptions.TaskNotFoundException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "public class UniqueTaskListTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    private final UniqueTaskList uniqueTaskList \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public void contains_nullTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTaskList.contains(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public void contains_taskNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertFalse(uniqueTaskList.contains(ORDER_SHIRTS));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public void contains_taskInList_returnsTrue() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        uniqueTaskList.add(ORDER_SHIRTS);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertTrue(uniqueTaskList.contains(ORDER_SHIRTS));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public void contains_taskWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        uniqueTaskList.add(ORDER_SHIRTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        Task editedShirtOrderTask \u003d new TaskBuilder(ORDER_SHIRTS).withTags(VALID_TAG_PUBLICITY)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertTrue(uniqueTaskList.contains(editedShirtOrderTask));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public void add_nullTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTaskList.add(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public void add_duplicateTask_throwsDuplicateTaskException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        uniqueTaskList.add(ORDER_SHIRTS);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertThrows(DuplicateTaskException.class, () -\u003e uniqueTaskList.add(ORDER_SHIRTS));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public void setTask_nullTargetTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTaskList.setTask(null, ORDER_SHIRTS));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public void setTask_nullEditedTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTaskList.setTask(ORDER_SHIRTS, null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public void setTask_targetTaskNotInList_throwsTaskNotFoundException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertThrows(TaskNotFoundException.class, () -\u003e uniqueTaskList.setTask(ORDER_SHIRTS, ORDER_SHIRTS));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public void setTask_editedTaskIsSameTask_success() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        uniqueTaskList.add(ORDER_SHIRTS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        uniqueTaskList.setTask(ORDER_SHIRTS, ORDER_SHIRTS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        UniqueTaskList expectedUniqueTaskList \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        expectedUniqueTaskList.add(ORDER_SHIRTS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertEquals(expectedUniqueTaskList, uniqueTaskList);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public void setTask_editedTaskHasSameIdentity_success() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        uniqueTaskList.add(ORDER_SHIRTS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        Task editedAlice \u003d new TaskBuilder(ORDER_SHIRTS).withTags(VALID_TAG_PUBLICITY)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        uniqueTaskList.setTask(ORDER_SHIRTS, editedAlice);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        UniqueTaskList expectedUniqueTaskList \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        expectedUniqueTaskList.add(editedAlice);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertEquals(expectedUniqueTaskList, uniqueTaskList);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public void setTask_editedTaskHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        uniqueTaskList.add(ORDER_SHIRTS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        uniqueTaskList.setTask(ORDER_SHIRTS, BUILD_WEBSITE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        UniqueTaskList expectedUniqueTaskList \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        expectedUniqueTaskList.add(BUILD_WEBSITE);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertEquals(expectedUniqueTaskList, uniqueTaskList);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public void setTask_editedTaskHasNonUniqueIdentity_throwsDuplicateTaskException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        uniqueTaskList.add(ORDER_SHIRTS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        uniqueTaskList.add(BUILD_WEBSITE);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertThrows(DuplicateTaskException.class, () -\u003e uniqueTaskList.setTask(ORDER_SHIRTS, BUILD_WEBSITE));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public void remove_nullTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTaskList.remove(null));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public void remove_taskDoesNotExist_throwsTaskNotFoundException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertThrows(TaskNotFoundException.class, () -\u003e uniqueTaskList.remove(ORDER_SHIRTS));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public void remove_existingTask_removesTask() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        uniqueTaskList.add(ORDER_SHIRTS);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        uniqueTaskList.remove(ORDER_SHIRTS);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        UniqueTaskList expectedUniqueTaskList \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertEquals(expectedUniqueTaskList, uniqueTaskList);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public void setTasks_nullUniqueTasksList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTaskList.setTasks((UniqueTaskList) null));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public void setTasks_uniqueTaskList_replacesOwnListWithProvidedUniqueTasksList() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        uniqueTaskList.add(ORDER_SHIRTS);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        UniqueTaskList expectedUniqueTaskList \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        expectedUniqueTaskList.add(BUILD_WEBSITE);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        uniqueTaskList.setTasks(expectedUniqueTaskList);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertEquals(expectedUniqueTaskList, uniqueTaskList);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public void setTasks_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTaskList.setTasks((List\u003cTask\u003e) null));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public void setTasks_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        uniqueTaskList.add(ORDER_SHIRTS);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        List\u003cTask\u003e taskList \u003d Collections.singletonList(BUILD_WEBSITE);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        uniqueTaskList.setTasks(taskList);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        UniqueTaskList expectedUniqueTaskList \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        expectedUniqueTaskList.add(BUILD_WEBSITE);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertEquals(expectedUniqueTaskList, uniqueTaskList);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public void setTasks_listWithDuplicateTasks_throwsDuplicateTaskException() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        List\u003cTask\u003e listWithDuplicateTasks \u003d Arrays.asList(ORDER_SHIRTS, ORDER_SHIRTS);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertThrows(DuplicateTaskException.class, () -\u003e uniqueTaskList.setTasks(listWithDuplicateTasks));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            -\u003e uniqueTaskList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambhinav": 82,
      "seahlynn": 2,
      "-": 85
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedTaskTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import static seedu.address.storage.JsonAdaptedTask.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static seedu.address.testutil.TypicalTasksMembers.PRINT_POSTERS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.task.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.task.TaskStatus;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "public class JsonAdaptedTaskTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    private static final String INVALID_TASK_NAME \u003d \"R@eview Code\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#urgent\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    private static final String VALID_TASK_NAME \u003d PRINT_POSTERS.getName().toString();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    private static final TaskStatus VALID_TASK_STATUS \u003d PRINT_POSTERS.getTaskStatus();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d PRINT_POSTERS.getTags().stream()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public void toModelType_validTaskDetails_returnsTask() throws Exception {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        JsonAdaptedTask task \u003d new JsonAdaptedTask(PRINT_POSTERS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertEquals(PRINT_POSTERS, task.toModelType());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "//    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "//        JsonAdaptedTask task \u003d new JsonAdaptedTask(INVALID_TASK_NAME, VALID_TASK_STATUS, VALID_TAGS);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "//"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "//        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "//        assertThrows(IllegalValueException.class, expectedMessage, task::toModelType);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "//"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "//    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "//"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "//        JsonAdaptedTask task \u003d new JsonAdaptedTask(null, VALID_TASK_STATUS, VALID_TAGS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "//        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "//        assertThrows(IllegalValueException.class, expectedMessage, task::toModelType);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "//"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "//"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "//"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "//    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "//        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "//        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "//        JsonAdaptedTask task \u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "//                new JsonAdaptedTask(VALID_TASK_NAME, VALID_TASK_STATUS, invalidTags);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "//        assertThrows(IllegalValueException.class, task::toModelType);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambhinav": 38,
      "seahlynn": 3,
      "-": 20
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonProjectDashboardStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import static seedu.address.testutil.TypicalInventories.MAKEUP;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import static seedu.address.testutil.TypicalInventories.PARTY_EQUIPS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import static seedu.address.testutil.TypicalTasksMembers.ANDY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import static seedu.address.testutil.TypicalTasksMembers.BENSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static seedu.address.testutil.TypicalTasksMembers.FAREWELL_PARTY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static seedu.address.testutil.TypicalTasksMembers.FIND_VP;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import static seedu.address.testutil.TypicalTasksMembers.JOHN_DOE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static seedu.address.testutil.TypicalTasksMembers.ORDER_SHIRTS;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static seedu.address.testutil.TypicalTasksMembers.getTypicalProjectDashboard;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.ProjectDashboard;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.ReadOnlyProjectDashboard;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.mapping.TasMemMapping;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.member.Member;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "public class JsonProjectDashboardStorageTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonProjectDashboardStorageTest\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public void readProjectDashboard_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readProjectDashboard(null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    private java.util.Optional\u003cReadOnlyProjectDashboard\u003e readProjectDashboard(String filePath) throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        return new JsonProjectDashboardStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                .readProjectDashBoard(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertFalse(readProjectDashboard(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            readProjectDashboard(\"notJsonFormatProjectDashboard.json\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public void readProjectDashboard_invalidTaskProjectDashboard_throwDataConversionException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            readProjectDashboard(\"invalidTaskProjectDashboard.json\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public void readProjectDashboard_invalidAndValidTaskProjectDashboard_throwDataConversionException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            readProjectDashboard(\"invalidAndValidTaskProjectDashboard.json\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public void readAndSaveProjectDashboard_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempAddressBook.json\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        ProjectDashboard original \u003d getTypicalProjectDashboard();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        JsonProjectDashboardStorage jsonProjectDashboardStorage \u003d new JsonProjectDashboardStorage(filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        jsonProjectDashboardStorage.saveProjectDashboard(original, filePath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        ReadOnlyProjectDashboard readBack \u003d jsonProjectDashboardStorage.readProjectDashBoard(filePath).get();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertEquals(original, new ProjectDashboard(readBack));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        original.addTask(FIND_VP);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        original.addInventory(MAKEUP);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        original.addMember(ANDY);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        original.addMapping(new TasMemMapping(1, 7));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        original.removeTask(ORDER_SHIRTS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        jsonProjectDashboardStorage.saveProjectDashboard(original, filePath);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        readBack \u003d jsonProjectDashboardStorage.readProjectDashBoard(filePath).get();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertEquals(original, new ProjectDashboard(readBack));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        original.addTask(FAREWELL_PARTY);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        original.addInventory(PARTY_EQUIPS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        original.addMember(BENSON);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        original.addMapping(new TasMemMapping(3, 8));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        original.removeTask(FAREWELL_PARTY);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        jsonProjectDashboardStorage.saveProjectDashboard(original); // file path not specified"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        readBack \u003d jsonProjectDashboardStorage.readProjectDashBoard().get(); // file path not specified"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertEquals(original, new ProjectDashboard(readBack));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public void saveProjectDashboard_nullProjectDashboard_throwsNullPointerException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveProjectDashboard(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * Saves {@code projectDashboard} at the specified {@code filePath}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    private void saveProjectDashboard(ReadOnlyProjectDashboard projectDashboard, String filePath) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            new JsonProjectDashboardStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                    .saveProjectDashboard(projectDashboard, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public void saveProjectDashboard_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveProjectDashboard(new ProjectDashboard(), null));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambhinav": 57,
      "seahlynn": 4,
      "-": 67
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableProjectDashboardTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "public class JsonSerializableProjectDashboardTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableProjectDashboardTest\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    private static final Path TYPICAL_TASKS_FILE \u003d TEST_DATA_FOLDER.resolve(\"TypicalTasksMembersProjectDashboard.json\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    private static final Path INVALID_TASK_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidTaskProjectDashboard.json\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    private static final Path DUPLICATE_TASK_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateTaskProjectDashboard.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public void toModelType_TypicalTasksMembersFile_success() throws Exception {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        JsonSerializableProjectDashboard dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_TASKS_FILE,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                JsonSerializableProjectDashboard.class).get();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        ProjectDashboard projectDashboardFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        ProjectDashboard TypicalTasksMembersProjectDashboard \u003d TypicalTasksMembers.getTypicalProjectDashboard();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        assertEquals(projectDashboardFromFile, TypicalTasksMembersProjectDashboard);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public void toModelType_invalidTaskFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        JsonSerializableProjectDashboard dataFromFile \u003d JsonUtil.readJsonFile(INVALID_TASK_FILE,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                JsonSerializableProjectDashboard.class).get();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public void toModelType_duplicateTasks_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        JsonSerializableProjectDashboard dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_TASK_FILE,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                JsonSerializableProjectDashboard.class).get();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableProjectDashboard.MESSAGE_DUPLICATE_TASKS,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambhinav": 15,
      "ArunBeCoding": 2,
      "seahlynn": 4,
      "-": 20
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonUserPrefsStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        userPrefs.setProjectDashboardFilePath(Paths.get(\"projectdashboard.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambhinav": 1,
      "-": 122
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static seedu.address.testutil.TypicalTasksMembers.getTypicalProjectDashboard;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.ProjectDashboard;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.ReadOnlyProjectDashboard;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        JsonProjectDashboardStorage projectDashboardStorage \u003d new JsonProjectDashboardStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        storageManager \u003d new StorageManager(projectDashboardStorage, userPrefsStorage, storageManager);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public void projectDashboardReadSave() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "         * {@link JsonProjectDashboardStorage} class."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonProjectDashboardStorageTest} class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        ProjectDashboard original \u003d getTypicalProjectDashboard();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        storageManager.saveProjectDashboard(original);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        ReadOnlyProjectDashboard retrieved \u003d storageManager.readProjectDashBoard().get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertEquals(original, new ProjectDashboard(retrieved));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public void getProjectDashboardFilePath() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        assertNotNull(storageManager.getProjectDashboardFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambhinav": 13,
      "seahlynn": 1,
      "-": 54
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditTaskDescriptorBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditTaskDescriptor;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.task.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.task.TaskStatus;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ambhinav"
        },
        "content": " * A utility class to help with building EditTaskDescriptor objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "public class EditTaskDescriptorBuilder {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    private EditTaskDescriptor descriptor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public EditTaskDescriptorBuilder() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        descriptor \u003d new EditCommand.EditTaskDescriptor();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public EditTaskDescriptorBuilder(EditTaskDescriptor descriptor) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        this.descriptor \u003d new EditTaskDescriptor(descriptor);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * Returns an {@code EditTaskDescriptor} with fields containing {@code task}\u0027s details"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public EditTaskDescriptorBuilder(Task task) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        descriptor \u003d new EditTaskDescriptor();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        descriptor.setName(task.getName());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        descriptor.setTaskStatus(task.getTaskStatus());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        descriptor.setTags(task.getTags());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * Sets the {@code Name} of the {@code EditTaskDescriptor} that we are building."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public EditTaskDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * Sets the {@code TaskStatus} of the {@code EditTaskDescriptor} that we are building."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public EditTaskDescriptorBuilder withStatus(TaskStatus taskStatus) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        descriptor.setTaskStatus(TaskStatus.valueOf(taskStatus.toString()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditTaskDescriptor}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public EditTaskDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public EditTaskDescriptor build() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambhinav": 32,
      "-": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/InventoryBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import seedu.address.model.inventory.InvName;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import seedu.address.model.inventory.Inventory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import seedu.address.model.inventory.Price;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import seedu.address.model.task.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import seedu.address.model.task.TaskStatus;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import seedu.address.model.util.SampleTaskDataUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "public class InventoryBuilder {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Sample Inventory Name\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    private InvName name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    private Price price;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public InventoryBuilder() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        name \u003d new InvName(DEFAULT_NAME);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        price \u003d new Price(0);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * Initializes the TaskBuilder with the data of {@code taskToCopy}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public InventoryBuilder(Inventory inventoryToCopy) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        name \u003d inventoryToCopy.getName();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        price \u003d new Price(inventoryToCopy.getPrice().getPrice());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * Sets the {@code Name} of the {@code Inventory} that we are building."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public InventoryBuilder withName(String name) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        this.name \u003d new InvName(name);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * Sets the {@code Price} of the {@code Inventory} that we are building."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public InventoryBuilder withPrice(Price price) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        this.price \u003d new Price(price.getPrice());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public Inventory build() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        return new Inventory(name, price);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ArunBeCoding": 55
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/MappingBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import seedu.address.model.mapping.InvMemMapping;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import seedu.address.model.mapping.InvTasMapping;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import seedu.address.model.mapping.TasMemMapping;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.model.member.Member;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "public class MappingBuilder {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Sample Mapping\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    private int memberIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    private int taskIndex;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public MappingBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        //Dummy constructor until Mapping Testing is decided"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        taskIndex \u003d 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        memberIndex \u003d 1;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     * Initializes the TaskBuilder with the data of {@code taskToCopy}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public MappingBuilder(TasMemMapping mappingToCopy) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        memberIndex \u003d mappingToCopy.getMemberIndex();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        taskIndex \u003d mappingToCopy.getTaskIndex();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     * Sets the {@code Name} of the {@code Inventory} that we are building."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public MappingBuilder withMember(int memberIndex) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        this.memberIndex \u003d memberIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     * Sets the {@code Price} of the {@code Inventory} that we are building."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public MappingBuilder withTask(int taskIndex) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        this.taskIndex \u003d taskIndex;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public TasMemMapping build() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        return new TasMemMapping(taskIndex, memberIndex);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seahlynn": 32,
      "gabrielseow": 17
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/MemberBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.model.member.Member;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.model.member.MemberId;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.model.member.MemberName;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.model.util.SampleMemberDataUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "public class MemberBuilder {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Sample Member Name\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public static final String DEFAULT_ID \u003d \"Sample Member ID\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    private MemberName name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    private MemberId id;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public MemberBuilder() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        name \u003d new MemberName(DEFAULT_NAME);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        id \u003d new MemberId(DEFAULT_ID);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     * Initializes the TaskBuilder with the data of {@code taskToCopy}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public MemberBuilder(Member memberToCopy) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        name \u003d memberToCopy.getName();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        id \u003d memberToCopy.getId();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(memberToCopy.getTags());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     * Sets the {@code Name} of the {@code Task} that we are building."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public MemberBuilder withName(String name) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        this.name \u003d new MemberName(name);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     * Sets the {@code TaskStatus} of the {@code Task} that we are building."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public MemberBuilder withId(MemberId memberId) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        this.id \u003d memberId;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Task} that we are building."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public MemberBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        this.tags \u003d SampleMemberDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public Member build() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        return new Member(name, id, tags);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seahlynn": 62
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ProjectDashboardBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.ProjectDashboard;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Addressbook objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ambhinav"
        },
        "content": " *     {@code ProjectDashboard ab \u003d new ProjectDashboardBuilder().withTask(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "public class ProjectDashboardBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    private ProjectDashboard projectDashboard;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public ProjectDashboardBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        projectDashboard \u003d new ProjectDashboard();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public ProjectDashboardBuilder(ProjectDashboard projectDashboard) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        this.projectDashboard \u003d projectDashboard;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * Adds a new {@code Task} to the {@code ProjectDashboard} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public ProjectDashboardBuilder withTask(Task task) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        projectDashboard.addTask(task);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public ProjectDashboard build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        return projectDashboard;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambhinav": 14,
      "-": 20
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TaskBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.task.Name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.task.TaskStatus;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.util.SampleTaskDataUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ambhinav"
        },
        "content": " * A utility class to help with building Task objects."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "public class TaskBuilder {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Sample Task Name\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    private TaskStatus taskStatus;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public TaskBuilder() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        taskStatus \u003d TaskStatus.UNBEGUN;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * Initializes the TaskBuilder with the data of {@code taskToCopy}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public TaskBuilder(Task taskToCopy) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        name \u003d taskToCopy.getName();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        taskStatus \u003d taskToCopy.getTaskStatus();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(taskToCopy.getTags());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * Sets the {@code Name} of the {@code Task} that we are building."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public TaskBuilder withName(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * Sets the {@code TaskStatus} of the {@code Task} that we are building."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public TaskBuilder withStatus(TaskStatus taskStatus) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        this.taskStatus \u003d TaskStatus.valueOf(taskStatus.toString());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ambhinav"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Task} that we are building."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public TaskBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        this.tags \u003d SampleTaskDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public Task build() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        return new Task(name, taskStatus, tags);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambhinav": 31,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TaskUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_NAME;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_STATUS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_TAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.logic.commands.AddTaskCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ambhinav"
        },
        "content": " * A utility class for Task."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "public class TaskUtil {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * Returns an add command string for adding the {@code task}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public static String getAddTaskCommand(Task task) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        return AddTaskCommand.COMMAND_WORD + \" \" + getTaskDetails(task);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * Returns the part of command string for the given {@code task}\u0027s details."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public static String getTaskDetails(Task task) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        sb.append(PREFIX_TASK_NAME + task.getName().fullName + \" \");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        sb.append(PREFIX_TASK_STATUS + task.getTaskStatus().toString().toLowerCase() + \" \");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        task.getTags().stream().forEach("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            s -\u003e sb.append(PREFIX_TASK_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * Returns the part of command string for the given {@code EditTaskDescriptor}\u0027s details."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public static String getEditTaskDescriptorDetails(EditCommand.EditTaskDescriptor descriptor) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_TASK_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        descriptor.getTaskStatus().ifPresent(taskStatus -\u003e sb.append(PREFIX_TASK_STATUS).append(taskStatus.toString()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                .toLowerCase()).append(\" \"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                sb.append(PREFIX_TASK_TAG);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TASK_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambhinav": 21,
      "seahlynn": 3,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * Returns the middle index of the task in the {@code model}\u0027s task list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        return Index.fromOneBased(model.getFilteredTasksList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * Returns the last index of the task in the {@code model}\u0027s task list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        return Index.fromOneBased(model.getFilteredTasksList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * Returns the task in the {@code model}\u0027s task list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public static Task getTask(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        return model.getFilteredTasksList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambhinav": 8,
      "-": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIds.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.model.member.MemberId;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "public class TypicalIds {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public static final MemberId ID_FIRST_MEMBER \u003d new MemberId(\"GS\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public static final MemberId ID_SECOND_MEMBER \u003d new MemberId(\"EK\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public static final MemberId ID_THIRD_MEMBER \u003d new MemberId(\"JD\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seahlynn": 10
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public static final Index INDEX_FIRST_TASK \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public static final Index INDEX_SECOND_TASK \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public static final Index INDEX_THIRD_TASK \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public static final Index INDEX_FIRST_INVENTORY \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public static final Index INDEX_SECOND_INVENTORY \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public static final Index INDEX_THIRD_INVENTORY \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambhinav": 3,
      "ArunBeCoding": 4,
      "-": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalInventories.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_INVENTORY_NAME_MUSIC;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_INVENTORY_NAME_SPORTS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_INVENTORY_PRICE_MUSIC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_INVENTORY_PRICE_SPORTS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import seedu.address.model.ProjectDashboard;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import seedu.address.model.inventory.Inventory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import seedu.address.model.inventory.Price;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": " * A utility class containing a list of {@code Inventory} objects to be used in tests."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "public class TypicalInventories {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public static final Inventory SHIRTS \u003d new InventoryBuilder().withName(\"Shirts\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            .withPrice(new Price(5)).build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public static final Inventory POSTERS \u003d new InventoryBuilder().withName(\"Posters\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            .withPrice(new Price(24.99)).build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public static final Inventory BADGES \u003d new InventoryBuilder().withName(\"Badges\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            .withPrice(new Price(15.50)).build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public static final Inventory BALLS \u003d new InventoryBuilder().withName(\"Balls\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            .withPrice(new Price(0)).build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public static final Inventory CATERING \u003d new InventoryBuilder().withName(\"Caterers\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            .withPrice(new Price(550)).build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public static final Inventory PRESENTATION_ITEMS \u003d new InventoryBuilder().withName(\"Presentation Items\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            .withPrice(new Price(9.90)).build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public static final Inventory BOXES \u003d new InventoryBuilder().withName(\"Boxes\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            .withPrice(new Price(12.10)).build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public static final Inventory MAKEUP \u003d new InventoryBuilder()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            .withName(\"Makeup\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            .withPrice(new Price(49.90)).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public static final Inventory PARTY_EQUIPS \u003d new InventoryBuilder()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            .withPrice(new Price(2.90))"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            .withName(\"Party equipments\").build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    // Manually added - Task\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public static final Inventory SPORTS \u003d new InventoryBuilder().withName(VALID_INVENTORY_NAME_SPORTS)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            .withPrice(new Price(VALID_INVENTORY_PRICE_SPORTS)).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public static final Inventory MUSIC \u003d new InventoryBuilder().withName(VALID_INVENTORY_NAME_MUSIC)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            .withPrice(new Price(VALID_INVENTORY_PRICE_MUSIC)).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    private TypicalInventories() {} // prevents instantiation"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * Returns an {@code ProjectDashboard} with all the typical persons."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public static ProjectDashboard getTypicalProjectDashboard() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        ProjectDashboard ab \u003d new ProjectDashboard();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        for (Inventory inventory : getTypicalInventories()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            ab.addInventory(inventory);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public static List\u003cInventory\u003e getTypicalInventories() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(SHIRTS, POSTERS, BADGES,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                BALLS, CATERING, PRESENTATION_ITEMS, BOXES));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ArunBeCoding": 66
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalTasksMembers.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MEMBER_ID_FINANCE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MEMBER_ID_PUBLICITY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MEMBER_NAME_FINANCE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MEMBER_NAME_PUBLICITY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MEMBER_TAG_FINANCE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MEMBER_TAG_PUBLICITY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FINANCE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_PUBLICITY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TASK_NAME_FINANCE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TASK_NAME_PUBLICITY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.ProjectDashboard;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import seedu.address.model.inventory.Inventory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.model.member.Member;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "import seedu.address.model.member.MemberId;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "import seedu.address.model.task.TaskStatus;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ambhinav"
        },
        "content": " * A utility class containing a list of {@code Task} objects to be used in tests."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "public class TypicalTasksMembers {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    //TASKS"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public static final Task ORDER_SHIRTS \u003d new TaskBuilder().withName(\"Order shirts from supplier\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            .withStatus(TaskStatus.UNBEGUN)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            .withTags(\"inventory\").build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public static final Task PRINT_POSTERS \u003d new TaskBuilder().withName(\"Print posters for student fair\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            .withStatus(TaskStatus.UNBEGUN)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            .withTags(\"urgent\", \"publicity\").build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public static final Task GET_SPONSORS \u003d new TaskBuilder().withName(\"Get sponsors for student fair\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            .withStatus(TaskStatus.DOING).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public static final Task RECRUIT_MEMBERS \u003d new TaskBuilder().withName(\"Recruit members for student fair\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            .withStatus(TaskStatus.DONE)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            .withTags(\"manpower\").build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public static final Task ORDER_CATERING \u003d new TaskBuilder()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            .withName(\"Find caterers for snacks in student fair booth\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            .withStatus(TaskStatus.DOING)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            .withTags(\"inventory\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public static final Task BRIEFING_PREPARATION \u003d new TaskBuilder()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            .withName(\"Prepare presentation briefing\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            .withStatus(TaskStatus.DONE)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            .withTags(\"personal\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public static final Task ORGANISE_STORE \u003d new TaskBuilder()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            .withName(\"Organise inventory store before student fair\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            .withStatus(TaskStatus.UNBEGUN)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            .withTags(\"inventory\", \"urgent\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public static final Task FIND_VP \u003d new TaskBuilder()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            .withName(\"Find vice president of planning\")"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            .withStatus(TaskStatus.DOING)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            .withTags(\"manpower\", \"urgent\")"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public static final Task FAREWELL_PARTY \u003d new TaskBuilder()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            .withStatus(TaskStatus.DONE)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            .withTags(\"recreation\", \"important\")"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            .withName(\"Ida Mueller\").build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    // Manually added - Task\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public static final Task REVIEW_BUDGET \u003d new TaskBuilder().withName(VALID_TASK_NAME_FINANCE)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            .withStatus(TaskStatus.UNBEGUN)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            .withTags(VALID_TAG_FINANCE).build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public static final Task BUILD_WEBSITE \u003d new TaskBuilder().withName(VALID_TASK_NAME_PUBLICITY)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            .withStatus(TaskStatus.DOING)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            .withTags(VALID_TAG_PUBLICITY)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    //MEMBERS"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public static final Member JOHN_DOE \u003d new MemberBuilder().withName(\"John Doe\")"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            .withId(new MemberId(\"JD\"))"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            .withTags(\"help\").build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public static final Member GABRIEL_SEOW \u003d new MemberBuilder().withName(\"Gabriel Seow\")"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            .withId(new MemberId(\"GS\"))"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            .withTags(\"ChiefProgrammer\").build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public static final Member ELSA_KOH \u003d new MemberBuilder().withName(\"Elsa Koh\")"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            .withId(new MemberId(\"EK\")).build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public static final Member ARUN \u003d new MemberBuilder().withName(\"Arun\")"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            .withId(new MemberId(\"AR\"))"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            .withTags(\"Programmer\").build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public static final Member ABHINAV \u003d new MemberBuilder().withName(\"Abhinav\")"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            .withId(new MemberId(\"AB\"))"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            .withTags(\"UIdesigner\")"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public static final Member SEAH_LYNN \u003d new MemberBuilder().withName(\"Seah Lynn\")"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            .withId(new MemberId(\"SL\"))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            .withTags(\"Programmer\")"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public static final Member RANDOM \u003d new MemberBuilder().withName(\"Random Member\")"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            .withId(new MemberId(\"RM\"))"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            .withTags(\"random\", \"member\")"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public static final Member ANDY \u003d new MemberBuilder()"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            .withName(\"Andy Anderson\")"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            .withId(new MemberId(\"AA\"))"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            .withTags(\"random\", \"member\")"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public static final Member BENSON \u003d new MemberBuilder()"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            .withId(new MemberId(\"BB\"))"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            .withTags(\"random\", \"member\")"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            .withName(\"Benson Bon\").build();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    // Manually added - Task\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public static final Member FINANCE_MEMBER \u003d new MemberBuilder().withName(VALID_MEMBER_NAME_FINANCE)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            .withId(new MemberId(VALID_MEMBER_ID_FINANCE))"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            .withTags(VALID_MEMBER_TAG_FINANCE).build();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public static final Member PUBLICITY_MEMBER \u003d new MemberBuilder().withName(VALID_MEMBER_NAME_PUBLICITY)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            .withId(new MemberId(VALID_MEMBER_ID_PUBLICITY))"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            .withTags(VALID_MEMBER_TAG_PUBLICITY)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    private TypicalTasksMembers() {} // prevents instantiation"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "     * Returns an {@code ProjectDashboard} with all the typical persons."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "    public static ProjectDashboard getTypicalProjectDashboard() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        ProjectDashboard ab \u003d new ProjectDashboard();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        for (Task task : getTypicalTasksMembers()) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "            ab.addTask(task);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        for (Member member : getTypicalMembers()) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "            ab.addMember(member);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        for(Inventory inventory: TypicalInventories.getTypicalInventories()) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            ab.addInventory(inventory);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public static List\u003cTask\u003e getTypicalTasksMembers() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ORDER_SHIRTS, PRINT_POSTERS, GET_SPONSORS,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ambhinav"
        },
        "content": "                RECRUIT_MEMBERS, ORDER_CATERING, BRIEFING_PREPARATION, ORGANISE_STORE));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "seahlynn"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    public static List\u003cMember\u003e getTypicalMembers() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(JOHN_DOE, GABRIEL_SEOW, ELSA_KOH, ABHINAV, ARUN,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "                SEAH_LYNN, RANDOM));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "seahlynn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ambhinav": 56,
      "ArunBeCoding": 5,
      "seahlynn": 67,
      "-": 25
    }
  }
]
