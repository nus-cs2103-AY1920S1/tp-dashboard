[
  {
    "path": "README.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "\u003d Scheduler"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "https://travis-ci.org/AY1920S1-CS2103-F09-1/main[image:https://travis-ci.org/se-edu/addressbook-level3.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "https://ci.appveyor.com/project/ChrisKheng/main/branch/master[image:https://ci.appveyor.com/api/projects/status/7xipch56f5hpgwqw/branch/master?svg\u003dtrue[Build status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "https://coveralls.io/github/AY1920S1-CS2103-F09-1/main?branch\u003dmaster[image:https://coveralls.io/repos/github/AY1920S1-CS2103-F09-1/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "https://gitter.im/se-edu/Lobby[image:https://badges.gitter.im/se-edu/Lobby.svg[Gitter chat]]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "*Scheduler* is a desktop application for scheduling interviews. It matches interviewees with interviewers automatically through our robust algorithm so you don\u0027t have to."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "If you are a secretary facing a headache on organising interview slots for your team, we offer just the solution for you. Simply import or input the available timings of both your interviewers and interviewees, and start scheduling those interviews right away!"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "For more information, please refer to our \u003c\u003cUserGuide#, User Guide\u003e\u003e. Developers, please refer to our \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "This application was developed by a team of students from the National University of Singapore (NUS) as part of the CS2103 Software Engineering module. \u003c\u003cAboutUs#, Read more about us\u003e\u003e or \u003c\u003cContactUs#, contact us\u003e\u003e directly."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "This project was built on the AddressBook-Level3 project developed as part of the SE-EDU initiative: https://se-education.org"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 3,
      "dcshzj": 7,
      "-": 19
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "mainClassName \u003d \u0027seedu.scheduler.Main\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    compile \"org.apache.poi:poi:3.17\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    compile \"org.apache.poi:poi-ooxml:3.17\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    archiveName \u003d \u0027scheduler.jar\u0027"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        \u0027site-name\u0027: \u0027Scheduler\u0027,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/AY1920S1-CS2103-F09-1/main\u0027,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 3,
      "mirozo": 2,
      "dcshzj": 1,
      "-": 151
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Scheduler was developed by https://github.com/AY1920S1-CS2103-F09-1[Team AY1920S1-CS2103-F09-1] +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "\u003d\u003d\u003d Prof. Damith C.Rajapakse"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "image::damithc.jpg[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "{empty}[http://www.comp.nus.edu.sg/~damithch[homepage]] [https://github.com/damithc[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Project Advisor"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "\u003d\u003d\u003d Kheng Yau Dong"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "image::chriskheng.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "{empty}[https://github.com/ChrisKheng[github]] [\u003c\u003cKheng-Yau-Dong#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Role: Team lead, developer +"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Responsibilities: Scheduling component"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "\u003d\u003d\u003d Hsu Zhong Jun"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "image::dcshzj.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "{empty}[https://github.com/dcshzj[github]] [\u003c\u003cHsu-Zhong-Jun#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Role: Developer, testing +"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Responsibilities: Emailing component"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "\u003d\u003d\u003d Ang Wei Heng Kendrick"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "image::kendrickang.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "{empty}[https://github.com/KendrickAng[github]] [\u003c\u003cAng-Wei-Heng-Kendrick#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Role: Developer, integration +"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Responsibilities: Model"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "\u003d\u003d\u003d Kwan Chen Sheng"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "image::mrchensheng21.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "{empty}[https://github.com/mrchensheng21[github]] [\u003c\u003cKwan-Chen-Sheng#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Role: Developer, documentation +"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "Responsibilities: UI"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "\u003d\u003d\u003d Goh Rui Zhi"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "image::mirozo.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "{empty}[https://github.com/mirozo[github]] [\u003c\u003cGoh-Rui-Zhi#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Role: Developer, documentation +"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Responsibilities: Storage"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 30,
      "-": 34
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/AY1920S1-CS2103-F09-1/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "* *Email us* : You can also reach us at xan8887@gmail.com"
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 2,
      "-": 5
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d AddressBook Level 3 - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level3/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "By: `Team SE-EDU`      Since: `Jun 2016`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cSettingUp#, here\u003e\u003e."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureDiagram.png[]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "The `.puml` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the \u003c\u003cUsingPlantUml#, Using PlantUML guide\u003e\u003e to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has two classes called link:{repoURL}/src/main/java/seedu/address/Main.java[`Main`] and link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureSequenceDiagram.png[]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "\u003d\u003d\u003d\u003d Schedule View"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "The display schedule feature extends Scheduler to display multiple tables of schedule per day. It is a component in the \"MainWindow\" class"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "stored in a \"ScheduleViewPanel\" class. Within the \"ScheduleViewPanel\" class, objects of \"ScheduleView\" class are stored into the panel."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "ScheduleViewPanel implements the following function:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "*`fillPanel()` -- Fill the ScheduleView component with the schedule tables for each day."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Given below is an example scenario of what will be displayed to the user."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Step 1. The user launches the application. The Ui will start and the MainWindow will be displayed first."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Step 2. MainWindow will call all the children such as the HelpWindow, CommandBox, Result Display, StatusBarFooter and ScheduleViewPanel."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Step 3. Once ScheduleViewPanel is called, it will take in a list of titles and ObservableList data from the Logic class. The list of titles"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "consist of the title column for each schedule table and the ObservableList data consists of the time slots allocated to each interviewee."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Step 4. ScheduleViewPanel will call the ScheduleView class to fill each table and populate each table with the data given by the Logic class."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Step 5. ScheduleView will have a .fxml file of a table and it will first be filled with the column titles, followed by the time slots and the"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "interviewee allocated to each time slots. The slot that has no interviewee will be displayed as \"0\"."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Step 6. Once the data is populated, the MainWindow will display the schedules of each day arranged in a table format."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "image::ScheduleViewSequenceDiagram.png[]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "\u003d\u003d\u003d\u003d UI Refresh"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "Step 1. Once User imports a new .csv file, it will call the RefreshListener Interface. RefreshListenerManager will then take in the new titles and"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "list of ObservableList of interviewee."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "Step 2. The RefreshListenerManager will call the MainWindow to refresh the ScheduleViewPanel."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "Step 3  . ScheduleViewPanel will firstly clear all the data and input the updated data from the .csv file."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "image::ImportUIRefreshSequenceDiagram.png[]"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "image::LogicClassDiagram1_2.png[]"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Users should be able to manually key in input (i.e add interviewers and interviewees). We therefore changed the Logic"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "package accordingly to suit our needs."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ".  `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeleteSequenceDiagram.png[]"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[]"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "* stores a list of `Schedule`. Each `Schedule` represents a schedule timetable."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "* exposes a list of `ObservableList\u003cObservableList\u003cString\u003e\u003e` that can be \u0027observed\u0027 by the UI. Each of the"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "  `ObservableList\u003cObservableList\u003cString\u003e\u003e` represents the data of a `Schedule` object."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "  The `ObservableList\u003cObservableList\u003cString\u003e\u003e` objects are bound to the UI so that the UI automatically updates  when the data of the `Schedule` objects changes."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "* exposes a list of `ObservableList\u003cInterviewee\u003e` that can be \u0027observed\u0027 by the UI."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "\u003d\u003d\u003d\u003d Schedule"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "The `Schedule` objects are filled up and created by the imported interviewer\u0027s availability. The inner data of a `Schedule` object is the same as the corresponding availability"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "table in the imported interviewer\u0027s availability. The data of the `Schedule` can be changed after running the scheduling algorithm."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[]"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the Address Book data in json format and read it back."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "\u003d\u003d\u003d Add Interviewee/Interviewer feature"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "The add command is facilitated by the `AddCommandParser` class. It extends `AddCommandParser` by allowing it to parse"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "prefixes specific to our Scheduler app, namely:"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "* r/ROLE"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "* f/FACULTY"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "* ep/PERSONAL_EMAIL and ew/NUS_WORK_EMAIL"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "* y/YEAR_OF_STUDY"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "* d/DEPARTMENT"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "* s/SLOT"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "This command also requires access to the Model package, where the AddressBook implementation lives, as well as the"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "Storage package, where the `JsonSerializableAddressBook` implementation lives. Consequently, the following json-friendly"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "classes were added:"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "* JsonAdaptedInterviewee, JsonAdaptedInterviewer, JsonAdaptedDepartment, JsonAdaptedSlot"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "The following *sequence diagram* describes how the add command works when adding an interviewee:"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "image::AddSequenceDiagram_1_2.png[]"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "The following activity diagram shows the steps needed to add a new interviewee:"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "image::AddActivityDiagram_1_2.png[]"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "\u003d\u003d\u003d [Coming soon in v1.3] Scheduling Algorithm"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "The scheduling of interviews is essentially a https://www.geeksforgeeks.org/maximum-bipartite-matching/[maximum bipartite matching problem]."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "The application is trying to find the **maximum number of matching** between available interview slots"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "and interviewees."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "In this application, the selected algorithm is https://www.geeksforgeeks.org/hopcroft-karp-algorithm-for-maximum-matching-set-1-introduction/[hopcroft-karp algorithm]."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "The complexity of the algorithm is o(√v x e), which is reasonably fast. The relevant details of the algorithm are as below:"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "**Vertex**"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "**Edge**"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "**Matching Criteria** +"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "An interviewee matches an interview slot if **all** the criteria below are fulfilled:"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ". The timing of the slot matches one of the available timings of the interviewee."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ". The department of the time slot matches the department of choice of the interviewee."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "**Brief Explanation of the Algorithm** +"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Include an **activity diagram** here to summarise the algorithm."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "The proposed implementation of this algorithm is to encapsulate the logic of the algorithm into a `Command` class under"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "`Logic` component, possibly with the help of some auxiliary classes. The command is then invoked when the user key in the relevant"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "The proposed implementation of this algorithm is to encapsulate the logic of the algorithm into a `Command` class under"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "`Logic` component, possibly with the help of some auxiliary classes. The command is then invoked when the user key in the relevant"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "command keyword (refer user guide)."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "When the scheduling algorithm has finished running, it will update the data in the `Schedule` objects to reflect the"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "allocated time slots to the interviewees, which the changes will then be reflected automatically in the UI."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "mirozo"
        },
        "content": "\u003d\u003d\u003d Import"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "mirozo"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "mirozo"
        },
        "content": "The import feature uses `CsvReader` in the Model to read the given .csv file and stores the data into the model."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "mirozo"
        },
        "content": "* `import interviewer \u003ccsv file\u003e` stores the read data as a list of `Schedule` objects in the model."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "mirozo"
        },
        "content": "* `import interviewee \u003ccsv file\u003e` stores the read data as a list of `Interviewee` objects in the model."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "mirozo"
        },
        "content": "* `CsvReader` makes use of `BufferedReader` to read data from the given file."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "mirozo"
        },
        "content": "image::ImportSequenceDiagram.png[]"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "mirozo"
        },
        "content": "Given above is an example of a sequence diagram for importing interviewer\u0027s schedules. It applies to both importing interviewee\u0027s and interviewer\u0027s data."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "mirozo"
        },
        "content": "As seen in the above sequence diagram, the execution of the import feature consists of these steps:"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "mirozo"
        },
        "content": "* Step 1: `LogicManager` will start executing the command by parsing it over to `AddressBookParser`."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "mirozo"
        },
        "content": "* Step 2: `AddressBookParser` will then look and initialise an `ImportCommand` instance and return it to `LogicManager`."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "mirozo"
        },
        "content": "* Step 3: `LogicManager` will then call execute() on the returned `ImportCommand`  object."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "mirozo"
        },
        "content": "* Step 4: During the execute() method, the method will initialise a `CsvReader` object to `read()` data from the the given .csv file."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "mirozo"
        },
        "content": "* Step 5: The read data will then be stored as either `scheduleList` or `intervieweeList` in the model."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "mirozo"
        },
        "content": "image::ImportActivityDiagram.png[]"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "mirozo"
        },
        "content": "\u003d\u003d\u003d [Coming soon in v1.4] Export"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "mirozo"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation [Proposed]"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "mirozo"
        },
        "content": "The Export command gets the scheduled time slots from the Model and writes them in the specified .csv file."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "mirozo"
        },
        "content": "CsvWriter facilitates the writing to the specified file."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "mirozo"
        },
        "content": "* CsvWriter makes use of `BufferedWriter` to write data into the specified file."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "mirozo"
        },
        "content": "Below shows the sequence diagram of an example export command."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "mirozo"
        },
        "content": "image::ExportSequenceDiagram.png[]"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "mirozo"
        },
        "content": "The implementation is very similar to the Import feature. The only differences are in the Model where CsvWriter gets"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "mirozo"
        },
        "content": "the scheduled time slots from the Model and proceeds to write it into the specified file using a `BufferedWriter`."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "mirozo"
        },
        "content": "The Activity Diagram below summarises the execution of the export command."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "mirozo"
        },
        "content": "image::ExportActivityDiagram.png[]"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "\u003d\u003d\u003d [Coming soon in v1.4] Email"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "The Email feature makes use of the `java.awt.Desktop` package to activate the default Mail client of the user."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "* The `To:` field is automatically populated with all the emails that are tagged to a particular Interviewee."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "* The `Cc:` field is configurable by the user via an optional configuration file."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "* The subject and message body are also automatically populated with details that are relevant to the Interviewee, depending on the context of the command used."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "image::EmailSequenceDiagram.png[]"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Example: Interview timeslot"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "This is for opening the email dialog for sending the email to the Interviewee of his/her allocated interview timeslot. Details that vary according to the Interviewee include:"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "* Date and time of allocated timeslot"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "* Interviewer allocated"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "Additional details that can be configured by the user (as user preferences) include:"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "* Location to report"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "* Dress code"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "* Any other additional information"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "The message content can also be configured by the user. However, a default template will be used when no such configuration file exists or is provided."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "mirozo"
        },
        "content": "[Implementation-Configuration]"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDocumentation#, here\u003e\u003e."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cTesting#, here\u003e\u003e."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDevOps#, here\u003e\u003e."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "mirozo"
        },
        "content": "* has a need to manage and schedule many interviews with multiple interviewers involved."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "mirozo"
        },
        "content": "*Value proposition*: manage the scheduling of interviews faster with CLI than mouse/GUI driven apps."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |new user |see usage instructions |refer to instructions when I forget how to use the App"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "mirozo"
        },
        "content": "|`* * *` |secretary of NUS CCA  |manually add new interviewees and their availabilities| make changes without having to edit the .csv file and doing another import."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "mirozo"
        },
        "content": "|`* * *` |secretary of NUS CCA  |delete an interview |remove interviews that have been taken out."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "mirozo"
        },
        "content": "|`* * *` |secretary of NUS CCA  |find a interviewee by name|locate details of person and their interview without having to go through the entire list"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "mirozo"
        },
        "content": "|`* * *` |secretary of NUS CCA |automate the process of scheduling interviews |lighten my workload"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "mirozo"
        },
        "content": "|`* * *` |secretary of NUS CCA |import the available timeslots of interviewees from a .csv template |schedule the interviews for them"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "mirozo"
        },
        "content": "|`* * *` |secretary of NUS CCA |export the scheduled interviews as a .csv file |I can view and manage them in Excel"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "mirozo"
        },
        "content": "|`* * *` |secretary of NUS CCA |add details of interviewee e.g. email/phone number |easily view the details of the interviewees"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "mirozo"
        },
        "content": "|`* * *` |secretary of NUS CCA |view a timetable of the finalized interview slots |show the interviewers which timeslots they will be taking at a glance"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "mirozo"
        },
        "content": "|`* * *` |secretary of NUS CCA |email blast the generated interview schedule to all interviewees |inform the interviewees of their interview"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "mirozo"
        },
        "content": "|`* * *` |secretary of NUS CCA |be informed if interview allocation of a certain interviewee has failed |manually fix conflicts or get the interviewee to give another available timeslot"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "mirozo"
        },
        "content": "|`* * *` |very busy secretary of NUS CCA |automate the process of scheduling interviews |lighten my workload"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "mirozo"
        },
        "content": "|`* * *` |forgetful secretary of NUS CCA |mark an interviewee as \u0027completed interview\u0027 |track and manage uncompleted interviews"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "mirozo"
        },
        "content": "|`* * *` |secretary of NUS CCA |add multiple tags to an interviewee in a single command |I can be efficient"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "mirozo"
        },
        "content": "|`* * *` |fast-typer |use CLI for the app instead of mouse/GUI |access the commands in the fastest possible way"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "mirozo"
        },
        "content": "|`* *` |developer |CLI and GUI to be separated |isolate either one for testing and debugging purposes"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "mirozo"
        },
        "content": "|`* *` |secretary of NUS CCA |track the attendance of my interviewees |"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "mirozo"
        },
        "content": "|`* *` |secretary of NUS CCA |rank my interviewees by potential |I would be able to evaluate them better"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "mirozo"
        },
        "content": "|`* *` |secretary of NUS CCA |be able to sort interviewees by ranking |I can easily record down the shortlisted ones"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "mirozo"
        },
        "content": "|`* *` |secretary of NUS CCA |schedule group interviews |I can use less manpower on days that I do not have enough interviewers"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "mirozo"
        },
        "content": "|`* *` |busy secretary of NUS CCA |share the current scheduled timeslots with another secretary |give them access to help with the scheduling of interviews as well"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "mirozo"
        },
        "content": "|`* *` |secretary of NUS CCA |email the interview results to interviewees |inform them of the outcomes of the interview"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "mirozo"
        },
        "content": "|`*` |secretary of NUS CCA |hide \u003c\u003cprivate-contact-detail,private contact details\u003e\u003e by default |minimize chance of someone else seeing them by accident"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "mirozo"
        },
        "content": "|`*` |secretary of NUS CCA with many interviewees |sort persons by name |locate an interviewee easily"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "mirozo"
        },
        "content": "(For all use cases below, the *System* is the `Scheduler` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "mirozo"
        },
        "content": "\u003d\u003d\u003d Use case: (UC-1) Delete interview slot"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "mirozo"
        },
        "content": "1.  User requests to list interview slots"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "mirozo"
        },
        "content": "2.  Scheduler shows a list interview slots"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "mirozo"
        },
        "content": "3.  User requests to delete a specific interview slot in the list"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "mirozo"
        },
        "content": "4.  Scheduler deletes the interview slot"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "mirozo"
        },
        "content": "** 3a1. Scheduler shows an error message."
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "mirozo"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "mirozo"
        },
        "content": "\u003d\u003d\u003d Use case: (UC-2) Import interviewee\u0027s time slots"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "mirozo"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "mirozo"
        },
        "content": "1.  User requests to import interviewee\u0027s time slots and specify file location"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "mirozo"
        },
        "content": "2.  Scheduler imports interviewee\u0027s time slots from specified file"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "mirozo"
        },
        "content": "+"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "mirozo"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "mirozo"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "mirozo"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "mirozo"
        },
        "content": "* 1a. Specified file doesn\u0027t exist"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "mirozo"
        },
        "content": "** 1a1. Scheduler shows error message"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "mirozo"
        },
        "content": "+"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "mirozo"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "mirozo"
        },
        "content": "* 1b. Specified file doesn\u0027t follow correct format"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "mirozo"
        },
        "content": "** 1b1. Scheduler shows error message"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "mirozo"
        },
        "content": "+"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "mirozo"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "mirozo"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "mirozo"
        },
        "content": "\u003d\u003d\u003d Use case: (UC-3) Import interviewer\u0027s time slots"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "mirozo"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "mirozo"
        },
        "content": "1.  User requests to import interviewer\u0027s time slots and specify file location"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "mirozo"
        },
        "content": "2.  Scheduler imports interviewer\u0027s time slots from specified file"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "mirozo"
        },
        "content": "+"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "mirozo"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "mirozo"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "mirozo"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "mirozo"
        },
        "content": "* 1a. Specified file doesn\u0027t exist"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "mirozo"
        },
        "content": "** 1a1. Scheduler shows error message"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "mirozo"
        },
        "content": "+"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "mirozo"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "mirozo"
        },
        "content": "* 1b. Specified file doesn\u0027t follow correct format"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "mirozo"
        },
        "content": "** 1b1. Scheduler shows error message"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "mirozo"
        },
        "content": "+"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "mirozo"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "mirozo"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "mirozo"
        },
        "content": "\u003d\u003d\u003d Use case: (UC-4) Schedule interview slots"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "mirozo"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "mirozo"
        },
        "content": "1. User __imports interviewee\u0027s availability (UC-2)__"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "mirozo"
        },
        "content": "2. User __imports interviewer\u0027s availability (UC-3)__"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "mirozo"
        },
        "content": "3.  User requests to generate timetable of all available interview time slots based on the availability of *interviewers*."
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "mirozo"
        },
        "content": "4.  Scheduler generates timetable"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "mirozo"
        },
        "content": "5.  User requests schedule interviewees based on the available timetable"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "mirozo"
        },
        "content": "6.  Scheduler allocates interviewees into the time slots in the generated timetable"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "mirozo"
        },
        "content": "+"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "mirozo"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "mirozo"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "mirozo"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "mirozo"
        },
        "content": "* 5a. Unable to fit all interviewees into timetable."
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "mirozo"
        },
        "content": "** 5a1. Scheduler shows an error message with the names of interviewees that are not allocated a slot."
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "mirozo"
        },
        "content": "+"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "mirozo"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ".  The software should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ".  Should be able to hold up to 1000 interviewers and interviewees without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ".  The software should be simple enough to use without much manual intervention by the user."
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ".  The software should respond to the user actions within 5 seconds."
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ".  The source code should be open-source."
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "[[availabilities]] Availabilities::"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "A list of date and times that either an interviewer or interviewee is available for an interview."
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "[[email-blast]] Email blast::"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "A process of sending an email to multiple recipients, which may or may not be tailored to the recipient."
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "[[interview]] Interview::"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "A particular time and date in which an interviewee meets an interviewer."
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "[[interviewee]] Interviewee::"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "A person that is attending an interview and is required to meet at least one interviewer."
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "[[interviewer]] Interviewer::"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "A person that is conducting interviews and is required to meet multiple interviewees."
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": "[[private-contact-detail]] Private contact detail::"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": "A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "[[secretary-of-NUS-CCA]] Secretary of NUS CCA::"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "A hypothetical person that refers to the user of the software and is tasked to assign interviewees to interviewers."
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "[[timeslot]] Timeslot::"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "A date and time in which either the interviewer or interviewee is available for an interview."
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": "*Product Name*"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": "Author: ..."
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a person"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": ". Deleting a person while all persons are listed"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": ".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 59,
      "mrchensheng21": 11,
      "mirozo": 151,
      "dcshzj": 49,
      "-": 345,
      "KendrickAng": 16
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "\u003d Scheduler - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ":toc-title: Table of Contents"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ":toclevels: 3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level3"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "By: `Team AY1920S1-CS2103-F09-1`      Since: `Oct 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "Due to vastly different timetables, scheduling interviews that don\u0027t clash for applicants to positions in an NUS"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "Co-Curricular Activity (CCA) can be difficult. Scheduler is an app that can automate this scheduling of interviews for"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "secretaries in NUS CCAs. Given templates adapted from exported NUSync CCA sign-up lists, Scheduler generates an optimal"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "matching of interviewees to time slots. Scheduler also supports manual input. It is optimised for people who **prefer"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "typing in a Command Line Interface (CLI)** to quickly access the functionalities of an app. +"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Click on \u003c\u003cQuick Start, Quick Start\u003e\u003e to get started!"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "This guide shows you how to import your interviewee and interviewer schedules into Scheduler to begin managing your interview schedule."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "It also shows you basic tips on how to add or delete and edit interviewers/interviewees based on your changing needs."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "\u003d\u003d\u003d Import your csv file into the application"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "To begin, let\u0027s download some comma-separated value (.csv) files with dummy data and import that data into Scheduler."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "Click \u003c\u003cImporting existing availabilities `import`, this link\u003e\u003e to download and import a .csv file of availabilities into Scheduler!"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\u003d\u003d\u003d Manually add interviewees and interviewers"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "Forgot to include some data before importing? No problem!"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "To add an interviewee, use the `add` command. Here we add an interviewee with the following characteristics:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ". *Name* - John Doe"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ". *Phone number* - 91234567"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ". *Faculty* - School of Computing"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ". *Year of study* - 2019"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ". *Department of interest* - Marketing"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ". *Personal Email* - john_doe@gmail.com"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ". *Work email* (should be an NUS email) - john_doe@u.nus.edu"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ". *Preferred time slots* - 17/10/2019, 1pm to 2pm"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " add r/interviewee n/John Doe p/91234567 f/School of Computing y/2019 ep/john_doe@gmail.com ew/john_doe@u.nus.edu d/Marketing s/17/10/2019 13:00-14:00"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "* Note that all fields specified above are *compulsory* when adding an interviewee manually."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "Similarly, to add an interviewer with the characteristics:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ". *Name* - Bohn Coe"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ". *Phone number* - 9765421"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ". *Work email* (should be an NUS email) - bohn_coe@u.nus.edu"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ". *Department* - Marketing"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ". *Available time slots* - 17/10/2019, 1pm to 2pm"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " add r/interviewer n/Bohn Coe p/97654321 ew/bohn_coe@u.nus.edu d/Marketing s/17/10/2019 13:00-14:00"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "* Again, the fields specified above are *compulsory when adding an interviewer manually."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\u003d\u003d\u003d TIP: Converting an Excel file in .csv format"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "1) Open Excel and click *File -\u003e Open*."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "image::quickstart/1_excel.png[width\u003d\"500\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "2) In the dialog box, find the Excel file on your computer and click *Open*."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "image::quickstart/2_excel.png[width\u003d\"500\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "3) On the Excel toolbar, select *File \u003e Save As*."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "image::quickstart/3_excel.png[width\u003d\"500\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "4) In the dialog box, type a new name for your file in the *File Name* field."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "5) In the \"Save as Type\" drop-down menu, scroll down to locate and select *CSV (comma delimited)*."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "image::quickstart/4_excel.png[width\u003d\"500\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "6) Click *Save*."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "image::quickstart/5_excel.png[width\u003d\"500\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mirozo"
        },
        "content": "\u003d\u003d User Preferences"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mirozo"
        },
        "content": "Scheduler is initialised with default user preferences."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mirozo"
        },
        "content": "If you wish to make changes to the user preferences, do the following steps: +"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mirozo"
        },
        "content": "* Step 1: Run scheduler.jar at least once. You should notice new files added to the folder containing the application."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mirozo"
        },
        "content": "* Step 2: Open preferences.json using any word editor, eg. notepad."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mirozo"
        },
        "content": "* Step 3: Edit the relevant user preference fields."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mirozo"
        },
        "content": "The details of each user preference field is explained further in the following sections."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mirozo"
        },
        "content": "\u003d\u003d\u003d Working Hours"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "Each time slot that an interviewer or interviewee indicates, must be within the `startTime` and `endTime` of the pre-defined"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mirozo"
        },
        "content": "working hours for it to be displayed in the schedules."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mirozo"
        },
        "content": "*Format:* +"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "mirozo"
        },
        "content": "`startTime` and `endTime` are defined as strings. It has to follow the string format \"HH:mm\"."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "mirozo"
        },
        "content": "*Default values:* +"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "mirozo"
        },
        "content": "`startTime`: \"10:00\" +"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "mirozo"
        },
        "content": "`endTime`: \"21:00\""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "mirozo"
        },
        "content": "\u003d\u003d\u003d Duration of Time slot"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "Each time slot that an interviewer or interviewee indicates, must be strictly of this pre-defined duration for it to be"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "mirozo"
        },
        "content": " displayed in the schedules. It is represented by `duration` in the user preference file."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "mirozo"
        },
        "content": "*Format:* +"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "mirozo"
        },
        "content": "`duration` is defined as a positive integer representing the number of minutes of each time slot."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "mirozo"
        },
        "content": "*Default values:* +"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "mirozo"
        },
        "content": "`duration`: 30"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "* When adding interviewees or interviewers manually into Scheduler, the `SLOT` input provided must have a duration (in minutes) that matches `duration`."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "* Words in `UPPER_CASE` are the *parameters* to be supplied by the user."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "* Items in square brackets `[]` are optional."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "* Items with `...` after them can be used multiple times, including zero times."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "* *Parameters* can be in any order. E.g if a command specifies `n/NAME p/PHONE`, passing the input as `p/PHONE n/NAME` is also acceptable."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "* Example: `add r/interviewee n/NAME p/PHONE f/FACULTY y/YEAR_OF_STUDY ep/PERSONAL_EMAIL ew/NUS_WORK_EMAIL d/DEPARTMENT... s/SLOT... [t/TAG]...`"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "** `NAME`, `PHONE`. `FACULTY`, `YEAR_OF_STUDY`, `PERSONAL_EMAIL`, `NUS_WORK_EMAIL`, `DEPARTMENT`, `SLOT` and `TAG` are to be supplied by the user."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "*** Valid input: `add r/interviewee n/John Doe p/88888888 f/School of Computing y/2019 ep/john_doe@gmail.com ew/john_doe@u.nus.edu d/Marketing s/17/10/2019 13:00-14:00 t/friends`"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "*** `t/friends` is optional, and can be omitted from the command."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "*** Multiple tags can be supplied as input in place of just `t/friends`: `t/friends t/strong t/likesDogs`"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\u003d\u003d\u003d Viewing help `help`"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Shows helpful information on using this software."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "\u003d\u003d\u003d Importing existing availabilities `import`"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "The to-be-imported interviewer availability and interviewee details .csv file needs to follow the format as the templates below."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "The templates for the import commands can be found here:"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "* Interviewer availability: http://bit.ly/interviewerTemplate"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "* Interviewees details: http://bit.ly/intervieweeDetails"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "After you have imported the data, you will need to type `clear` to clear the imported data before you can import another interviewer\u0027s"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "availability or interviewees details .csv file."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "mirozo"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "* Data in .csv file must follow the settings defined in the user preference file. View \u003c\u003cUser Preferences, User Preferences\u003e\u003e if you wish to change the"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "mirozo"
        },
        "content": "default settings."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "mirozo"
        },
        "content": "* Data to be imported should only be in english and should strictly follow the format of the templates given above."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "\u003d\u003d\u003d\u003d Importing interviewers’ availability"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Imports interviewers’ availability from a comma separated values (CSV) file."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "mirozo"
        },
        "content": "* A \"1\" in a timeslot represents AVAILABLE and \"0\" represents UNAVAILABLE."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "mirozo"
        },
        "content": "* The headers should also be in the format `DEPARTMENT - INTERVIEWER\u0027S_NAME`."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "mirozo"
        },
        "content": "* Each timeslot should also be in the format `HH:mm - HH:mm`."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "mirozo"
        },
        "content": "[Note]"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "mirozo"
        },
        "content": "The schedule displayed will only show timeslots from 10:00 to 21:00 daily."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "mirozo"
        },
        "content": "Format: `import interviewer fp/PATH_TO_FILE` +"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    - PATH_TO_FILE is the absolute path to the file. +"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    - E.g C:\\\\Users\\Bob\\file.csv"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "mirozo"
        },
        "content": " import interviewer fp/C:\\Users\\johndoe\\Interviewers.csv"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "\u003d\u003d\u003d\u003d Importing interviewees’ availability"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "mirozo"
        },
        "content": "Imports interviewees’ availability from a comma separated values (CSV) file."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "mirozo"
        },
        "content": "* Emails: Adding more than 1 personal or work email is allowed. Use whitespaces to separate each email."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "mirozo"
        },
        "content": "* Timeslots: Each timeslot should be in the format `HH:mm - HH:mm`. Use commas to separate the timeslots if there are more than 1."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "mirozo"
        },
        "content": "Format: `import interviewee fp/PATH_TO_FILE` +"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    - PATH_TO_FILE is the absolute path to the file. +"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    - E.g C:\\\\Users\\Bob\\file.csv"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "mirozo"
        },
        "content": " import interviewer fp/C:\\Users\\johndoe\\Interviewees.csv"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\u003d\u003d\u003d Add interviewees/interviewers manually `add`"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "Manually add a new entity to the database. The command format differs on the `r/ROLE` prefix supplied:"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "* If `interviewee` is supplied, refer to \u003c\u003cAdding a new interviewee, Adding a new interviewee\u003e\u003e below."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "* If `interviewer` is supplied, refer to \u003c\u003cAdding a new interviewer, Adding a new interviewer\u003e\u003e below."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\u003d\u003d\u003d\u003d Adding a new interviewee"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "Manually add a new interviewee to the database."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "Format: `add r/interviewee n/NAME p/PHONE f/FACULTY y/YEAR_OF_STUDY ep/PERSONAL_EMAIL ew/NUS_WORK_EMAIL d/DEPARTMENT... s/SLOT... [t/TAG]...`"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "mirozo"
        },
        "content": " add r/interviewee n/John Doe p/88888888 t/CAP5 t/dogLover f/School of Computing ep/JohnDoe@gmail.com ew/JohnDoe@u.nus.edu y/2018 d/Marketing s/20/09/2019 18:00-18:30"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "Constraints:"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "* `s/SLOT` must follow the format: `dd/MM/yyyy HH:mm-HH:mm`, where *dd/MM/yyyy* refers to a *date*, the leftmost *HH:mm* refers to the *start duration*"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "and the rightmost *HH:mm* refers to the *end duration*."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "* The date *dd/MM/yyyy* must strictly be a valid date, i.e 30/02/2019  cannot be supplied as a date."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "* The duration of a `s/SLOT` must follow these constraints:"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "** A duration must be in 24-hour format."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "** The range of durations available for input must be within \u003c\u003cWorking Hours, Working Hours\u003e\u003e."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "** The start duration must be earlier than the end duration, and only start at the start of a new hour or new half-hour"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "(i.e 13:00 is a valid start duration, while 13:10 is not)."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "** The time elapsed from the start duration to end duration must follow the number of minutes as specified"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "by the value of `duration` in \u003c\u003cUser Preferences, User Preferences\u003e\u003e. See \u003c\u003cDuration of Time slot, Duration of Time slot\u003e\u003e."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\u003d\u003d\u003d\u003d Adding a new interviewer"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "Manually add a new interviewer to the database."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "Format: `add r/interviewer n/NAME p/PHONE ew/NUS_WORK_EMAIL d/DEPARTMENT  s/SLOT... [t/TAG]...`"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " add r/interviewer n/Mary Jane p/98765432 ew/mary_jane@u.nus.edu d/Marketing s/20/09/2019 18:00-18:30"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "Constraints:"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "* `s/SLOT` must follow the format: `dd/MM/yyyy HH:mm-HH:mm`, where *dd/MM/yyyy* refers to a *date*, the leftmost *HH:mm* refers to the *start duration*"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "and the rightmost *HH:mm* refers to the *end duration*."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "* The date *dd/MM/yyyy* must strictly be a valid date, i.e 30/02/2019  cannot be supplied as a date."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "* The duration of a `s/SLOT` must follow these constraints:"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "** A duration must be in 24-hour format."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "** The range of durations available for input must be within \u003c\u003cWorking Hours, Working Hours\u003e\u003e."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "** The start duration must be earlier than the end duration, and only start at the start of a new hour or new half-hour"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "(i.e 13:00 is a valid start duration, while 13:10 is not)."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "** The time elapsed from the start duration to end duration must follow the number of minutes as specified"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "by the value of `duration` in \u003c\u003cUser Preferences, User Preferences\u003e\u003e. See \u003c\u003cDuration of Time slot, Duration of Time slot\u003e\u003e."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\u003d\u003d\u003d Edit interviewees/interviewers manually `edit`"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "Manually edit an entity in the database. The command format depends on the `r/ROLE` prefix supplied:"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "* If `interviewee` is supplied, refer to \u003c\u003cEdit an existing interviewee, Edit an existing interviewee\u003e\u003e below."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "* If `interviewer` is supplied, refer to \u003c\u003cEdit an existing interviewer, Edit an existing interviewer\u003e\u003e below."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\u003d\u003d\u003d\u003d Edit an existing interviewee"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "Manually edit an existing interviewee in the database."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "Format: `edit NAME r/interviewee [p/PHONE] [f/FACULTY] [y/YEAR_OF_STUDY] [ep/PERSONAL_EMAIL] [ew/NUS_WORK_EMAIL]"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "[d/DEPARTMENT]... [s/SLOT]... [t/TAG]...`"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "Notes:"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "* An empty tag prefix `t/` can be supplied to reset the tags of an interviewee."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "* If a department prefix `d/` is supplied, at least one valid, non-empty department must be provided."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "* If a slot prefix `s/` is supplied, at least one valid, non-empty slot must be provided."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " edit John Doe r/interviewee p/91234567 f/School of Computing s/05/11/2019 18:00-19:00"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "Constraints:"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "* The interviewee to be edited must exist in the Scheduler."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "* `NAME` must be provided after `edit` and before the first prefix `r/ROLE`."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "* At least one optional argument must be supplied, i.e `edit NAME r/interviewee` is not valid input."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "* `s/SLOT` must follow the format: `dd/MM/yyyy HH:mm-HH:mm`, where *dd/MM/yyyy* refers to a *date*, the leftmost *HH:mm* refers to the *start duration*"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "and the rightmost *HH:mm* refers to the *end duration*."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "* The date *dd/MM/yyyy* must strictly be a valid date, i.e 30/02/2019  cannot be supplied as a date."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "* The duration of a `s/SLOT` must follow these constraints:"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "** A duration must be in 24-hour format."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "** The range of durations available for input must be within \u003c\u003cWorking Hours, Working Hours\u003e\u003e."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "** The start duration must be earlier than the end duration, and only start at the start of a new hour or new half-hour"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "(i.e 13:00 is a valid start duration, while 13:10 is not)."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "** The time elapsed from the start duration to end duration must follow the number of minutes as specified"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "by the value of `duration` in \u003c\u003cUser Preferences, User Preferences\u003e\u003e. See \u003c\u003cDuration of Time slot, Duration of Time slot\u003e\u003e."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\u003d\u003d\u003d\u003d Edit an existing interviewer"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "Manually edit an existing interviewer in the database."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "Format: `edit NAME r/interviewer [p/PHONE] [t/TAG]... [d/DEPARTMENT] [ew/NUS_WORK_EMAIL] [s/SLOT...]`"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "Notes:"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "* An empty tag prefix `t/` can be supplied to reset the tags of an interviewee."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "* If a slot prefix `s/` is supplied, at least one valid, non-empty slot must be provided."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " edit John Doe r/interviewee p/91234567 f/School of Computing s/05/11/2019 18:00-19:00"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "Constraints:"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "* The interviewer to be edited must exist in the Scheduler."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "* `NAME` must be provided after `edit` and before the first prefix `r/ROLE`."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "* At least one optional argument must be supplied, i.e `edit NAME r/interviewer` is not valid input."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "* `s/SLOT` must follow the format: `dd/MM/yyyy HH:mm-HH:mm`, where *dd/MM/yyyy* refers to a *date*, the leftmost *HH:mm* refers to the *start duration*"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "and the rightmost *HH:mm* refers to the *end duration*."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "* The date *dd/MM/yyyy* must strictly be a valid date, i.e 30/02/2019  cannot be supplied as a date."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "* The duration of a `s/SLOT` must follow these constraints:"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "** A duration must be in 24-hour format."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "** The range of durations available for input must be within \u003c\u003cWorking Hours, Working Hours\u003e\u003e."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "** The start duration must be earlier than the end duration, and only start at the start of a new hour or new half-hour"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "(i.e 13:00 is a valid start duration, while 13:10 is not)."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "** The time elapsed from the start duration to end duration must follow the number of minutes as specified"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "by the value of `duration` in \u003c\u003cUser Preferences, User Preferences\u003e\u003e. See \u003c\u003cDuration of Time slot, Duration of Time slot\u003e\u003e."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\u003d\u003d\u003d Delete interviewees/interviewers manually `delete`"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "Manually delete an entity from the database."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "Format: `delete NAME r/ROLE`"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "* If `interviewee` is supplied as `ROLE`, refer to \u003c\u003cDelete an existing interviewee, Delete an existing interviewee\u003e\u003e."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "* If `interviewer` is supplied as `ROLE`, refer to \u003c\u003cDelete an existing interviewer, Delete an existing interviewer\u003e\u003e."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\u003d\u003d\u003d\u003d Delete an existing interviewee"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "Deletes the specified interviewee from the database."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "Format: `delete NAME r/interviewee`"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " delete John Doe r/interviewee"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "Constraints:"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "* The interviewee with `NAME` must exist in the Scheduler."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\u003d\u003d\u003d\u003d Delete an existing interviewer"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "Deletes the specified interviewer from the database."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "Format: `delete NAME r/interviewee`"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " delete Bohn Doe r/interviewer"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "Constraints:"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "* The interviewer with `NAME` must exist in the Scheduler."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "\u003d\u003d\u003d UI Display"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "\u003d\u003d\u003d\u003d Viewing Schedules"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "When the Scheduler starts, interview schedules will be displayed for you. The data will be displayed in a table format,"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "with each table representing the schedule for each day. In the first column, the date of that interview schedule will be"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "displayed, the rest of the columns are the departments and the name of their respective person in charge. Subsequent rows"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "will be be displayed by showing the time slot first, with the person allocated to that time slot. If there are no interviewee"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "occupying that time slot, it will be displayed as \"0\"."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "A sample output of the Schedule UI is shown below:"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "image::Ui/Schedule.png[width\u003d\"500\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "For v1.3, the format of the table is as follows."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "For the columns in the table, the first cell on the left will display the date of the schedule. It will be followed by the"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "different departments of the interviewer. The rows display the time slots of availability of the interviewer. \"0\" represents"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "that interviewer is unavailable and \"1\" represents that the interviewer is available."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "image::Ui/InterviewerSchedule.png[width\u003d\"500\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "\u003d\u003d\u003d\u003d Viewing details of interviewees [Coming soon in v1.4]"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "You can view the list of interviewees and the following information:"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "1. Name"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "2. NUS Email"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "3. Personal Email"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "4. Mobile Number"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "5. Faculty/School"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "6. Academic Year"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "7. Choice of Department 1"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "8. Choice of Department 2"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "9. Preferred Time Slots"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "The interviewee list can be viewed by typing the following command"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Format: `display interviewees`"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "image::Ui/Interviewee.png[width\u003d\"500\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "In this screen, you can edit, add or delete interviewees accordingly by using the other features explained in"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "this User Guide."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "\u003d\u003d\u003d\u003d Differentiating the importance of timetable slots through colours `[Coming in v2.0]`"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "As you can see from the timetable above, there are 2 different colours of time slots. This is implemented so you"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "are able to differentiate which interviews are important by using the colour code as shown in the timetable."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "By default, the slots will be green in colour. However, you are able to change the colours based on importance using"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "the following command."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Format: `change DATE TIME IMPORTANCE`"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "\u003d\u003d\u003d Get interview schedule `get` `[Coming in v2.0]`"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "Find an interviewer/interviewee and display his/her interview schedule."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "Format: `get NAME`"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": " get \"John Doe\""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "\u003d\u003d\u003d Tag interview slot `tag` `[Coming in v2.0]`"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "Tags an interview slot with a name."
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "Format: `tag TAG_NAME`"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "User will also be able to filter by tags."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "Format: `filter tag TAG_NAME`"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "\u003d\u003d\u003d Scheduling `schedule`"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "\u003d\u003d\u003d\u003d Schedule the interviews"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Schedule and allocate interviewees to the available interview slots based on the availability of interviewees and"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "their choice of department. As of V1.3, the scheduling result is reflected on the console of the application. This will"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "be updated such that the result is reflected in the displayed interview timetable at v1.4."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "Format: `schedule`"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "mirozo"
        },
        "content": "\u003d\u003d\u003d Exporting of interview schedule `export`"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "Exports the allocated interview schedule timetable to the indicated comma separated values (CSV) file."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "Format: `export fp/FILE_PATH`"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "* PATH_TO_FILE is the absolute path to the file."
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "* E.g C:\\\\Users\\Bob\\file.csv"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "mirozo"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "mirozo"
        },
        "content": " export fp/C:\\Users\\johndoe\\schedules.csv"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "Notes:"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "mirozo"
        },
        "content": "* This command requires the interview schedule to be generated first!"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "* If `FILE_PATH` is a valid .csv file but does not exist, it will be created."
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "\u003d\u003d\u003d Sending of email `email`"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "\u003d\u003d\u003d\u003d Sending of interview time slot to interviewee"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "Opens an email dialog containing the interviewee’s allocated interview time slot to a particular interviewee specified, including other details such as the interviewer and location."
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "Format: `email ct/timeslot n/INTERVIEWEE NAME`"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "Notes:"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "* The email dialog will only appear if the interviewee’s email is present in the database and that the interview schedule has already been generated."
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "\u003d\u003d\u003d\u003d Sending of interview time slot to all interviewees"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "Opens an email dialog containing the interviewee\u0027s allocated interview time slot to every interviewee, including other details such as the interviewer and location. A summary report is then generated at the end of the command execution."
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "Format: `email ct/alltimeslot`"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "Notes:"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "* The email dialog will only appear if the interviewee’s email is present in the database and that the interview schedule has already been generated."
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "\u003d\u003d\u003d\u003d Checking status of emails sent"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "Provides a summary report of the number of interviewees with emails sent and the total number of interviewees stored in the database."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "Format: `email ct/status`"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "\u003d\u003d\u003d\u003d Sending of interview results to an interviewee `[Coming in v2.0]`"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "Opens an email dialog containing the interviewee’s result/interview outcome and other details that you might want to include."
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "Format: `email ct/results n/INTERVIEWEE NAME`"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "Note:"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "* The email dialog will only appear if the interviewee\u0027s email is present in the database and the interview results has been updated."
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "\u003d\u003d\u003d\u003d Sending of interview results to all interviewees `[Coming in v2.0]`"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "Opens an email dialog containing the interviewee\u0027s result/interview outcome and other details that you might want to include for all interviewees."
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "Format: `email ct/allresults`"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "Note:"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "* The email dialog will only appear if the interviewee\u0027s email is present in the database and the interview results has been updated."
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "\u003d\u003d\u003d Recording of additional statuses: `record` `[Coming in v2.0]`"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "\u003d\u003d\u003d\u003d Recording of interviewee’s attendance"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Bring up the window to record the attendance of interviewees. You can navigate through the table in the window (GUI)"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "using the directions key to record the attendance of the interviewees. Hit Enter at the target cell to record the"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "attendance."
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Format: `record attendance`"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "\u003d\u003d\u003d\u003d  Recording of interview result"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "Bring up the window to record the interview result. The way to record the result is the same as 2.12.1."
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Format: `record result`"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "\u003d\u003d\u003d\u003d Ranking of interviewees"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "Bring up the window to rank the interviewees. The way to record the result is the same as 2.12.1."
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Format: `record rank`"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "*Q:* Where can I download the application? +"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "*A:* Check out the assets in our project release page https://github.com/AY1920S1-CS2103-F09-1/main/releases to download our latest releases!"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ".Table Command Summary"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "|Command Description |Command Syntax"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "|Help"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "|`help` +"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "|Import existing availabilities"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "|`import interviewer PATH_TO_FILE` +"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "  `import interviewee PATH_TO_FILE`"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "|Clear imported data"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "|`clear` +"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "|Add interviewee"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "|`add r/interviewee n/NAME p/PHONE f/FACULTY y/YEAR_OF_STUDY ep/PERSONAL_EMAIL ew/NUS_WORK_EMAIL"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "d/DEPARTMENT... s/SLOT... [t/TAG]...` +"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "|Add interviewer"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "|`add r/interviewer n/NAME p/PHONE ew/NUS_WORK_EMAIL d/DEPARTMENT  s/SLOT... [t/TAG]...` +"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "|Edit interviewee"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "|`edit NAME r/interviewee [p/PHONE] [f/FACULTY] [y/YEAR_OF_STUDY] [ep/PERSONAL_EMAIL] [ew/NUS_WORK_EMAIL]"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "[d/DEPARTMENT]... [s/SLOT]... [t/TAG]...` +"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "|Edit interviewer"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "|`edit NAME r/interviewer [p/PHONE] [t/TAG]... [d/DEPARTMENT] [ew/NUS_WORK_EMAIL] [s/SLOT...]` +"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "|Delete interviewee"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "|`delete NAME r/interviewee` +"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "|Delete interviewer"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "|`delete NAME r/interviewer` +"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "|Filter"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "|`filter tag TAG_NAME` +"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "|Schedule"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "|`schedule` +"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "|Export"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "|`export` +"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "|Email interviewee"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "|`email ct/timeslot n/INTERVIEWEE NAME` +"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "dcshzj"
        },
        "content": " `email ct/alltimeslot` +"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "dcshzj"
        },
        "content": " `email ct/status` +"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "|Record"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "|`record attendance` +"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": " `record result` +"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": " `record rank` +"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "|\u003d\u003d\u003d"
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 152,
      "mrchensheng21": 8,
      "mirozo": 54,
      "dcshzj": 27,
      "-": 68,
      "KendrickAng": 275
    }
  },
  {
    "path": "docs/diagrams/AddActivityDiagram_1_2.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ":input add command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "while () is ([incorrect format])"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    :Show add command \\nformat response;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "endwhile ([valid syntax])"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ":Parse prefixes and retrieve arguments;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ":Create interviewee/interviewer based on \"role\" prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ":Add created person to model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ":Update storage to write to file;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "if () then ([successful])"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    :Display command result text to UI;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "else ([failure])"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    :Display error message to UI;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "endif"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "stop"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "KendrickAng": 22
    }
  },
  {
    "path": "docs/diagrams/AddSequenceDiagram_1_2.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "title Adding an Interviewee"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\u0027Logic"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "participant \":AddCommandParser\" as AddCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "participant \":AddCommand\" as AddCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "end box"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\u0027Model"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "participant \":ModelManager\" as ModelManager MODEL_COLOR"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "participant \":IntervieweeBuilder\" as IntervieweeBuilder MODEL_COLOR"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "end box"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\u0027Storage"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "box Storage STORAGE_COLOR_T1"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "participant \":StorageManager\" as StorageManager STORAGE_COLOR"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "end box"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\u0027calls and arrows. Each paragraph represents one arrow."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "[-\u003e LogicManager: execute(add)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "LogicManager -\u003e AddressBookParser: parseCommand(add)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "activate AddressBookParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "create AddCommandParser"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "AddressBookParser -\u003e AddCommandParser"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "activate AddCommandParser"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "AddCommandParser --\u003e AddressBookParser"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "deactivate AddCommandParser"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "AddressBookParser -\u003e AddCommandParser: parse(add)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "activate AddCommandParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "create IntervieweeBuilder"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "AddCommandParser -\u003e IntervieweeBuilder"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "activate IntervieweeBuilder"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "IntervieweeBuilder --\u003e AddCommandParser: interviewee"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "deactivate IntervieweeBuilder"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "create AddCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "AddCommandParser -\u003e AddCommand: AddCommand(interviewee)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "activate AddCommand"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "AddCommand --\u003e AddCommandParser: command"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "deactivate AddCommand"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "AddCommandParser --\u003e AddressBookParser: command"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "deactivate AddCommandParser"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "AddressBookParser --\u003e LogicManager: command"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "deactivate AddressBookParser"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "destroy AddCommandParser"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "LogicManager -\u003e AddCommand: execute(model)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "activate AddCommand"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "AddCommand -\u003e ModelManager"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "activate ModelManager"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "ModelManager --\u003e AddCommand"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "deactivate ModelManager"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "AddCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "CommandResult --\u003e AddCommand"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "AddCommand --\u003e LogicManager: commandResult"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "deactivate AddCommand"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "LogicManager -\u003e ModelManager: getAddressBook()"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "activate ModelManager"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "ModelManager --\u003e LogicManager: addressBook"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "deactivate ModelManager"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "destroy AddCommand"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "LogicManager -\u003e StorageManager: saveAddressBook(addressBook)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "activate StorageManager"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "StorageManager --\u003e LogicManager"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "deactivate StorageManager"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "[\u003c-- LogicManager"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "destroy CommandResult"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "KendrickAng": 99
    }
  },
  {
    "path": "docs/diagrams/EmailSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "participant \":EmailCommandParser\" as EmailCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "participant \"e:EmailCommand\" as EmailCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "box ParserUtil MODEL_COLOR_T2"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "participant \":ParserUtil\" as ParserUtil MODEL_COLOR"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "end box"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "box Interviewee MODEL_COLOR_T3"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "participant \":Interviewee\" as Interviewee MODEL_COLOR"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "end box"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "[-\u003e LogicManager : execute(\"email timeslot Alice\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "LogicManager -\u003e AddressBookParser : parseCommand(\"email timeslot Alice\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "activate AddressBookParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "create EmailCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "AddressBookParser -\u003e EmailCommandParser"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "activate EmailCommandParser"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "EmailCommandParser --\u003e AddressBookParser"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "deactivate EmailCommandParser"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "AddressBookParser -\u003e EmailCommandParser : parse(\"timeslot Alice\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "activate EmailCommandParser"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "EmailCommandParser -\u003e EmailCommandParser : parseTimeslotCommand(\"timeslot Alice\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "activate EmailCommandParser"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "EmailCommandParser -\u003e ParserUtil : \u003c\u003cstatic\u003e\u003e \\n parseName(\"Alice\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "activate ParserUtil"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "ParserUtil --\u003e EmailCommandParser : name"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "deactivate ParserUtil"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "create EmailCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "EmailCommandParser -\u003e EmailCommand : intervieweeName"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "activate EmailCommand"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "EmailCommand --\u003e EmailCommandParser : e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "deactivate EmailCommand"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "EmailCommandParser --\u003e EmailCommandParser : e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "deactivate EmailCommandParser"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "EmailCommandParser --\u003e AddressBookParser : e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "deactivate EmailCommandParser"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "EmailCommandParser -[hidden]-\u003e AddressBookParser"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "destroy EmailCommandParser"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "AddressBookParser --\u003e LogicManager : e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "deactivate AddressBookParser"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "LogicManager -\u003e EmailCommand : execute()"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "activate EmailCommand"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "EmailCommand -\u003e Model : getFilteredPersonList()"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "Model --\u003e EmailCommand : lastShownList"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "loop person in lastShownList"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    EmailCommand -\u003e Interviewee : getName()"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    activate Interviewee"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    Interviewee --\u003e EmailCommand : name"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    deactivate Interviewee"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    EmailCommand -\u003e Interviewee : name.equals(intervieweeName)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    activate Interviewee"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    Interviewee --\u003e EmailCommand : equality"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    deactivate Interviewee"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    break equality"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        EmailCommand --\u003e EmailCommand : intervieweeToEmail"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    end"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "end"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "EmailCommand -\u003e Model : emailInterviewee(intervieweeToEmail)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "Model --\u003e EmailCommand"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "EmailCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "CommandResult --\u003e EmailCommand"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "EmailCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "deactivate EmailCommand"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 113
    }
  },
  {
    "path": "docs/diagrams/ExportActivityDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mirozo"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mirozo"
        },
        "content": "scale 3/4"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mirozo"
        },
        "content": "start"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mirozo"
        },
        "content": ":User executes export command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mirozo"
        },
        "content": "\u0027Since the beta syntax does not support placing the condition outside the"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mirozo"
        },
        "content": "\u0027diamond we place it as the true branch instead."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mirozo"
        },
        "content": "if () then ([input file exists])"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    :Clear file;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mirozo"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    :Create new file;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mirozo"
        },
        "content": "endif"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mirozo"
        },
        "content": ":Get schedules from model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mirozo"
        },
        "content": "if () then ([data !\u003d null])"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    :Write to file;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mirozo"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mirozo"
        },
        "content": "endif"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mirozo"
        },
        "content": "stop"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mirozo"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "mirozo": 22
    }
  },
  {
    "path": "docs/diagrams/ExportSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mirozo"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mirozo"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mirozo"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mirozo"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mirozo"
        },
        "content": "participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mirozo"
        },
        "content": "participant \":ExportCommandParser\" as ExportCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mirozo"
        },
        "content": "participant \"e:ExportCommand\" as ExportCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mirozo"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mirozo"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mirozo"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mirozo"
        },
        "content": "participant \":CsvWriter\" as CsvWriter MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mirozo"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mirozo"
        },
        "content": "end box"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mirozo"
        },
        "content": "[-\u003e LogicManager : execute(\"export \u003c\u003ccsv filepath\u003e\u003e\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mirozo"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mirozo"
        },
        "content": "LogicManager -\u003e AddressBookParser : parseCommand(\"export \u003c\u003ccsv filepath\u003e\u003e\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mirozo"
        },
        "content": "activate AddressBookParser"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mirozo"
        },
        "content": "create ExportCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mirozo"
        },
        "content": "AddressBookParser -\u003e ExportCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mirozo"
        },
        "content": "activate ExportCommandParser"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mirozo"
        },
        "content": "ExportCommandParser --\u003e AddressBookParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mirozo"
        },
        "content": "deactivate ExportCommandParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mirozo"
        },
        "content": "AddressBookParser -\u003e ExportCommandParser : parse(\"\u003c\u003ccsv filepath\u003e\u003e\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mirozo"
        },
        "content": "activate ExportCommandParser"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mirozo"
        },
        "content": "create ExportCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mirozo"
        },
        "content": "ExportCommandParser -\u003e ExportCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mirozo"
        },
        "content": "activate ExportCommand"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mirozo"
        },
        "content": "ExportCommand --\u003e ExportCommandParser : e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mirozo"
        },
        "content": "deactivate ExportCommand"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mirozo"
        },
        "content": "ExportCommandParser --\u003e AddressBookParser : e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mirozo"
        },
        "content": "deactivate ExportCommandParser"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mirozo"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mirozo"
        },
        "content": "ExportCommandParser -[hidden]-\u003e AddressBookParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mirozo"
        },
        "content": "destroy ExportCommandParser"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mirozo"
        },
        "content": "AddressBookParser --\u003e LogicManager : e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mirozo"
        },
        "content": "deactivate AddressBookParser"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mirozo"
        },
        "content": "LogicManager -\u003e ExportCommand : execute()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mirozo"
        },
        "content": "activate ExportCommand"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mirozo"
        },
        "content": "create CsvWriter"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mirozo"
        },
        "content": "ExportCommand -\u003e CsvWriter"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mirozo"
        },
        "content": "activate CsvWriter"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mirozo"
        },
        "content": "CsvWriter -\u003e Model : getSchedules()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mirozo"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mirozo"
        },
        "content": "Model --\u003e CsvWriter : schedules"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mirozo"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mirozo"
        },
        "content": "CsvWriter --\u003e ExportCommand"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mirozo"
        },
        "content": "deactivate CsvWriter"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mirozo"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mirozo"
        },
        "content": "ExportCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mirozo"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mirozo"
        },
        "content": "CommandResult --\u003e ExportCommand"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mirozo"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mirozo"
        },
        "content": "ExportCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mirozo"
        },
        "content": "deactivate ExportCommand"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mirozo"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mirozo"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mirozo"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "mirozo": 77
    }
  },
  {
    "path": "docs/diagrams/ImportActivityDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mirozo"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mirozo"
        },
        "content": "scale 3/4"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mirozo"
        },
        "content": "start"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mirozo"
        },
        "content": ":User executes import command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mirozo"
        },
        "content": "if () then ([input file exists])"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    if () then ([is in correct format])"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        :Read data from specified file;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        :Update data in Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    else ([else])"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    endif"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mirozo"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mirozo"
        },
        "content": "endif"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mirozo"
        },
        "content": "stop"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mirozo"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "mirozo": 15
    }
  },
  {
    "path": "docs/diagrams/ImportSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mirozo"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mirozo"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mirozo"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mirozo"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mirozo"
        },
        "content": "participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mirozo"
        },
        "content": "participant \":ImportCommandParser\" as ImportCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mirozo"
        },
        "content": "participant \"i:ImportCommand\" as ImportCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mirozo"
        },
        "content": "participant \"result:CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mirozo"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mirozo"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mirozo"
        },
        "content": "participant \":CsvReader\" as CsvReader MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mirozo"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mirozo"
        },
        "content": "end box"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mirozo"
        },
        "content": "[-\u003e LogicManager : execute(\"import interviewer \u003c\u003ccsv filepath\u003e\u003e\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mirozo"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mirozo"
        },
        "content": "LogicManager -\u003e AddressBookParser : parseCommand(\"import interviewer \u003c\u003ccsv filepath\u003e\u003e\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mirozo"
        },
        "content": "activate AddressBookParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mirozo"
        },
        "content": "create ImportCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mirozo"
        },
        "content": "AddressBookParser -\u003e ImportCommandParser"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mirozo"
        },
        "content": "activate ImportCommandParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mirozo"
        },
        "content": "ImportCommandParser --\u003e AddressBookParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mirozo"
        },
        "content": "deactivate ImportCommandParser"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mirozo"
        },
        "content": "AddressBookParser -\u003e ImportCommandParser : parse(\"interviewer \u003c\u003ccsv filepath\u003e\u003e\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mirozo"
        },
        "content": "activate ImportCommandParser"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mirozo"
        },
        "content": "create ImportCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mirozo"
        },
        "content": "ImportCommandParser -\u003e ImportCommand"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mirozo"
        },
        "content": "activate ImportCommand"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mirozo"
        },
        "content": "ImportCommand --\u003e ImportCommandParser : i"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mirozo"
        },
        "content": "deactivate ImportCommand"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mirozo"
        },
        "content": "ImportCommandParser --\u003e AddressBookParser : i"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mirozo"
        },
        "content": "deactivate ImportCommandParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mirozo"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mirozo"
        },
        "content": "ImportCommandParser -[hidden]-\u003e AddressBookParser"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mirozo"
        },
        "content": "destroy ImportCommandParser"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mirozo"
        },
        "content": "AddressBookParser --\u003e LogicManager : i"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mirozo"
        },
        "content": "deactivate AddressBookParser"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mirozo"
        },
        "content": "LogicManager -\u003e ImportCommand : execute()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mirozo"
        },
        "content": "activate ImportCommand"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mirozo"
        },
        "content": "create CsvReader"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mirozo"
        },
        "content": "ImportCommand -\u003e CsvReader : read()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mirozo"
        },
        "content": "activate CsvReader"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mirozo"
        },
        "content": "CsvReader --\u003e ImportCommand : schedules"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mirozo"
        },
        "content": "deactivate CsvReader"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mirozo"
        },
        "content": "ImportCommand -\u003e Model : setScheduleList(schedules)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mirozo"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mirozo"
        },
        "content": "Model --\u003e ImportCommand"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mirozo"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mirozo"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mirozo"
        },
        "content": "ImportCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mirozo"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mirozo"
        },
        "content": "CommandResult --\u003e ImportCommand : result"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mirozo"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mirozo"
        },
        "content": "ImportCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mirozo"
        },
        "content": "deactivate ImportCommand"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mirozo"
        },
        "content": "ImportCommand -[hidden]-\u003e LogicManager : result"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mirozo"
        },
        "content": "destroy ImportCommand"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mirozo"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mirozo"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mirozo"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "mirozo": 81
    }
  },
  {
    "path": "docs/diagrams/ImportUIRefreshSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "box Model MODEL_COLOR_T2"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "End box"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "box UI UI_COLOR_T1"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "participant \":ScheduleViewPanel\" as ScheduleViewPanel UI_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "Model -\u003e ScheduleViewPanel : dataImport()"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "activate ScheduleViewPanel"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "ScheduleViewPanel -\u003e ScheduleViewPanel : clearData()"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "activate ScheduleViewPanel"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "deactivate ScheduleViewPanel"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "loop number of schedule tables"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "create \":ScheduleView\" as ScheduleView UI_COLOR"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "ScheduleViewPanel -\u003e ScheduleView"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "activate ScheduleView"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "ScheduleView -\u003e ScheduleView : initialise()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "ScheduleView --\u003e ScheduleViewPanel : schedule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "deactivate ScheduleView"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "end loop"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "participant \":MainWindow\" as MainWindow UI_COLOR"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "ScheduleViewPanel --\u003e MainWindow : scheduleViewPanel"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "deactivate ScheduleViewPanel"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "End box"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "mrchensheng21": 34
    }
  },
  {
    "path": "docs/diagrams/LogicClassDiagram1_2.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "skinparam arrowColor LOGIC_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "skinparam classBackgroundColor LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\u0027hacky workaround to allow arrow going into Logic pkg"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\u0027classes and interfaces used in Logic"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "package Logic {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    Interface Logic \u003c\u003cinterface\u003e\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    Class LogicManager"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    package Parser {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Interface Parser \u003c\u003cinterface\u003e\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Class AddressBookParser"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Class XYZCommandParser"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Class CliSyntax"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Class ParserUtil"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Class ArgumentMultimap"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Class ArgumentTokenizer"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Class Prefix"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        package \"exceptions (Parser)\" {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            Class ParseException"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    package Commands {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Class XYZCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Class CommandResult"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Class \"{abstract}\\nCommand\" as Command"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        package \"exceptions (Commands)\" {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            Class CommandException"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "package Model {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\u0027mapping and arrows"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "HiddenOutside .down.\u003e Logic"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\u0027mapping and arrows for Parser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "LogicManager .up.|\u003e Logic"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "LogicManager -down-\u003e AddressBookParser"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "AddressBookParser .down.\u003e XYZCommandParser: creates \u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "XYZCommandParser .right.\u003e ParseException"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "XYZCommandParser -up-|\u003e Parser"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "XYZCommandParser .down.\u003e ArgumentMultimap"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "XYZCommandParser .down.\u003e ArgumentTokenizer"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "XYZCommandParser .down.\u003e CliSyntax"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "XYZCommandParser .down.\u003e ParserUtil"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "ArgumentTokenizer .left.\u003e ArgumentMultimap"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "ArgumentTokenizer .down.\u003e Prefix"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "CliSyntax .down.\u003e Prefix"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "ParserUtil .down.\u003e Prefix"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "note left of XYZCommandParser: XYZ can be Add, Edit, Email, Find or Import"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\u0027mapping and arrows for Commands"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "Logic .down.\u003e CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "LogicManager .down.\u003eCommandResult: executes \u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "Command .up.\u003e CommandResult"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "XYZCommand -up-|\u003e Command"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "XYZCommand .right.\u003e CommandException: throws \u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "CommandResult ..\u003e Model"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "note right of XYZCommand: XYZ can be Import, Email, Add, Edit, Delete, Find, List, Exit or Help"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\u0027mapping and arrows from Parser to Commands"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "XYZCommandParser ..\u003e XYZCommand: creates \u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "KendrickAng": 70
    }
  },
  {
    "path": "docs/diagrams/ModelClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Package Model \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Model \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Interface ObservableList \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Class Schedule"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class Model"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class ModelManager"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class UserPrefs"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Package Person {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Class Interviewee"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "Class Address"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Class Emails"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "Class Name"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Class Phone"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Class Faculty"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Class YearOfStudy"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Class Department"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Class Slot"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Package Tag {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "Class Tag"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Model"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager .up.|\u003e Model"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "Model .right.\u003e ObservableList"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "ModelManager o--\u003e \"*\" Interviewee"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager o-left-\u003e \"1\" UserPrefs"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "ModelManager o-right-\u003e \"1..*\" Schedule"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "UserPrefs .up.|\u003e ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Interviewee *---\u003e Name"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Interviewee *---\u003e Phone"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Interviewee *---\u003e Emails"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Interviewee *---\u003e Address"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Interviewee *---\u003e \"*\" Tag"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Interviewee *---\u003e Faculty"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Interviewee *---\u003e YearOfStudy"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Interviewee *---\u003e \"*\" Department"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Interviewee *---\u003e \"*\" Slot"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Name -[hidden]right-\u003e Phone"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "Phone -[hidden]right-\u003e Address"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Address -[hidden]right-\u003e Emails"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 19,
      "-": 39
    }
  },
  {
    "path": "docs/diagrams/ScheduleViewSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "box UI UI_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "participant \":MainWindow\" as MainWindow UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "[-\u003e MainWindow : fillInnerParts()"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "activate MainWindow"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "create \":ScheduleViewPanel\" as ScheduleViewPanel UI_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "MainWindow -\u003e ScheduleViewPanel"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "activate ScheduleViewPanel"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "create \":ScheduleView\" as ScheduleView UI_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "ScheduleViewPanel -\u003e ScheduleView"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "loop number of schedules"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "activate ScheduleView"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "ScheduleView -\u003e ScheduleView : initialise()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "activate ScheduleView"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "deactivate ScheduleView"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "ScheduleView --\u003e ScheduleViewPanel : schedule"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "deactivate ScheduleView"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "end loop"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "ScheduleViewPanel --\u003e MainWindow : scheduleViewPanel"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "deactivate ScheduleViewPanel"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "[\u003c--MainWindow"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "end box"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "mrchensheng21": 33
    }
  },
  {
    "path": "docs/diagrams/UiClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor UI_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "package UI \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Ui \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "Interface RefreshListener \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"{abstract}\\nUiPart\" as UiPart"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class UiManager"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class MainWindow"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class HelpWindow"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class ResultDisplay"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "Class ScheduleViewPanel"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "Class ScheduleView"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Class StatusBarFooter"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommandBox"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenLogic #FFFFFF"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Ui"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "HiddenOutside ..\u003e RefreshListener"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "UiManager .right.|\u003e Ui"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "UiManager -down---\u003e MainWindow"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow --\u003e HelpWindow"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e CommandBox"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e ResultDisplay"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "MainWindow *-down-\u003e ScheduleViewPanel"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -left-|\u003e UiPart"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "ResultDisplay --|\u003e UiPart"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox --|\u003e UiPart"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "ScheduleView --|\u003e UiPart"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "ScheduleViewPanel --\u003e ScheduleView"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "ScheduleViewPanel --|\u003e UiPart"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "StatusBarFooter --|\u003e UiPart"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "HelpWindow -down-|\u003e UiPart"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "ScheduleView -.|\u003e RefreshListener"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -right-\u003e Logic"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -left-\u003e Logic"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "ScheduleViewPanel-[hidden]left- HelpWindow"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "HelpWindow -[hidden]left- CommandBox"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox -[hidden]left- ResultDisplay"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "ResultDisplay -[hidden]left- StatusBarFooter"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -[hidden]-|\u003e UiPart"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "mrchensheng21": 12,
      "-": 44
    }
  },
  {
    "path": "docs/team/Ang-Wei-Heng-Kendrick.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "\u003d Ang Wei Heng Kendrick - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "\u003d\u003d PROJECT: Scheduler"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Scheduler is a desktop application which is used to automate the process of scheduling interviews."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Its main feature is matching interviewees with interview time slots to generate an interview timetable."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "* *Major enhancement*:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "** What it does:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "** Justification:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "** Highlights:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "** Credits:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "* *Minor enhancement*:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "*** Managed releases"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "include::"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "include::"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 55
    }
  },
  {
    "path": "docs/team/Goh-Rui-Zhi.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "\u003d Goh Rui Zhi - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d PROJECT: AddressBook - Level 3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddelete]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 1,
      "-": 71
    }
  },
  {
    "path": "docs/team/Hsu-Zhong-Jun.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "\u003d Hsu Zhong Jun - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "\u003d\u003d PROJECT: Scheduler"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Scheduler is a desktop application which is used to automate the process of scheduling interviews."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Its main feature is matching interviewees with interview time slots to generate an interview timetable."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "* *Major enhancement*:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "** What it does:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "** Justification:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "** Highlights:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "** Credits:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "* *Minor enhancement*:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "*** Managed releases"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "include::"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "include::"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 55
    }
  },
  {
    "path": "docs/team/Kheng-Yau-Dong.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "\u003d Kheng Yau Dong - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "\u003d\u003d PROJECT: Scheduler"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Scheduler is a desktop application which is used to automate the process of scheduling interviews."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Its main feature is matching interviewees with interview time slots to generate an interview timetable."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "* *Major enhancement*:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "** What it does:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "** Justification:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "** Highlights:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "** Credits:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "* *Minor enhancement*:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "*** Managed releases"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "include::"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "include::"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 55
    }
  },
  {
    "path": "docs/team/Kwan-Chen-Sheng.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "\u003d Kwan Chen Sheng - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "\u003d\u003d PROJECT: Scheduler"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Scheduler is a desktop application which is used to automate the process of scheduling interviews."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Its main feature is matching interviewees with interview time slots to generate an interview timetable."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "* *Major enhancement*:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "** What it does:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "** Justification:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "** Highlights:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "** Credits:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "* *Minor enhancement*:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "*** Managed releases"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "include::"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "include::"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 55
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/AppParameters.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.commons.util.FileUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the parsed command-line parameters given to the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParameters {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path configPath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getConfigPath() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setConfigPath(Path configPath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.configPath \u003d configPath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the application command-line parameters."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AppParameters parse(Application.Parameters parameters) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d new AppParameters();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String configPathParameter \u003d namedParameters.get(\"config\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            configPathParameter \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return appParameters;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof AppParameters)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters otherAppParameters \u003d (AppParameters) other;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath.hashCode();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 3,
      "-": 61
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/Main.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * This is a workaround for the following error when MainApp is made the"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * entry point of the application:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " *     Error: JavaFX runtime components are missing, and are required to run this application"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The reason is that MainApp extends Application. In that case, the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * LauncherHelper will check for the javafx.graphics module to be present"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * find the javafx.graphics module, and so the launch is aborted."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * By having a separate main class (Main) that doesn\u0027t extend Application"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * to be the entry point of the application, we avoid this issue."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Application.launch(MainApp.class, args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 1,
      "-": 24
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/MainApp.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.commons.core.Config;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.commons.core.Version;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.commons.util.StringUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.logic.Logic;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.logic.LogicManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.IntervieweeList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.InterviewerList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.ModelManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.ReadOnlyList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.Schedule;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Interviewee;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Interviewer;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.storage.IntervieweeListStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.storage.InterviewerListStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.storage.JsonIntervieweeListStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.storage.JsonInterviewerListStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.storage.Storage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.storage.StorageManager;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.ui.Ui;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.ui.UiManager;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 2, 1, true);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing Scheduler ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        IntervieweeListStorage intervieweeListStorage \u003d new JsonIntervieweeListStorage("
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                userPrefs.getIntervieweeListFilePath());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        InterviewerListStorage interviewerListStorage \u003d new JsonInterviewerListStorage("
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                userPrefs.getInterviewerListFilePath());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        storage \u003d new StorageManager(intervieweeListStorage, interviewerListStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        model.addRefreshListener(ui);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        model.addTabListener(ui);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s interviewee list, interviewer list"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * The data from the sample interviewee and interviewer list will be used instead if {@code storage}\u0027s"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * interviewee and interviewer lists are not found, or an empty interviewee and interviewer list will be"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * used instead if errors occur when reading {@code storage}\u0027s interviewee and interviewer lists."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Optional\u003cReadOnlyList\u003cInterviewee\u003e\u003e intervieweeListOptional;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Optional\u003cReadOnlyList\u003cInterviewer\u003e\u003e interviewerListOptional;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        ReadOnlyList\u003cInterviewee\u003e initialIntervieweeList;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        ReadOnlyList\u003cInterviewer\u003e initialInterviewerList;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            intervieweeListOptional \u003d storage.readIntervieweeList();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            if (!intervieweeListOptional.isPresent()) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                logger.info(\"Interviewee data file not found, will be starting with a sample list of \""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                        + \"Interviewees\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            initialIntervieweeList \u003d intervieweeListOptional.orElseGet(SampleDataUtil::getSampleIntervieweeList);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            logger.warning(\"Interviewee data file not in the correct format. Will be starting with an \""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                    + \"empty list of Interviewees\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            initialIntervieweeList \u003d new IntervieweeList();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            logger.warning(\"Problem while reading from the Interviewee data file. Will be starting with \""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                    + \"an empty list of Interviewees\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            initialIntervieweeList \u003d new IntervieweeList();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            interviewerListOptional \u003d storage.readInterviewerList();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            if (!interviewerListOptional.isPresent()) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                logger.info(\"Interviewer data file not found, will be starting with a sample list of \""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                        + \"Interviewers\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            initialInterviewerList \u003d interviewerListOptional.orElseGet(SampleDataUtil::getSampleInterviewerList);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            logger.warning(\"Interviewer data file not in the correct format. Will be starting with an \""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                    + \"empty list of Interviewers\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            initialInterviewerList \u003d new InterviewerList();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            logger.warning(\"Problem while reading from the Interviewer data file. Will be starting with \""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                    + \"an empty list of Interviewers\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            initialInterviewerList \u003d new InterviewerList();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        // For now ModelManager is always initialised with sample schedulesList first"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        List\u003cSchedule\u003e schedules \u003d SampleDataUtil.getSampleSchedulesList();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        return new ModelManager(initialIntervieweeList, initialInterviewerList, userPrefs, schedules);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty list of \""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                    + \"Interviewees and Interviewers\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        logger.info(\"Starting Scheduler \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Scheduler ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mrchensheng21": 4,
      "ChrisKheng": 4,
      "mirozo": 2,
      "dcshzj": 77,
      "-": 138,
      "KendrickAng": 5
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/commons/core/Config.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Current log level : \" + logLevel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 1,
      "-": 62
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/commons/core/GuiSettings.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 600;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 740;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 1,
      "-": 72
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/commons/core/LogsCenter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private static final String LOG_FILE \u003d \"scheduler.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 1,
      "dcshzj": 1,
      "-": 110
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/commons/core/Messages.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_NAME \u003d \"The person name provided does not exist\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final String MESSAGE_CRITICAL_ERROR \u003d \"Internal Error!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final String MESSAGE_INVALID_YEAR_OF_STUDY \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            \"The year of study must be a positive integer within the range [0, 2^31 - 1].\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            + \"Examples:\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            + \"Correct: \u00272019\u0027\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            + \"Incorrect: \u0027-1\u0027\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 2,
      "-": 10,
      "KendrickAng": 6
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/commons/core/Version.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                versionMatcher.group(4) \u003d\u003d null ? false : true);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 1,
      "-": 112
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/commons/core/index/Index.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 1,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/commons/exceptions/DataConversionException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error during conversion of data from one format to another"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class DataConversionException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public DataConversionException(Exception cause) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/commons/exceptions/IllegalValueException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that some given data does not fulfill some constraints."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class IllegalValueException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param cause of the main exception"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/commons/exceptions/ScheduleException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "package seedu.scheduler.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": " * Represents an exception that happens when using a Schedule object."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "public class ScheduleException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public ScheduleException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 10
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/commons/util/AppUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.MainApp;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A container for App specific utility functions"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(imagePath);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException if {@code condition} is false."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition, String errorMessage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(errorMessage);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 2,
      "-": 37
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/commons/util/CollectionUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** @see #requireAllNonNull(Collection) */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 1,
      "-": 34
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/commons/util/ConfigUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.commons.core.Config;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A class for accessing the Config File."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(configFilePath, Config.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void saveConfig(Config config, Path configFilePath) throws IOException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(config, configFilePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 3,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/commons/util/FileUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 1,
      "-": 82
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/commons/util/JsonUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 3,
      "-": 140
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/commons/util/Pair.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": " * Encapsulates a pair, with a head and a tail."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": " * @param \u003cH\u003e head of the pair."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": " * @param \u003cT\u003e tail of the pair."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "public class Pair\u003cH, T\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private H head;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private T tail;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public Pair(H head, T tail) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        this.head \u003d head;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        this.tail \u003d tail;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public H getHead() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return head;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public T getTail() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return tail;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            || other instanceof Pair \u0026\u0026 head.equals(((Pair) other).head) \u0026\u0026 tail.equals(((Pair) other).tail);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return String.format(\"(%s, %s)\", head, tail);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 34,
      "dcshzj": 1
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/commons/util/StringUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 2,
      "-": 66
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/logic/Logic.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.ReadOnlyList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.Schedule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Interviewee;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Interviewer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    /* TODO: REMOVE THE FOLLOWING LINES AFTER THEIR USAGE IS REMOVED */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    /* TODO: REMOVE ABOVE LINES */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dIntervieweeList and InterviewerList \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Returns the uniterable, unmodifiable, unfiltered list of interviewees."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    ReadOnlyList\u003cInterviewee\u003e getIntervieweeList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Returns the uniterable, unmodifiable, unfiltered list of Interviewers."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    ReadOnlyList\u003cInterviewer\u003e getInterviewerList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Returns an iterable, unmodifiable view of the unfiltered list of all Interviewees."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * @see Model#getUnfilteredIntervieweeList()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    ObservableList\u003cInterviewee\u003e getUnfilteredIntervieweeList();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Returns an iterable, unmodifiable view of the unfiltered list of all Interviewers."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * @see Model#getUnfilteredInterviewerList()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    ObservableList\u003cInterviewer\u003e getUnfilteredInterviewerList();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Returns an iterable, unmodifiable view of the filtered list of Interviewees."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * @see Model#getMutableIntervieweeList()"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    ObservableList\u003cInterviewee\u003e getFilteredIntervieweeList();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Returns an iterable, unmodifiable view of the filtered list of Interviewers."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * @see Model#getMutableInterviewerList()"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    ObservableList\u003cInterviewer\u003e getFilteredInterviewerList();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * Returns the user prefs\u0027 file path to the list of Interviewees."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    Path getIntervieweeListFilePath();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * Returns the user prefs\u0027 file path to the list of Interviewers."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    Path getInterviewerListFilePath();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Schedule \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Returns the list of Schedules."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * @see Model#getSchedulesList()"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    List\u003cSchedule\u003e getSchedulesList();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /** Returns a list of @code{ObservableList} objects, each representing a Schedule table*/"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    List\u003cObservableList\u003cObservableList\u003cString\u003e\u003e\u003e getObservableLists();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /** Returns a list of lists of column titles, each list of column titles belong to a Schedule table*/"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    List\u003cList\u003cString\u003e\u003e getTitlesLists();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 13,
      "dcshzj": 43,
      "-": 35,
      "KendrickAng": 19
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/logic/LogicManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.logic.commands.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.logic.parser.AddressBookParser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.ReadOnlyList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.Schedule;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Interviewee;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Interviewer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.storage.Storage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser addressBookParser;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookParser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    /* TODO: REMOVE THE FOLLOWING LINES AFTER THEIR USAGE IS REMOVED */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        return this.model.getIntervieweeListFilePath();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    /* TODO: REMOVE ABOVE LINES */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            storage.saveIntervieweeList(model.getMutableIntervieweeList());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            storage.saveInterviewerList(model.getMutableInterviewerList());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dIntervieweeList and InterviewerList \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public ReadOnlyList\u003cInterviewee\u003e getIntervieweeList() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return model.getMutableIntervieweeList();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public ReadOnlyList\u003cInterviewer\u003e getInterviewerList() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return model.getMutableInterviewerList();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public ObservableList\u003cInterviewee\u003e getUnfilteredIntervieweeList() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return model.getUnfilteredIntervieweeList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public ObservableList\u003cInterviewer\u003e getUnfilteredInterviewerList() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return model.getUnfilteredInterviewerList();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public ObservableList\u003cInterviewee\u003e getFilteredIntervieweeList() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return model.getFilteredIntervieweeList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public ObservableList\u003cInterviewer\u003e getFilteredInterviewerList() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return model.getFilteredInterviewerList();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public Path getIntervieweeListFilePath() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        return model.getIntervieweeListFilePath();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public Path getInterviewerListFilePath() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        return model.getInterviewerListFilePath();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Schedule \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public List\u003cSchedule\u003e getSchedulesList() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return model.getSchedulesList();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public List\u003cObservableList\u003cObservableList\u003cString\u003e\u003e\u003e getObservableLists() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return model.getObservableLists();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public List\u003cList\u003cString\u003e\u003e getTitlesLists() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return model.getTitlesLists();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 16,
      "dcshzj": 40,
      "-": 59,
      "KendrickAng": 19
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/logic/commands/AddCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.parser.CliSyntax.PREFIX_DEPARTMENT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.parser.CliSyntax.PREFIX_FACULTY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.parser.CliSyntax.PREFIX_NUS_WORK_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.parser.CliSyntax.PREFIX_PERSONAL_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.parser.CliSyntax.PREFIX_ROLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.parser.CliSyntax.PREFIX_SLOT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.parser.CliSyntax.PREFIX_YEAR_OF_STUDY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.DefaultValues;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dcshzj"
        },
        "content": " * Adds a person to the scheduler book."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dcshzj"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "public abstract class AddCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            + \": Adds an entity to the scheduler book. An entity can be an interviewee or interviewer.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            + \"Parameters to add interviewees:\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            + PREFIX_ROLE + \"interviewee \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            + PREFIX_FACULTY + \"FACULTY \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            + PREFIX_YEAR_OF_STUDY + \"YEAR OF STUDY \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            + PREFIX_PERSONAL_EMAIL + \"PERSONAL_EMAIL \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            + PREFIX_NUS_WORK_EMAIL + \"NUS_WORK_EMAIL \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            + PREFIX_DEPARTMENT + \"DEPARTMENT... \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            + PREFIX_SLOT + \"SLOT... \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]... \\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            + \"Parameters to add interviewers:\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            + PREFIX_ROLE + \"interviewer \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            + PREFIX_NUS_WORK_EMAIL + \"NUS_WORK_EMAIL \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            + PREFIX_DEPARTMENT + \"DEPARTMENT \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            + PREFIX_SLOT + \"SLOT... \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]... \\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            + \"Example (add interviewee):\\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            + PREFIX_ROLE + DefaultValues.DEFAULT_INTERVIEWEE_ROLE + \" \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            + PREFIX_NAME + DefaultValues.DEFAULT_NAME + \" \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            + PREFIX_PHONE + DefaultValues.DEFAULT_PHONE + \" \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            + PREFIX_FACULTY + DefaultValues.DEFAULT_FACULTY + \" \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            + PREFIX_YEAR_OF_STUDY + DefaultValues.DEFAULT_YEAR_OF_STUDY + \" \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            + PREFIX_PERSONAL_EMAIL + DefaultValues.DEFAULT_PERSONAL_EMAIL + \" \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            + PREFIX_NUS_WORK_EMAIL + DefaultValues.DEFAULT_NUS_WORK_EMAIL + \" \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            + PREFIX_DEPARTMENT + DefaultValues.DEFAULT_DEPARTMENT + \" \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            + PREFIX_SLOT + DefaultValues.DEFAULT_SLOT + \" \""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            + PREFIX_TAG + \"friends\\n\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            + \"Example (add interviewer):\\n\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            + PREFIX_ROLE + DefaultValues.DEFAULT_INTERVIEWER_ROLE + \" \""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            + PREFIX_NAME + DefaultValues.DEFAULT_NAME + \" \""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            + PREFIX_PHONE + DefaultValues.DEFAULT_PHONE + \" \""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            + PREFIX_NUS_WORK_EMAIL + DefaultValues.DEFAULT_NUS_WORK_EMAIL + \" \""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            + PREFIX_DEPARTMENT + DefaultValues.DEFAULT_DEPARTMENT + \" \""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            + PREFIX_SLOT + DefaultValues.DEFAULT_SLOT + \" \""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            + PREFIX_TAG + \"friends\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New entity added: %1$s\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This entity already exists in the scheduler book\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 39,
      "KendrickAng": 34
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/logic/commands/AddIntervieweeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Interviewee;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " * Adds an Interviewee to the {@code IntervieweeList}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "public class AddIntervieweeCommand extends AddCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private final Interviewee toAdd;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public AddIntervieweeCommand(Interviewee toAdd) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        this.toAdd \u003d toAdd;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        if (model.hasInterviewee(toAdd)) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        model.addInterviewee(toAdd);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        model.updateFilteredIntervieweeList(Model.PREDICATE_SHOW_ALL_INTERVIEWEES);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                || (other instanceof AddIntervieweeCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddIntervieweeCommand) other).toAdd));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 4,
      "KendrickAng": 37
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/logic/commands/AddInterviewerCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Interviewer;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " * Adds an Interviewer to the {@code InterviewerList}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "public class AddInterviewerCommand extends AddCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private final Interviewer toAdd;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public AddInterviewerCommand(Interviewer toAdd) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        this.toAdd \u003d toAdd;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        if (model.hasInterviewer(toAdd)) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        model.addInterviewer(toAdd);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        model.updateFilteredInterviewerList(Model.PREDICATE_SHOW_ALL_INTERVIEWERS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                || (other instanceof AddInterviewerCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddInterviewerCommand) other).toAdd));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 4,
      "KendrickAng": 37
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/logic/commands/ClearCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import seedu.scheduler.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dcshzj"
        },
        "content": " * Clears the scheduler book."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"List of Interviewees and Interviewers has been cleared!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        model.setIntervieweeList(List.of());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        model.setInterviewerList(List.of());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            model.setEmptyScheduleList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            model.setSchedulesList(model.getEmptyScheduleList());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            throw new CommandException(\"Could not regenerate table\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mirozo": 9,
      "dcshzj": 8,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/logic/commands/Command.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 3,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/logic/commands/CommandResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this(feedbackToUser, false, false);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 1,
      "-": 70
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/logic/commands/DeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.scheduler.logic.parser.CliSyntax.PREFIX_ROLE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Interviewee;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Interviewer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Role;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import seedu.scheduler.model.person.RoleType;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dcshzj"
        },
        "content": " * Deletes a person identified using it\u0027s name and role from the scheduler book."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            + \": Deletes an entity identified by the entity\u0027s name. \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            + \"An entity can either be an interviewee or interviewer.\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            + \"Parameters to delete interviewees:\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            + \"NAME \" + PREFIX_ROLE + \"interviewee\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            + \"Parameters to delete interviewees:\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            + \"NAME \" + PREFIX_ROLE + \"interviewer\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" John Doe\" + \"r/interviewee\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Person: %1$s\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private final Name targetName;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private final Role targetRole;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public DeleteCommand(Name targetName, Role targetRole) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        this.targetName \u003d targetName;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        this.targetRole \u003d targetRole;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        String deleted;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            if (targetRole.getRole().equals(RoleType.INTERVIEWEE)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                Interviewee i \u003d model.getInterviewee(targetName.fullName);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                model.deleteInterviewee(i);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                model.updateFilteredIntervieweeList(Model.PREDICATE_SHOW_ALL_INTERVIEWEES);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                deleted \u003d i.toString();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            } else if (targetRole.getRole().equals(RoleType.INTERVIEWER)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                Interviewer i \u003d model.getInterviewer(targetName.fullName);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                model.deleteInterviewer(i);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                model.updateFilteredInterviewerList(Model.PREDICATE_SHOW_ALL_INTERVIEWERS);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                deleted \u003d i.toString();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                throw new AssertionError(Messages.MESSAGE_CRITICAL_ERROR);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        } catch (NoSuchElementException | PersonNotFoundException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_NAME);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, deleted));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                \u0026\u0026 targetName.equals(((DeleteCommand) other).targetName) // state check"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                \u0026\u0026 targetName.equals(((DeleteCommand) other).targetName));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 10,
      "-": 30,
      "KendrickAng": 35
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/logic/commands/DisplayCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "package seedu.scheduler.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "import static seedu.scheduler.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "import seedu.scheduler.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "import seedu.scheduler.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": " * Represent result of display command."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "public class DisplayCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"display\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    private static final String INTERVIEWEE_TAB_COMMAND_WORD \u003d \" interviewee\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    private static final String INTERVIEWER_TAB_COMMAND_WORD \u003d \" interviewer\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    private static final String SCHEDULE_TAB_COMMAND_WORD \u003d \" schedule\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    private static final String CHANGE_TAB_SUCCESS \u003d \" displayed.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": command to display \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            + \"the schedules in a list of tables, the interviewer\u0027s information \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            + \"or the interviewer\u0027s information in a list.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + SCHEDULE_TAB_COMMAND_WORD;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    private final String commandType;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    public DisplayCommand(String commandType) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        this.commandType \u003d commandType;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        switch (this.commandType) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        case INTERVIEWEE_TAB_COMMAND_WORD:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            model.intervieweeTabChange();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            return new CommandResult(this.commandType + CHANGE_TAB_SUCCESS, false, false);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        case INTERVIEWER_TAB_COMMAND_WORD:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            model.interviewerTabChange();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            return new CommandResult(this.commandType + CHANGE_TAB_SUCCESS, false, false);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        case SCHEDULE_TAB_COMMAND_WORD:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            model.scheduleTabChange();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            return new CommandResult(this.commandType + CHANGE_TAB_SUCCESS, false, false);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mrchensheng21": 46
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/logic/commands/EditCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.parser.CliSyntax.PREFIX_DEPARTMENT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.parser.CliSyntax.PREFIX_FACULTY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.parser.CliSyntax.PREFIX_NUS_WORK_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.parser.CliSyntax.PREFIX_PERSONAL_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.parser.CliSyntax.PREFIX_ROLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.parser.CliSyntax.PREFIX_SLOT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.parser.CliSyntax.PREFIX_YEAR_OF_STUDY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " * Edits the details of an existing entity in the Scheduler."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "public abstract class EditCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the entity identified \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            + \"by its name as displayed on the entity list. Entities are interviewees or interviewers.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            + \"Parameters to edit interviewees:\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            + \"NAME \" + PREFIX_ROLE + \"interviewee \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            + \"[\" + PREFIX_FACULTY + \"FACULTY] \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            + \"[\" + PREFIX_YEAR_OF_STUDY + \"YEAR OF STUDY] \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            + \"[\" + PREFIX_PERSONAL_EMAIL + \"PERSONAL_EMAIL] \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            + \"[\" + PREFIX_NUS_WORK_EMAIL + \"NUS_WORK_EMAIL] \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            + \"[\" + PREFIX_DEPARTMENT + \"DEPARTMENT]... \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            + \"[\" + PREFIX_SLOT + \"SLOT]... \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            + \"Parameters to edit interviewers:\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            + \"NAME \" + PREFIX_ROLE + \"interviewer \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            + \"[\" + PREFIX_NUS_WORK_EMAIL + \"NUS_WORK_EMAIL] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            + \"[\" + PREFIX_DEPARTMENT + \"DEPARTMENT] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            + \"[\" + PREFIX_SLOT + \"SLOT]... \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            + \"Example (add interviewee):\\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            + COMMAND_WORD + \" John Doe \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            + PREFIX_ROLE + \"interviewee \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            + PREFIX_FACULTY + \"School of Computing \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            + PREFIX_SLOT + \"05/11/2019 18:00-19:00\\n\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            + \"Example (add interviewer):\\n\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            + COMMAND_WORD + \" John Doe \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            + PREFIX_ROLE + \"interviewer \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            + PREFIX_DEPARTMENT + \"Marketing\\n\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the database.\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 14,
      "-": 17,
      "KendrickAng": 33
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/logic/commands/EditIntervieweeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.commons.core.Messages.MESSAGE_INVALID_PERSON_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.model.Model.PREDICATE_SHOW_ALL_INTERVIEWEES;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Department;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Emails;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Faculty;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Interviewee;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Phone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Slot;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.tag.Tag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " * Edits the details of an existing interviewee in the Scheduler\u0027s interviewee list."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "public class EditIntervieweeCommand extends EditCommand {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private final Name toEdit;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private final EditIntervieweeDescriptor editIntervieweeDescriptor;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @param toEdit the Name of the interviewee to edit."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @param editIntervieweeDescriptor details to edit the interviewee with."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public EditIntervieweeCommand(Name toEdit, EditIntervieweeDescriptor editIntervieweeDescriptor) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        requireAllNonNull(toEdit, editIntervieweeDescriptor);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        this.toEdit \u003d toEdit;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        this.editIntervieweeDescriptor \u003d new EditIntervieweeDescriptor(editIntervieweeDescriptor);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        List\u003cInterviewee\u003e lastShownList \u003d model.getFilteredIntervieweeList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // ensure interviewee to edit exists"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        if (!model.hasInterviewee(toEdit)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_PERSON_NAME);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Interviewee intervieweeToEdit \u003d model.getInterviewee(toEdit.fullName);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // ensure user only edits what is shown on UI (i.e the filtered list)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        if (!lastShownList.contains(intervieweeToEdit)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_PERSON_NAME);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Interviewee editedInterviewee \u003d createEditedInterviewee(intervieweeToEdit, editIntervieweeDescriptor);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // an interviewee should not be edited to be the same as another interviewee in the interviewee list"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        if (!intervieweeToEdit.isSamePerson(editedInterviewee) \u0026\u0026 model.hasInterviewee(editedInterviewee)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        model.setInterviewee(intervieweeToEdit, editedInterviewee);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        model.updateFilteredIntervieweeList(PREDICATE_SHOW_ALL_INTERVIEWEES);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedInterviewee));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Generates the EditIntervieweeDescriptor from the interviewee provided."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private Interviewee createEditedInterviewee(Interviewee interviewee, EditIntervieweeDescriptor descriptor) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assert interviewee !\u003d null;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Name updatedName \u003d descriptor.getName().orElse(interviewee.getName());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Phone updatedPhone \u003d descriptor.getPhone().orElse(interviewee.getPhone());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d descriptor.getTags().orElse(interviewee.getTags());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Faculty updatedFaculty \u003d descriptor.getFaculty().orElse(interviewee.getFaculty());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Integer updatedYearOfStudy \u003d descriptor.getYearOfStudy().orElse(interviewee.getYearOfStudy());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        List\u003cDepartment\u003e updatedDepartmentChoices \u003d descriptor.getDepartmentChoices()"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .orElse(interviewee.getDepartmentChoices());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        List\u003cSlot\u003e updatedAvailableTimeslots \u003d descriptor.getAvailableTimeslots()"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .orElse(interviewee.getAvailableTimeslots());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Emails updatedEmails \u003d descriptor.getEmails().orElse(interviewee.getEmails());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return new Interviewee.IntervieweeBuilder(updatedName, updatedPhone, updatedTags)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .faculty(updatedFaculty)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .yearOfStudy(updatedYearOfStudy)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .departmentChoices(updatedDepartmentChoices)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .availableTimeslots(updatedAvailableTimeslots)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .emails(updatedEmails)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                || (other instanceof EditIntervieweeCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                \u0026\u0026 toEdit.equals(((EditIntervieweeCommand) other).toEdit) // state check"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                \u0026\u0026 editIntervieweeDescriptor.equals(((EditIntervieweeCommand) other).editIntervieweeDescriptor));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Represents the details to edit an interviewee with."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static class EditIntervieweeDescriptor {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        private Faculty faculty;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        private Integer yearOfStudy;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        private List\u003cDepartment\u003e departmentChoices;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        private List\u003cSlot\u003e availableTimeslots;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        private Emails emails;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // for testing purposes - instantiates an empty descriptor"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        public EditIntervieweeDescriptor() {}"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        public EditIntervieweeDescriptor(EditIntervieweeDescriptor toCopy) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            this.name \u003d toCopy.name;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            this.phone \u003d toCopy.phone;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            this.tags \u003d toCopy.tags;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            this.faculty \u003d toCopy.faculty;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            this.yearOfStudy \u003d toCopy.yearOfStudy;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            this.departmentChoices \u003d toCopy.departmentChoices;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            this.availableTimeslots \u003d toCopy.availableTimeslots;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            this.emails \u003d toCopy.emails;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "         * Returns true if any one field is edited (i.e non-null)."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "         */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, tags, faculty, yearOfStudy, departmentChoices,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                    availableTimeslots, emails);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            requireNonNull(name);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            requireNonNull(phone);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "         */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            requireNonNull(tags);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            this.tags \u003d new HashSet\u003c\u003e(tags);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        public void setFaculty(Faculty faculty) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            requireNonNull(faculty);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            this.faculty \u003d faculty;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        public void setYearOfStudy(Integer yearOfStudy) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            requireNonNull(yearOfStudy);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            this.yearOfStudy \u003d yearOfStudy;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "         * Sets {@code departmentChoices} to this object\u0027s {@code departmentChoices}."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "         * A defensive copy of {@code departmentChoices} is used internally."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "         */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        public void setDepartmentChoices(List\u003cDepartment\u003e departmentChoices) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            requireNonNull(departmentChoices);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            this.departmentChoices \u003d new ArrayList\u003c\u003e(departmentChoices);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "         * Sets {@code availableTimeslots} to this object\u0027s {@code availableTimeslots}."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "         * A defensive copy of {@code availableTimeslots} is used internally."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "         */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        public void setAvailableTimeslots(List\u003cSlot\u003e availableTimeslots) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            requireNonNull(availableTimeslots);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            this.availableTimeslots \u003d new ArrayList\u003c\u003e(availableTimeslots);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        public void setEmails(Emails emails) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            requireNonNull(emails);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            this.emails \u003d emails;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            return Optional.ofNullable(tags);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        public Optional\u003cFaculty\u003e getFaculty() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            return Optional.ofNullable(faculty);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        public Optional\u003cInteger\u003e getYearOfStudy() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            return Optional.ofNullable(yearOfStudy);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        public Optional\u003cList\u003cDepartment\u003e\u003e getDepartmentChoices() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            return Optional.ofNullable(departmentChoices);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        public Optional\u003cList\u003cSlot\u003e\u003e getAvailableTimeslots() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            return Optional.ofNullable(availableTimeslots);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        public Optional\u003cEmails\u003e getEmails() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            return Optional.ofNullable(emails);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            if (!(other instanceof EditIntervieweeDescriptor)) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            EditIntervieweeDescriptor e \u003d (EditIntervieweeDescriptor) other;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags())"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                    \u0026\u0026 getFaculty().equals(e.getFaculty())"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                    \u0026\u0026 getYearOfStudy().equals(e.getYearOfStudy())"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                    \u0026\u0026 getDepartmentChoices().equals(e.getDepartmentChoices())"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                    \u0026\u0026 getAvailableTimeslots().equals(e.getAvailableTimeslots())"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                    \u0026\u0026 getEmails().equals(e.getEmails());"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 18,
      "KendrickAng": 235
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/logic/commands/EditInterviewerCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.commons.core.Messages.MESSAGE_INVALID_PERSON_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.model.Model.PREDICATE_SHOW_ALL_INTERVIEWERS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Department;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Email;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Interviewer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Phone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Slot;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " * Edits the details of an existing interviewer in the Scheduler\u0027s interviewer list."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "public class EditInterviewerCommand extends EditCommand {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private final Name toEdit;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private final EditInterviewerDescriptor editInterviewerDescriptor;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @param toEdit the Name of the interviewer to edit."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @param editInterviewerDescriptor details to edit the Interviewer with."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public EditInterviewerCommand(Name toEdit, EditInterviewerDescriptor editInterviewerDescriptor) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        requireAllNonNull(toEdit, editInterviewerDescriptor);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        this.toEdit \u003d toEdit;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        this.editInterviewerDescriptor \u003d new EditInterviewerDescriptor(editInterviewerDescriptor);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        List\u003cInterviewer\u003e lastShownList \u003d model.getFilteredInterviewerList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // ensure interviewer to edit exists"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        if (!model.hasInterviewer(toEdit)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_PERSON_NAME);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Interviewer interviewerToEdit \u003d model.getInterviewer(toEdit.fullName);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // ensure user only edits what is shown on UI (i.e the filtered list)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        if (!lastShownList.contains(interviewerToEdit)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_PERSON_NAME);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Interviewer editedInterviewer \u003d createEditedInterviewer(interviewerToEdit, editInterviewerDescriptor);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // an interviewee should not be edited to be the same as another interviewee in the interviewee list"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        if (!interviewerToEdit.isSamePerson(editedInterviewer) \u0026\u0026 model.hasInterviewer(editedInterviewer)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        model.setInterviewer(interviewerToEdit, editedInterviewer);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        model.updateFilteredInterviewerList(PREDICATE_SHOW_ALL_INTERVIEWERS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedInterviewer));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Generates the EditInterviewerDescriptor from the interviewer provided."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private Interviewer createEditedInterviewer(Interviewer interviewer, EditInterviewerDescriptor descriptor) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assert interviewer !\u003d null;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Name updatedName \u003d descriptor.getName().orElse(interviewer.getName());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Phone updatedPhone \u003d descriptor.getPhone().orElse(interviewer.getPhone());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d descriptor.getTags().orElse(interviewer.getTags());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Department updatedDepartment \u003d descriptor.getDepartment().orElse(interviewer.getDepartment());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Email updatedEmail \u003d descriptor.getEmail().orElse(interviewer.getEmail());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        List\u003cSlot\u003e updatedAvailabilities \u003d descriptor.getAvailabilities().orElse(interviewer.getAvailabilities());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return new Interviewer.InterviewerBuilder(updatedName, updatedPhone, updatedTags)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .department(updatedDepartment)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .email(updatedEmail)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .availabilities(updatedAvailabilities)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                || (other instanceof EditInterviewerCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                \u0026\u0026 toEdit.equals(((EditInterviewerCommand) other).toEdit) // state check"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                \u0026\u0026 editInterviewerDescriptor.equals(((EditInterviewerCommand) other).editInterviewerDescriptor));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Represents the details to edit an Interviewer with."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static class EditInterviewerDescriptor {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        private Department department;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        private List\u003cSlot\u003e availabilities;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // for testing purposes - instantiates an empty descriptor."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        public EditInterviewerDescriptor() {}"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        EditInterviewerDescriptor(EditInterviewerDescriptor toCopy) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            this.name \u003d toCopy.name;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            this.phone \u003d toCopy.phone;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            this.tags \u003d toCopy.tags;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            this.department \u003d toCopy.department;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            this.email \u003d toCopy.email;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            this.availabilities \u003d toCopy.availabilities;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "         * Returns true if any one field is edited (i.e non-null)."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "         */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, tags, department, email, availabilities);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            requireNonNull(name);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            requireNonNull(phone);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "         */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            requireNonNull(tags);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            this.tags \u003d new HashSet\u003c\u003e(tags);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        public void setDepartment(Department department) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            requireNonNull(department);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            this.department \u003d department;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            requireNonNull(email);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "         * Sets {@code availabilities} to this object\u0027s {@code availabilities}."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "         * A defensive copy of {@code availabilities} is used internally."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "         */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        public void setAvailabilities(List\u003cSlot\u003e availabilities) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            requireNonNull(availabilities);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            this.availabilities \u003d new ArrayList\u003c\u003e(availabilities);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            return Optional.ofNullable(tags);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        public Optional\u003cDepartment\u003e getDepartment() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            return Optional.ofNullable(department);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        public Optional\u003cList\u003cSlot\u003e\u003e getAvailabilities() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            return Optional.ofNullable(availabilities);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            if (!(other instanceof EditInterviewerDescriptor)) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            EditInterviewerDescriptor e \u003d (EditInterviewerDescriptor) other;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags())"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                    \u0026\u0026 getDepartment().equals(e.getDepartment())"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                    \u0026\u0026 getAvailabilities().equals(e.getAvailabilities());"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 17,
      "KendrickAng": 200
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/logic/commands/EmailCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.commons.core.Messages.MESSAGE_INVALID_PERSON_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Interviewee;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dcshzj"
        },
        "content": " * Handles the sending of emails to interviewees using their associated email addresses."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dcshzj"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "public class EmailCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"email\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public static final String TIMESLOT_COMMAND_WORD \u003d \"timeslot\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public static final String ALL_TIMESLOTS_COMMAND_WORD \u003d \"alltimeslot\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public static final String STATUS_COMMAND_WORD \u003d \"status\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": All commands related to emails.\\n\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            + COMMAND_WORD + \" ct/\" + TIMESLOT_COMMAND_WORD + \": Opens an email dialog containing the \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            + \"interviewee\u0027s allocated interview time slot and other details pre-populated.\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            + \"Parameters: \" + COMMAND_WORD + \" ct/\" + TIMESLOT_COMMAND_WORD + \" n/INTERVIEWEE NAME\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" ct/\" + TIMESLOT_COMMAND_WORD + \" n/John Doe\\n\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            + COMMAND_WORD + \" ct/\" + ALL_TIMESLOTS_COMMAND_WORD + \": Automatically opens the email dialog \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            + \"for sending the interviewee\u0027s allocated interview time slot and other details pre-populated, \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            + \"for all interviewees in the database.\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" ct/\" + ALL_TIMESLOTS_COMMAND_WORD + \"\\n\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            + COMMAND_WORD + \" ct/\" + STATUS_COMMAND_WORD + \": Get the current status of interviewees with \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            + \"emails sent.\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" ct/\" + STATUS_COMMAND_WORD;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public static final String MESSAGE_EMAIL_CLIENT_ERROR \u003d \"Unable to open your computer\u0027s email client. \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            + \"Please manually email the interviewee instead.\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public static final String MESSAGE_NO_SLOTS_ALLOCATED \u003d \"No slots are currently allocated to this \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            + \"interviewee, have you run the schedule command?\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public static final String MESSAGE_EMAIL_INTERVIEWEE_SUCCESS \u003d \"Opening email window to email interviewee %1$s\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public static final String MESSAGE_EMAIL_ALL_SUCCESS \u003d \"Successfully emailed %1$s interviewee(s). %2$s \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            + \"were skipped as they were emailed before, %3$s had no emails stored in the database and %4$s \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            + \"had no slots allocated to them. There are a total of %5$s interviewee(s).\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public static final String MESSAGE_STATUS \u003d \"According to records, emails were sent to %1$s interviewee(s) \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            + \"out of a total of %2$s interviewee(s).\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public static final String EMAIL_MESSAGE_BODY \u003d \"Dear %1$s,\\n\\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            + \"Thank you for applying for %2$s! Below are the details of the interview slot allocated to you:\\n\\n\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            + \"Allocated interview slot: %3$s\\n\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            + \"Location: %4$s\\n\\n\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            + \"%5$s\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    private final String commandType;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    private final Name intervieweeName;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * Constructor for the EmailCommand class with no other variables provided, except for the commandType."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * @param commandType The email subcommand to execute."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public EmailCommand(String commandType) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        this.commandType \u003d commandType;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        this.intervieweeName \u003d null;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * Constructor for the EmailCommand class with an intervieweeName specified."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * @param commandType The email subcommand to execute."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * @param intervieweeName The name of the {@code Interviewee}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public EmailCommand(String commandType, Name intervieweeName) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        this.commandType \u003d commandType;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        this.intervieweeName \u003d intervieweeName;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        if (this.commandType.equals(TIMESLOT_COMMAND_WORD)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            return this.executeTimeslotCommand(model);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        } else if (this.commandType.equals(ALL_TIMESLOTS_COMMAND_WORD)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            return this.executeAllTimeslotsCommand(model);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        } else if (this.commandType.equals(STATUS_COMMAND_WORD)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            return this.executeStatusCommand(model);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * This method attempts to email the Interviewee with the name given in {@code intervieweeName}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    private CommandResult executeTimeslotCommand(Model model) throws CommandException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        List\u003cInterviewee\u003e intervieweeList \u003d model.getUnfilteredIntervieweeList();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        Interviewee toEmail \u003d null;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        for (Interviewee interviewee : intervieweeList) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            if (interviewee.getName().equals(this.intervieweeName)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                toEmail \u003d interviewee;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        if (toEmail \u003d\u003d null) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_PERSON_NAME);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        if (model.getAllocatedSlot(toEmail.getName().toString()).isEmpty()) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            throw new CommandException(MESSAGE_NO_SLOTS_ALLOCATED);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            model.emailInterviewee(toEmail);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            toEmail.setEmailSent(true);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        } catch (UnsupportedOperationException | IOException | SecurityException ex) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            // Happens when the mail client cannot be launched, should prompt the user to open a URL instead"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            throw new CommandException(MESSAGE_EMAIL_CLIENT_ERROR);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EMAIL_INTERVIEWEE_SUCCESS, toEmail.getName()));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * This method attempts to email all Interviewees and provides a summary result at the end of a successful"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * execution."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * Note: Interviewees without allocated slots and Interviewees that were emailed before are skipped."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    private CommandResult executeAllTimeslotsCommand(Model model) throws CommandException {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        List\u003cInterviewee\u003e intervieweeList \u003d model.getUnfilteredIntervieweeList();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        int noSlots \u003d 0;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        int skipped \u003d 0;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        int noEmail \u003d 0;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        int sent \u003d 0;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        for (Interviewee interviewee : intervieweeList) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            if (model.getAllocatedSlot(interviewee.getName().toString()).isEmpty()) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                // No slots are currently allocated to this interviewee"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                noSlots++;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            if (interviewee.getEmailSent()) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                skipped++;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            if (interviewee.getEmails().getAllEmails().isEmpty()) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                noEmail++;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                model.emailInterviewee(interviewee);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                interviewee.setEmailSent(true);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                sent++;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            } catch (UnsupportedOperationException | IOException | SecurityException ex) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                throw new CommandException(MESSAGE_EMAIL_CLIENT_ERROR);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EMAIL_ALL_SUCCESS, sent, skipped, noEmail, noSlots,"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                intervieweeList.size()));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * This method provides a summary report of the number of Interviewees that has been emailed before and"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * the total number of Interviewees currently stored in the database."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    private CommandResult executeStatusCommand(Model model) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        List\u003cInterviewee\u003e intervieweeList \u003d model.getUnfilteredIntervieweeList();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        int sent \u003d 0;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        for (Interviewee interviewee : intervieweeList) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            if (interviewee.getEmailSent()) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                sent++;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_STATUS, sent, intervieweeList.size()));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                || (other instanceof EmailCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                \u0026\u0026 intervieweeName.equals(((EmailCommand) other).intervieweeName)); // state check"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 2,
      "dcshzj": 190,
      "KendrickAng": 1
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/logic/commands/ExitCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Address Book as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 2,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/logic/commands/ExportCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mirozo"
        },
        "content": "package seedu.scheduler.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import static seedu.scheduler.logic.parser.CliSyntax.PREFIX_FILE_PATH;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import seedu.scheduler.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import seedu.scheduler.model.FilePath;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import seedu.scheduler.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import seedu.scheduler.model.util.CsvWriter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mirozo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mirozo"
        },
        "content": " * Exports schedules to target .csv file."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mirozo"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mirozo"
        },
        "content": "public class ExportCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"export\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": export schedules to specified .csv file. \\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            + \"Example: \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            + COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            + \" \" + PREFIX_FILE_PATH + \" \u003cFULL_FILE_PATH\u003e\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    public static final String SUCCESS_MESSAGE \u003d \"Data exported successfully.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    public static final String NOT_SCHEDULED_ERROR \u003d \"Interview slots have not been scheduled. Please ensure that \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            + \"data has been imported and \u0027schedule\u0027 command has been ran.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    public static final String ERROR_MESSAGE \u003d \"Could not write to file.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    private FilePath destinationFile;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     * Constructor for ExportCommand."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     * @param file destination file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    public ExportCommand(FilePath file) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        this.destinationFile \u003d file;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            if (!model.isScheduled()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                throw new CommandException(NOT_SCHEDULED_ERROR);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            CsvWriter writer \u003d new CsvWriter(destinationFile.getValue(), model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            writer.writeSchedulesToFile();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            return new CommandResult(SUCCESS_MESSAGE);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            throw new CommandException(ERROR_MESSAGE, ioe);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                || (other instanceof ExportCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                \u0026\u0026 destinationFile.equals(((ExportCommand) other).destinationFile));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mirozo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mirozo": 58
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/logic/commands/FindCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.IntervieweeNameHasKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.InterviewerNameHasKeywordsPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.PersonNameHasKeywordsPredicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dcshzj"
        },
        "content": " * Finds and lists all persons in the database whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose names contain any of \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private final PersonNameHasKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public FindCommand(PersonNameHasKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        List\u003cString\u003e keywords \u003d predicate.getKeywords();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        model.updateFilteredIntervieweeList(new IntervieweeNameHasKeywordsPredicate(keywords));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        model.updateFilteredInterviewerList(new InterviewerNameHasKeywordsPredicate(keywords));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                        model.getFilteredIntervieweeList().size() + model.getFilteredInterviewerList().size()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 7,
      "-": 33,
      "KendrickAng": 9
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/logic/commands/HelpCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 2,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/logic/commands/ImportCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import static seedu.scheduler.logic.parser.CliSyntax.PREFIX_FILE_PATH;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import seedu.scheduler.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import seedu.scheduler.model.FilePath;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Interviewee;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Interviewer;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import seedu.scheduler.model.person.Role;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import seedu.scheduler.model.person.RoleType;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.util.CsvReader;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mirozo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mirozo"
        },
        "content": " * Import csv file containing interviewer\u0027s/ interviewers\u0027s information."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mirozo"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mirozo"
        },
        "content": "public class ImportCommand extends Command {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"import\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Import .csv file containing \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            + \"interviewer or interviewee\u0027s information.\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            + \"Type of Data (Can be only interviewer or interviewee) \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            + PREFIX_FILE_PATH + \"FILE_PATH \\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" interviewer \" + PREFIX_FILE_PATH + \"C:\\\\Users\\\\john\\\\Desktop\\\\test.csv\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    public static final String SUCCESS_MESSAGE \u003d \"Data imported successfully.\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d \"Command not implemented yet\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    public static final String INCORRECT_FORMAT \u003d \"Data is in incorrect format. Please refer to the \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            + \"User Guide for the supported format\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    public static final String FILE_DOES_NOT_EXIST \u003d \"Target file does not exist. Please ensure that \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            + \"the file path is correct.\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    public static final String DUPLICATE_PERSON_ERROR \u003d \"Data contains entries that are duplicated/already exists \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            + \"in storage. Please type \u0027clear\u0027(without the quote) to remove those entries before running the import \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            + \"command.\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    public static final String DATE_FORMAT_ERROR_MESSAGE \u003d \"Error in data formatting: \";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ImportCommand.class);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    private FilePath filePath;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    private Role type;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    public ImportCommand(Role type, FilePath filePath) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            if (type.getRole().equals(RoleType.INTERVIEWER)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                CsvReader csvReader \u003d new CsvReader(filePath.getValue());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                logger.log(Level.INFO, \"Starts reading .csv file\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                ArrayList\u003cInterviewer\u003e interviewers \u003d csvReader.readInterviewers();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                logger.log(Level.INFO, \"Finished reading .csv file\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                logger.log(Level.INFO, stringifyInterviewers(interviewers));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                for (Interviewer interviewer: interviewers) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                    model.addInterviewer(interviewer);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                model.setScheduled(false);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                return new CommandResult(SUCCESS_MESSAGE, false, false);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            } else if (type.getRole().equals(RoleType.INTERVIEWEE)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                CsvReader csvReader \u003d new CsvReader(filePath.getValue());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                logger.log(Level.INFO, \"Starts reading .csv file\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                ArrayList\u003cInterviewee\u003e interviewees \u003d csvReader.readInterviewees();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                logger.log(Level.INFO, \"Finished reading .csv file\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                logger.log(Level.INFO, stringifyInterviewees(interviewees));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                for (Interviewee interviewee: interviewees) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                    model.addInterviewee(interviewee);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                model.setScheduled(false);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                return new CommandResult(SUCCESS_MESSAGE, false, false);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                throw new CommandException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        } catch (FileNotFoundException fileE) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            throw new CommandException(FILE_DOES_NOT_EXIST, fileE);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        } catch (IOException | ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            throw new CommandException(INCORRECT_FORMAT, e);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        } catch (DuplicatePersonException dpe) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            throw new CommandException(DUPLICATE_PERSON_ERROR, dpe);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        } catch (IllegalArgumentException iae) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            throw new CommandException(DATE_FORMAT_ERROR_MESSAGE + iae.getMessage(), iae);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     * Generates a string of interviewers and their data for logging purposes."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     * @param interviewers list of {@code interviewers}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     * @return String of all interviewers in the given list/"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    private static String stringifyInterviewers(ArrayList\u003cInterviewer\u003e interviewers) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        StringBuilder resultBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        resultBuilder.append(\"List of interviewers imported: \\n\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        for (Interviewer interviewer: interviewers) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            resultBuilder.append(interviewer.toString());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            resultBuilder.append(\"\\n\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        return resultBuilder.toString();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     * Generates a string of interviewees and their data for logging purposes."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     * @param interviewees list of {@code interviewees}."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     * @return String of all interviewees in the given list/"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    private static String stringifyInterviewees(ArrayList\u003cInterviewee\u003e interviewees) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        StringBuilder resultBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        resultBuilder.append(\"List of interviewees imported: \\n\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        for (Interviewee interviewee: interviewees) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            resultBuilder.append(interviewee.toString());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            resultBuilder.append(\"\\n\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        return resultBuilder.toString();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                || (other instanceof ImportCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                \u0026\u0026 type.equals(((ImportCommand) other).type)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                \u0026\u0026 filePath.equals(((ImportCommand) other).filePath));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "mirozo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 2,
      "mirozo": 120,
      "dcshzj": 10
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/logic/commands/ListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.model.Model.PREDICATE_SHOW_ALL_INTERVIEWEES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.model.Model.PREDICATE_SHOW_ALL_INTERVIEWERS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dcshzj"
        },
        "content": " * Lists all persons in the scheduler book to the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dcshzj"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all persons\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        model.updateFilteredIntervieweeList(PREDICATE_SHOW_ALL_INTERVIEWEES);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        model.updateFilteredInterviewerList(PREDICATE_SHOW_ALL_INTERVIEWERS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 25
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/logic/commands/ScheduleCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import java.util.stream.IntStream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import seedu.scheduler.commons.exceptions.ScheduleException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.logic.graph.BipartiteGraph;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.logic.graph.BipartiteGraphGenerator;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.logic.graph.HopCroftKarp;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.logic.graph.IntervieweeVertex;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import seedu.scheduler.logic.graph.InterviewerSlot;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Interviewee;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import seedu.scheduler.model.person.IntervieweeSlot;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Interviewer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import seedu.scheduler.model.person.Slot;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": " * Schedules the interviews using the interviewer\u0027s availability data and interviewee\u0027s selected slots."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "public class ScheduleCommand extends Command {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"schedule\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Schedule the interviews using the interviewer\u0027s \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        + \"availability and the interviewee\u0027s selected time slot.\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        + \"Parameters: none\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" (no other word should follow after it)\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ScheduleCommand.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        logger.info(\"Starting to schedule interviews\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        if (model.isScheduled()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            model.resetDataBeforeScheduling();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        List\u003cInterviewer\u003e interviewers \u003d model.getUnfilteredInterviewerList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        List\u003cInterviewee\u003e interviewees \u003d model.getUnfilteredIntervieweeList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        BipartiteGraph graph \u003d new BipartiteGraphGenerator(interviewers, interviewees).generate();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        HopCroftKarp algorithm \u003d new HopCroftKarp(graph);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        algorithm.execute();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        assignSlots(graph);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            model.updateSchedulesAfterScheduling();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        } catch (ScheduleException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            throw new CommandException(\"Error occurs!\", e);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        logger.info(\"Finish scheduling interviews\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        model.setScheduled(true);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return new CommandResult(generateResultMessage(graph));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            || other instanceof ScheduleCommand; // instanceof handles nulls"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Attaches the allocated interview slot the corresponding interviewee and also to the interviewer (after running"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * the HopCroftKarp algorithm). Returns true if at least one interviewee is allocated with a slot."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private void assignSlots(BipartiteGraph graph) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        int numInterviewees \u003d graph.getNumInterviewees();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        for (int i \u003d 0; i \u003c numInterviewees; i++) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            IntervieweeVertex intervieweeVertex \u003d graph.getIntervieweePair(i).getHead();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            if (intervieweeVertex.isMatched()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                Interviewee interviewee \u003d intervieweeVertex.getItem();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                InterviewerSlot interviewerSlot \u003d intervieweeVertex.getPartner().getItem();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                Interviewer interviewer \u003d interviewerSlot.getInterviewer();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                Slot slot \u003d interviewerSlot.getSlot();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                interviewee.setAllocatedSlot(slot);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                interviewer.addAllocatedSlot(new IntervieweeSlot(interviewee, slot));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Generates the result of message of the scheduling."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private String generateResultMessage(BipartiteGraph graph) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        List\u003cInterviewee\u003e notAllocatedInterviewees \u003d getNotAllocatedInterviewees(graph);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        String message \u003d \"Successfully scheduled!\\n\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        if (notAllocatedInterviewees.isEmpty()) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            message \u003d message + \"All interviewees are allocated with a slot!\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        } else if (notAllocatedInterviewees.size() \u003d\u003d graph.getNumInterviewees()) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            message \u003d message + \"No matching is found :(\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            message \u003d message + getNotAllocatedResult(notAllocatedInterviewees);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Returns the list of interviewees that are not allocated with any slot."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private List\u003cInterviewee\u003e getNotAllocatedInterviewees(BipartiteGraph graph) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        int numInterviewees \u003d graph.getNumInterviewees();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return IntStream.range(0, numInterviewees)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                .mapToObj(i -\u003e graph.getIntervieweePair(i).getHead())"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                .filter(intervieweeVertex -\u003e !intervieweeVertex.isMatched())"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                .map(IntervieweeVertex::getItem)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Returns the message showing the number of interviewees that are not allocated with a slot and their name"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * , each separated with a new line character."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private String getNotAllocatedResult(List\u003cInterviewee\u003e notAllocatedInterviewees) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        String prefix \u003d \"Number of interviewees that are not allocated a slot: \""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                + notAllocatedInterviewees.size() + \"\\nInterviewees that are not allocated a slot:\\n\";"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return notAllocatedInterviewees.stream()"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                .map(interviewee -\u003e interviewee.getName().toString())"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                .collect(Collectors.joining(\"\\n\", prefix, \"\\n\"));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 121,
      "dcshzj": 10
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/logic/commands/exceptions/CommandException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 1,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/logic/graph/BfsHopCroftKarp.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.logic.graph;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import java.util.Queue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": " * Performs breath-first search to find augmenting paths in the bipartite graph of interviewees and interview slots."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "public class BfsHopCroftKarp {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private BipartiteGraph graph;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public BfsHopCroftKarp(BipartiteGraph graph) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        this.graph \u003d graph;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Returns a list consisting unmatched interview slot vertices in the last layer of the layered graph if augmenting"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * path(s) is found, otherwise an empty list is returned. The given predecessors array are used to record the"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * structure of the layered graph."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @param intervieweePredecessor a list used to keep track of the predecessor of an interviewee, which is a"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     *                               slot matched to it."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @param interviewSlotPredecessors a list used to keep track of predecessor(s) of an interview slot, which is"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     *                                  interviewee(s) that can match the interview slot."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public List\u003cInterviewerSlotVertex\u003e execute(List\u003cInterviewerSlotVertex\u003e intervieweePredecessor,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                                               List\u003cList\u003cIntervieweeVertex\u003e\u003e interviewSlotPredecessors) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Queue\u003cVertex\u003e currentLayer \u003d initialiseBfs();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Queue\u003cVertex\u003e nextLayer \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        List\u003cInterviewerSlotVertex\u003e unmatchedSlotVertices \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        // Perform BFS and build the layered graph"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            nextLayer.clear();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            // Constructs the next layer"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            while (!currentLayer.isEmpty()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                Vertex u \u003d currentLayer.poll();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                if (u instanceof IntervieweeVertex) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                    nextLayer.addAll(findUnmatchedVertices(u, nextLayer, interviewSlotPredecessors));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                } else if (u instanceof InterviewerSlotVertex \u0026\u0026 u.isMatched()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                    Vertex v \u003d findMatchedVertex(u, nextLayer, intervieweePredecessor);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                    if (v !\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                        nextLayer.add(v);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            if (containsUnmatchedSlotVertices(nextLayer)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                unmatchedSlotVertices \u003d getUnmatchedSlotVertices(nextLayer);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                currentLayer.addAll(nextLayer);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        } while (!nextLayer.isEmpty());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return unmatchedSlotVertices;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Returns a queue of unmatched vertices in the first layer of the graph"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * (which is basically unmatched interviewee vertices)."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private Queue\u003cVertex\u003e initialiseBfs() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        int numInterviewees \u003d graph.getNumInterviewees();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Queue\u003cVertex\u003e firstLayer \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        // Initialise the first layer"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        for (int i \u003d 0; i \u003c numInterviewees; i++) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            IntervieweeVertex intervieweeVertex \u003d graph.getIntervieweePair(i).getHead();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            if (!intervieweeVertex.isMatched()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                firstLayer.offer(intervieweeVertex);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return firstLayer;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Returns a list of unmatched interview slot vertices in the next layer."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private List\u003cVertex\u003e findUnmatchedVertices(Vertex u, Queue\u003cVertex\u003e nextLayer,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            List\u003cList\u003cIntervieweeVertex\u003e\u003e interviewSlotPredecessors) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        List\u003cInterviewerSlotVertex\u003e associatedSlotVertices \u003d graph.getInterviewSlotVertices(u.getIndex());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        List\u003cVertex\u003e unmatchedVertices \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        for (InterviewerSlotVertex v : associatedSlotVertices) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            if (v.isMatched()) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            List\u003cIntervieweeVertex\u003e vPredecessors \u003d interviewSlotPredecessors.get(v.getIndex());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            vPredecessors.add((IntervieweeVertex) u);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            if (!nextLayer.contains(v)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                unmatchedVertices.add(v);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return unmatchedVertices;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Returns the matched interviewee vertex(in the next layer) of the interview slot vertex only if"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * the interviewee vertex does not already exist in the next layer given of the graph, otherwise"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * returns null."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private Vertex findMatchedVertex(Vertex u, Queue\u003cVertex\u003e nextLayer,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            List\u003cInterviewerSlotVertex\u003e intervieweePredecessor) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        IntervieweeVertex v \u003d (IntervieweeVertex) u.getPartner();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        intervieweePredecessor.add(v.getIndex(), (InterviewerSlotVertex) u);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        if (!nextLayer.contains(v)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            return v;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Returns true if the next layer contains at least one unmatched slot vertex."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private boolean containsUnmatchedSlotVertices(Queue\u003cVertex\u003e nextLayer) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        boolean containsUnmatched \u003d false;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        for (Vertex v : nextLayer) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            if (v instanceof IntervieweeVertex) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            if (!v.isMatched()) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                containsUnmatched \u003d true;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return containsUnmatched;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Returns the list of unmatched interview slot vertices in the given queue of vertices."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private List\u003cInterviewerSlotVertex\u003e getUnmatchedSlotVertices(Queue\u003cVertex\u003e vertices) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        List\u003cInterviewerSlotVertex\u003e unmatchedSlotVertices \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        for (Vertex v : vertices) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            if (v instanceof InterviewerSlotVertex \u0026\u0026 !v.isMatched()) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                unmatchedSlotVertices.add((InterviewerSlotVertex) v);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return unmatchedSlotVertices;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 155,
      "dcshzj": 1
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/logic/graph/BipartiteGraph.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.logic.graph;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.commons.util.Pair;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": " * Encapsulates a bipartite graph of interviewees vertices and interview slot vertices. Serves as a container"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": " * for the underlying list to store some additional information."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "public class BipartiteGraph {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private List\u003cPair\u003cIntervieweeVertex, List\u003cInterviewerSlotVertex\u003e\u003e\u003e graph;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private int numInterviewees;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private int numInterviewSlots;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public BipartiteGraph(List\u003cPair\u003cIntervieweeVertex, List\u003cInterviewerSlotVertex\u003e\u003e\u003e graph,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            int numInterviewees, int numInterviewSlots) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        this.graph \u003d graph;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        this.numInterviewees \u003d numInterviewees;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        this.numInterviewSlots \u003d numInterviewSlots;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public int getNumInterviewees() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return numInterviewees;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public int getNumInterviewSlots() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return numInterviewSlots;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Returns the pair of intervieweeVertex and list of associated interview slots vertices based on the"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * given @code{index} of the intervieweeVertex."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public Pair\u003cIntervieweeVertex, List\u003cInterviewerSlotVertex\u003e\u003e getIntervieweePair(int index) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return graph.get(index);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Returns the list of interview slots associated with the interviewee vertex of @code{index}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public List\u003cInterviewerSlotVertex\u003e getInterviewSlotVertices(int index) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return graph.get(index).getTail();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Returns true if the graph is empty."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return graph.isEmpty();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            || other instanceof BipartiteGraph \u0026\u0026 graph.equals(((BipartiteGraph) other).graph)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                \u0026\u0026 numInterviewees \u003d\u003d ((BipartiteGraph) other).numInterviewees"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                \u0026\u0026 numInterviewSlots \u003d\u003d ((BipartiteGraph) other).numInterviewSlots;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 58,
      "dcshzj": 2
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/logic/graph/BipartiteGraphGenerator.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.logic.graph;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import java.util.ListIterator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.commons.util.Pair;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Department;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Interviewee;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Interviewer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Slot;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": " * Generates a bipartite graph of interviewees linked to the the available interview slots."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "public class BipartiteGraphGenerator {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(BipartiteGraph.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private List\u003cInterviewer\u003e interviewers;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private List\u003cInterviewee\u003e interviewees;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public BipartiteGraphGenerator(List\u003cInterviewer\u003e interviewers, List\u003cInterviewee\u003e interviewees) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        this.interviewers \u003d interviewers;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        this.interviewees \u003d interviewees;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Returns a graph of interviewees matched to available interview slots. Note that there may be presence of"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * interviewees that are not linked to any interview slot at all as the availabilities of the interviewee does not"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * match any of the available interview slot."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * The interviewees and interview slots are each wrapped in a vertex."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public BipartiteGraph generate() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        logger.info(\"Starting to generate bipartite graph\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Pair\u003cList\u003cPair\u003cDepartment, List\u003cInterviewerSlotVertex\u003e\u003e\u003e, Integer\u003e result \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                generateInterviewSlotsVertices(interviewers);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        List\u003cPair\u003cDepartment, List\u003cInterviewerSlotVertex\u003e\u003e\u003e list \u003d result.getHead();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        int numSlots \u003d result.getTail();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        List\u003cPair\u003cIntervieweeVertex, List\u003cInterviewerSlotVertex\u003e\u003e\u003e graph \u003d new ArrayList\u003c\u003e(interviewees.size());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        int currIntervieweeVertexIndex \u003d 0;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        for (Interviewee interviewee : interviewees) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            // Create a list to store the interview slots that the interviewee can match to"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            List\u003cInterviewerSlotVertex\u003e interviewSlotVertices \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            // Get the sorted available interview slots based on the department of choice of the interviewee"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            // and also the sorted desired slots of the interviewee"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            Department department \u003d interviewee.getDepartmentChoices().get(0);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            List\u003cInterviewerSlotVertex\u003e availableSlots \u003d getInterviewSlotVertices(list, department);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            List\u003cSlot\u003e desiredSlots \u003d interviewee.getAvailableTimeslots();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            // Based on the desired slots, fill up the list with the matching available interview slots (wrapping"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            // each of them in a vertex)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            fill(interviewSlotVertices, desiredSlots, availableSlots);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            IntervieweeVertex intervieweeVertex \u003d new IntervieweeVertex(interviewee, currIntervieweeVertexIndex);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            Pair\u003cIntervieweeVertex, List\u003cInterviewerSlotVertex\u003e\u003e vertexListPair \u003d"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                    new Pair\u003c\u003e(intervieweeVertex, interviewSlotVertices);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            graph.add(vertexListPair);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            currIntervieweeVertexIndex++;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        logger.info(\"Bipartite graph of interviewees and interview slots is generated\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return new BipartiteGraph(graph, interviewees.size(), numSlots);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Returns the sorted available interview slots based on the department of choice of the interviewee."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private List\u003cInterviewerSlotVertex\u003e getInterviewSlotVertices("
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            List\u003cPair\u003cDepartment, List\u003cInterviewerSlotVertex\u003e\u003e\u003e list, Department departmentOfChoice) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Pair\u003cDepartment, List\u003cInterviewerSlotVertex\u003e\u003e departmentListPair \u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                getDepartmentListPair(list, departmentOfChoice);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return departmentListPair.getTail();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Fill up the given list with the matching available interview slots (wrapping each of them in a vertex)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * based on the desired slots of the interviewee."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private void fill(List\u003cInterviewerSlotVertex\u003e interviewSlotVertices,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            List\u003cSlot\u003e desiredSlots, List\u003cInterviewerSlotVertex\u003e availableSlots) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        ListIterator\u003cInterviewerSlotVertex\u003e availableSlotsIterator \u003d availableSlots.listIterator();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        ListIterator\u003cSlot\u003e desiredSlotsIterator \u003d desiredSlots.listIterator();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        if (!(availableSlotsIterator.hasNext() \u0026\u0026 desiredSlotsIterator.hasNext())) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Slot desiredSlot \u003d desiredSlotsIterator.next();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        InterviewerSlotVertex availableSlotVertex \u003d availableSlotsIterator.next();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        while (true) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            int comp \u003d desiredSlot.compareTo(availableSlotVertex.getItem().getSlot());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                if (comp \u003d\u003d 0) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                    interviewSlotVertices.add(availableSlotVertex);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                    availableSlotVertex \u003d availableSlotsIterator.next();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                } else if (comp \u003e 0) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                    availableSlotVertex \u003d availableSlotsIterator.next();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                } else if (comp \u003c 0) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                    desiredSlot \u003d desiredSlotsIterator.next();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Returns a list of interview slots based on the availabilities of the interviewers."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * The list is structured in such a way: the interview slots are categorised based on the department of the"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * interviewer. Thus, the actual structure of the list is a list of pairs, with the head being the department,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * and the tail being the list of available interview slots of that department."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private Pair\u003cList\u003cPair\u003cDepartment, List\u003cInterviewerSlotVertex\u003e\u003e\u003e, Integer\u003e generateInterviewSlotsVertices("
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            List\u003cInterviewer\u003e interviewers) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        List\u003cPair\u003cDepartment, List\u003cInterviewerSlotVertex\u003e\u003e\u003e list \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        int currNumSlots \u003d 0;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        for (Interviewer interviewer : interviewers) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            Department department \u003d interviewer.getDepartment();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            Pair\u003cDepartment, List\u003cInterviewerSlotVertex\u003e\u003e pair \u003d getDepartmentListPair(list, department);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            List\u003cSlot\u003e slots \u003d interviewer.getAvailabilities();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            List\u003cInterviewerSlotVertex\u003e interviewSlotVertices \u003d pair.getTail();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            for (Slot slot : slots) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                InterviewerSlot interviewerSlot \u003d new InterviewerSlot(slot, interviewer);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                interviewSlotVertices.add(new InterviewerSlotVertex(interviewerSlot, currNumSlots));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                currNumSlots++;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        // Sort the slots"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        for (Pair\u003cDepartment, List\u003cInterviewerSlotVertex\u003e\u003e pair : list) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            Collections.sort(pair.getTail());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return new Pair\u003c\u003e(list, currNumSlots);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Returns the pair of department and the list of associated interview slots from the given list."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * If the department does not already exist in the list, a new pair for the department will be created, with"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * the list of associated interview slots being empty."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private Pair\u003cDepartment, List\u003cInterviewerSlotVertex\u003e\u003e getDepartmentListPair(List\u003cPair\u003cDepartment,"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            List\u003cInterviewerSlotVertex\u003e\u003e\u003e list, Department department) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        int size \u003d list.size();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Pair\u003cDepartment, List\u003cInterviewerSlotVertex\u003e\u003e pair \u003d null;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        for (int i \u003d 0; i \u003c size; i++) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            Pair\u003cDepartment, List\u003cInterviewerSlotVertex\u003e\u003e currPair \u003d list.get(i);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            Department currDepartment \u003d currPair.getHead();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            if (currDepartment.equals(department)) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                pair \u003d currPair;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        if (pair \u003d\u003d null) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            pair \u003d new Pair\u003c\u003e(department, new LinkedList\u003c\u003e());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            list.add(pair);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return pair;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 169,
      "dcshzj": 7
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/logic/graph/DfsHopCroftKarp.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.logic.graph;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import java.util.ListIterator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import java.util.stream.IntStream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": " * Performs depth-first search on the layered graph of interviewees and interview slots to try to augment the number of"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": " * matching between interviewees and interview slots. The layered graph is generated from the breath-first search on"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": " * the bipartite graph of interviewees and interview slots and it\u0027s recorded through predecessor arrays. Note that in"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": " * the layered graph an interview slot may have multiple predecessors, which is interviewees."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "public class DfsHopCroftKarp {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private BipartiteGraph graph;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private List\u003cInterviewerSlotVertex\u003e lastLayer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private List\u003cInterviewerSlotVertex\u003e intervieweePredecessor;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private List\u003cList\u003cIntervieweeVertex\u003e\u003e interviewSlotPredecessors;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private boolean[] isUsedInterviewee;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private boolean[] isUsedSlot;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public DfsHopCroftKarp(BipartiteGraph graph) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        this.graph \u003d graph;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Executes depth-first search on the layered graph and tries to augment the number of matching between"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * interviewee vertex and interview slot vertex."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @param lastLayer last layer of the layered graph."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public void execute(List\u003cInterviewerSlotVertex\u003e lastLayer, List\u003cInterviewerSlotVertex\u003e intervieweePredecessors,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                        List\u003cList\u003cIntervieweeVertex\u003e\u003e interviewSlotPredecessors,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                        boolean[] isUsedInterviewee, boolean[] isUsedSlot) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        this.lastLayer \u003d lastLayer;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        this.intervieweePredecessor \u003d intervieweePredecessors;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        this.interviewSlotPredecessors \u003d interviewSlotPredecessors;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        this.isUsedInterviewee \u003d isUsedInterviewee;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        this.isUsedSlot \u003d isUsedSlot;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        for (Vertex v : lastLayer) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            List\u003cVertex\u003e path \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            dfs(v, path);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            if (!path.isEmpty()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                flipMatchingStatus(path);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Executes depth-first-search through the layered graph recursively to try to search for"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * a complete augmenting path, starting from the given free vertex in the last layer of the layered graph."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private void dfs(Vertex u, List\u003cVertex\u003e path) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        // If hits the first layer (i.e. don\u0027t have predecessor)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        if (!hasPredecessor(u)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            path.add(u);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        if (u instanceof IntervieweeVertex) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            InterviewerSlotVertex predecessor \u003d intervieweePredecessor.get(u.getIndex());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            if (isUsedSlot[predecessor.getIndex()]) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            dfs(predecessor, path);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            if (!path.isEmpty()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                path.add(u);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            List\u003cIntervieweeVertex\u003e predecessors \u003d interviewSlotPredecessors.get(u.getIndex());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            for (IntervieweeVertex predecessor : predecessors) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                if (isUsedInterviewee[predecessor.getIndex()]) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                dfs(predecessor, path);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                if (!path.isEmpty()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                    path.add(u);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Returns true if the vertex u has a predecessor."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private boolean hasPredecessor(Vertex u) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        if (u instanceof IntervieweeVertex) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            InterviewerSlotVertex predecessor \u003d intervieweePredecessor.get(u.getIndex());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            return predecessor !\u003d null;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            List\u003cIntervieweeVertex\u003e predecessors \u003d interviewSlotPredecessors.get(u.getIndex());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            return !predecessors.isEmpty();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Flips the matched and unmatched status along the vertices in the augmented path."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * When flipping matched status, attach the new matching partner of a vertex to itself through match(partner)."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private void flipMatchingStatus(List\u003cVertex\u003e path) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        assert path.size() % 2 \u003d\u003d 0;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        // System.out.printf(\"Printing augmenting path...\\n\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        // path.forEach(System.out::println);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        ListIterator\u003cVertex\u003e iterator \u003d path.listIterator();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        IntStream.range(0, path.size() - 1).forEach(i -\u003e {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            Vertex currVertex \u003d iterator.next();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            Vertex nextVertex \u003d iterator.next();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            if (i % 2 \u003d\u003d 0) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                // If now is to match (bidirectional matching)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                // TODO: Perform a safe matching instead"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                currVertex.match(nextVertex);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                nextVertex.match(currVertex);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                nextVertex.unmatch();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            updateUsedStatus(currVertex);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            updateUsedStatus(nextVertex);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            iterator.previous(); // move the cursor backward by 1 position"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        });"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Updates the used status of a vertex after it is used in one augmenting path so that it is not considered"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * in the subsequent search of a complete augmenting path in the layered graph during depth-first search."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private void updateUsedStatus(Vertex u) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        if (u instanceof IntervieweeVertex) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            isUsedInterviewee[u.getIndex()] \u003d true;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            isUsedSlot[u.getIndex()] \u003d true;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 140,
      "dcshzj": 1
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/logic/graph/HopCroftKarp.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.logic.graph;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import java.util.stream.IntStream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": " * Represents the Hopcroft-Karp algorithm which can find the maximum number of matchings between interviewee and"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": " * interview slots."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "* Crucial assumption: A bipartite graph is given to the algorithm."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "public class HopCroftKarp {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HopCroftKarp.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * intervieweePredecessors -\u003e predecessor of interviewee which is an interview slot matched to it."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * interviewSlotPredecessors predecessor(s) of interview slots which is interviewee(s) that can match the slot."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * isUsedInterviewee -\u003e a boolean array to keep track of interviewee that were used in an augmenting path"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     *                      to augment the number of matching."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * isUsedSlot -\u003e a boolean array to keep track of interview slot that were used in an augmenting path"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     *               to augment the number of matching."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private BipartiteGraph graph;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private List\u003cInterviewerSlotVertex\u003e intervieweePredecessor;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private List\u003cList\u003cIntervieweeVertex\u003e\u003e interviewSlotPredecessors;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private boolean[] usedInterviewees;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private boolean[] usedSlots;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public HopCroftKarp(BipartiteGraph graph) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        this.graph \u003d graph;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Run the Hopcroft-Karp algorithm on the given bipartite graphs of interviewee and available interview slots"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * to find the maximum number of matching between interviewee and interview slots. The matching status between"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * interviewee and interview slots are tracked inside the given bipartite graph."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        logger.info(\"Hopcroft Karp algorithm starting...\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        if (graph.isEmpty()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        initialiseHopCroftKarp();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        List\u003cInterviewerSlotVertex\u003e lastLayer \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            lastLayer \u003d new BfsHopCroftKarp(graph).execute(intervieweePredecessor, interviewSlotPredecessors);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            // If augmenting path(s) is found"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            if (!lastLayer.isEmpty()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                new DfsHopCroftKarp(graph).execute(lastLayer, intervieweePredecessor, interviewSlotPredecessors,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                        usedInterviewees, usedSlots);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            cleanUp();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        } while (!lastLayer.isEmpty()); // while there exists an augmenting path(s)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        logger.info(\"Hopcroft Karp algorithm terminates\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Initialises the necessary components of the HopCroft Karp algorithm."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private void initialiseHopCroftKarp() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        int numInterviewees \u003d graph.getNumInterviewees();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        int numSlots \u003d graph.getNumInterviewSlots();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        intervieweePredecessor \u003d Arrays.asList(new InterviewerSlotVertex[numInterviewees]);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        interviewSlotPredecessors \u003d new ArrayList\u003c\u003e(numSlots);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        usedInterviewees \u003d new boolean[numInterviewees];"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        usedSlots \u003d new boolean[numSlots];"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        IntStream.range(0, numSlots).forEach(i -\u003e interviewSlotPredecessors.add(new LinkedList\u003c\u003e()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Cleans up the components of the HopCroft Karp algorithm after one iteration of the algorithm."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private void cleanUp() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Collections.fill(intervieweePredecessor, null);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        interviewSlotPredecessors.forEach(list -\u003e list.clear());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Arrays.fill(usedInterviewees, false);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Arrays.fill(usedSlots, false);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 88,
      "dcshzj": 2
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/logic/graph/IntervieweeVertex.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.logic.graph;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Interviewee;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": " * A vertex that wraps an interviewee into it."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "public class IntervieweeVertex extends Vertex\u003cInterviewee, InterviewerSlotVertex\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public IntervieweeVertex(Interviewee interviewee, int index) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        super(interviewee, index);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 10,
      "dcshzj": 2
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/logic/graph/InterviewerSlot.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "package seedu.scheduler.logic.graph;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import seedu.scheduler.model.person.Interviewer;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import seedu.scheduler.model.person.Slot;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": " * Represents an interview slot with information regarding the interviewer that will be doing the interview"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": " * during that slot."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "public class InterviewerSlot {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private Interviewer interviewer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private Slot slot;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public InterviewerSlot(Slot slot, Interviewer interviewer) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        this.slot \u003d slot;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        this.interviewer \u003d interviewer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public Interviewer getInterviewer() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return interviewer;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public Slot getSlot() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return slot;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            return this.slot.equals(((InterviewerSlot) other).getSlot())"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                    \u0026\u0026 this.interviewer.equals(((InterviewerSlot) other).getInterviewer());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 36
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/logic/graph/InterviewerSlotVertex.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "package seedu.scheduler.logic.graph;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import seedu.scheduler.model.person.Slot;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": " * A vertex that wraps an interview slot into it."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "public class InterviewerSlotVertex extends Vertex\u003cInterviewerSlot, IntervieweeVertex\u003e implements"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Comparable\u003cInterviewerSlotVertex\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public InterviewerSlotVertex(InterviewerSlot item, int index) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        super(item, index);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public int compareTo(InterviewerSlotVertex other) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Slot thisSlot \u003d this.getItem().getSlot();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Slot otherSlot \u003d other.getItem().getSlot();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return thisSlot.compareTo(otherSlot);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 21
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/logic/graph/Vertex.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.logic.graph;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": " * Represents a vertex in a bipartite graph."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": " * @param \u003cU\u003e the item that this vertex holds or encapsulates."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": " * @param \u003cV\u003e the vertex that this vertex is matched to."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "public abstract class Vertex\u003cU, V\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private U item;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private V partner;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public Vertex(U item, int index) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        this.item \u003d item;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public void match(V partner) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        this.partner \u003d partner;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public void unmatch() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        this.partner \u003d null;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public boolean isMatched() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return this.partner !\u003d null;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public int getIndex() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return index;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public U getItem() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return item;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public V getPartner() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return partner;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Returns true if the index and the item and its partner that the vertex is holding is equal to those of other."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            || other instanceof Vertex \u0026\u0026 Objects.equals(item, ((Vertex) other).item)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                \u0026\u0026 Objects.equals(partner, ((Vertex) other).partner)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                \u0026\u0026 index \u003d\u003d ((Vertex) other).index;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return String.format(\"U: %s\", item.toString());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 58,
      "dcshzj": 1
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/logic/parser/AddCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.commons.core.Messages.MESSAGE_CRITICAL_ERROR;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.parser.CliSyntax.PREFIX_DEPARTMENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.parser.CliSyntax.PREFIX_FACULTY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.parser.CliSyntax.PREFIX_NUS_WORK_EMAIL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.parser.CliSyntax.PREFIX_PERSONAL_EMAIL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.parser.CliSyntax.PREFIX_ROLE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.parser.CliSyntax.PREFIX_SLOT;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.parser.CliSyntax.PREFIX_YEAR_OF_STUDY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.logic.commands.AddIntervieweeCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.logic.commands.AddInterviewerCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Department;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Email;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Emails;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Faculty;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Interviewee;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Interviewer;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Phone;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Role;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.RoleType;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Slot;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.tag.Tag;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_ROLE, PREFIX_NAME, PREFIX_PHONE, PREFIX_TAG,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                        PREFIX_FACULTY, PREFIX_YEAR_OF_STUDY, PREFIX_DEPARTMENT, PREFIX_SLOT, PREFIX_PERSONAL_EMAIL,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                        PREFIX_NUS_WORK_EMAIL);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // common prefixes - present across interviewers and interviewees"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_ROLE, PREFIX_NAME, PREFIX_PHONE)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Role role \u003d ParserUtil.parseRole(argMultimap.getValue(PREFIX_ROLE).get());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // hierarchical parsing"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        if (role.getRole().equals(RoleType.INTERVIEWEE)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            return parseAddIntervieweeCommand(argMultimap, name, phone, tagList);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        } else if (role.getRole().equals(RoleType.INTERVIEWER)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            return parseAddInterviewerCommand(argMultimap, name, phone, tagList);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // control flow should not reach here."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        throw new AssertionError(MESSAGE_CRITICAL_ERROR);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Parses the argument multimap into an AddIntervieweeCommand."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private AddIntervieweeCommand parseAddIntervieweeCommand(ArgumentMultimap argMultimap, Name name, Phone phone,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                                                             Set\u003cTag\u003e tagSet) throws ParseException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_FACULTY, PREFIX_YEAR_OF_STUDY, PREFIX_FACULTY,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                PREFIX_DEPARTMENT, PREFIX_SLOT, PREFIX_PERSONAL_EMAIL, PREFIX_NUS_WORK_EMAIL)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // Get all necessary fields from argMultimap"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Faculty faculty \u003d ParserUtil.parseFaculty(argMultimap.getValue(PREFIX_FACULTY).get());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Integer yearOfStudy \u003d ParserUtil.parseYearOfStudy(argMultimap.getValue(PREFIX_YEAR_OF_STUDY).get());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        List\u003cSlot\u003e availableTimeslots \u003d ParserUtil.parseSlots(argMultimap.getAllValues(PREFIX_SLOT));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Email personalEmail \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_PERSONAL_EMAIL).get());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Email nusWorkEmail \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_NUS_WORK_EMAIL).get());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Emails emails \u003d new Emails().addPersonalEmail(personalEmail).addNusEmail(nusWorkEmail);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        List\u003cDepartment\u003e departmentChoices \u003d"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                ParserUtil.parseDepartments(argMultimap.getAllValues(PREFIX_DEPARTMENT));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // Build the interviewee"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Interviewee interviewee \u003d new Interviewee.IntervieweeBuilder(name, phone, tagSet)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .faculty(faculty)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .yearOfStudy(yearOfStudy)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .departmentChoices(departmentChoices)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .availableTimeslots(availableTimeslots)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .emails(emails)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return new AddIntervieweeCommand(interviewee);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Parses the argument multimap into an AddInterviewerCommand."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private AddInterviewerCommand parseAddInterviewerCommand(ArgumentMultimap argMultimap, Name name, Phone phone,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                                                             Set\u003cTag\u003e tagSet) throws ParseException {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_DEPARTMENT, PREFIX_NUS_WORK_EMAIL, PREFIX_SLOT)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // Get all necessary values from argMultimap."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Department department \u003d ParserUtil.parseDepartment(argMultimap.getValue(PREFIX_DEPARTMENT).get());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Email nusWorkEmail \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_NUS_WORK_EMAIL).get());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        List\u003cSlot\u003e availableTimeslots \u003d ParserUtil.parseSlots(argMultimap.getAllValues(PREFIX_SLOT));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // Build the interviewer"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Interviewer interviewer \u003d new Interviewer.InterviewerBuilder(name, phone, tagSet)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .department(department)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .email(nusWorkEmail)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .availabilities(availableTimeslots)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return new AddInterviewerCommand(interviewer);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 30,
      "-": 37,
      "KendrickAng": 69
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/logic/parser/AddressBookParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "import seedu.scheduler.logic.commands.DisplayCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.logic.commands.EmailCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import seedu.scheduler.logic.commands.ExportCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.logic.commands.ImportCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.logic.commands.ScheduleCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        case ImportCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            return new ImportCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        case EmailCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            return new EmailCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        case ScheduleCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            return new ScheduleCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        case DisplayCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            return new DisplayCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        case ExportCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            return new ExportCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mrchensheng21": 4,
      "ChrisKheng": 3,
      "mirozo": 7,
      "dcshzj": 19,
      "-": 62
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/logic/parser/ArgumentMultimap.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Prefixes mapped to their respective arguments**/"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 1,
      "-": 59
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/logic/parser/ArgumentTokenizer.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " *    in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return                ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 1,
      "-": 147
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/logic/parser/CliSyntax.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final Prefix PREFIX_ROLE \u003d new Prefix(\"r/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final Prefix PREFIX_FACULTY \u003d new Prefix(\"f/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final Prefix PREFIX_YEAR_OF_STUDY \u003d new Prefix(\"y/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final Prefix PREFIX_DEPARTMENT \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final Prefix PREFIX_SLOT \u003d new Prefix(\"s/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public static final Prefix PREFIX_COMMAND_TYPE \u003d new Prefix(\"ct/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    public static final Prefix PREFIX_FILE_PATH \u003d new Prefix(\"fp/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final Prefix PREFIX_PERSONAL_EMAIL \u003d new Prefix(\"ep/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final Prefix PREFIX_NUS_WORK_EMAIL \u003d new Prefix(\"ew/\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mirozo": 1,
      "dcshzj": 2,
      "-": 11,
      "KendrickAng": 7
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/logic/parser/DeleteCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.commands.DeleteCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.parser.CliSyntax.PREFIX_ROLE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Role;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_ROLE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_ROLE) || argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Role role \u003d ParserUtil.parseRole(argMultimap.getValue(PREFIX_ROLE).get());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return new DeleteCommand(name, role);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 9,
      "-": 18,
      "KendrickAng": 17
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/logic/parser/DisplayCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "package seedu.scheduler.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "import static seedu.scheduler.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "import static seedu.scheduler.logic.commands.DisplayCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "import seedu.scheduler.logic.commands.DisplayCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "import seedu.scheduler.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": " * Parse input arguments and create a new DisplayCommand object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "public class DisplayCommandParser implements Parser\u003cDisplayCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    public DisplayCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        args.trim();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        if (args.isEmpty()) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            );"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        return new DisplayCommand(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mrchensheng21": 24
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/logic/parser/EditCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.commons.core.Messages.MESSAGE_CRITICAL_ERROR;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.commands.EditCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.parser.CliSyntax.PREFIX_DEPARTMENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.parser.CliSyntax.PREFIX_FACULTY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.parser.CliSyntax.PREFIX_NUS_WORK_EMAIL;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.parser.CliSyntax.PREFIX_PERSONAL_EMAIL;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.parser.CliSyntax.PREFIX_ROLE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.parser.CliSyntax.PREFIX_SLOT;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.parser.CliSyntax.PREFIX_YEAR_OF_STUDY;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.logic.commands.EditIntervieweeCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.logic.commands.EditIntervieweeCommand.EditIntervieweeDescriptor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.logic.commands.EditInterviewerCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.logic.commands.EditInterviewerCommand.EditInterviewerDescriptor;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Department;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Emails;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Role;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import seedu.scheduler.model.person.RoleType;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Slot;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.tag.Tag;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " * Parses input arguments and creates a new EditCommand object."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_ROLE, PREFIX_NAME, PREFIX_PHONE,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                PREFIX_TAG, PREFIX_FACULTY, PREFIX_YEAR_OF_STUDY, PREFIX_DEPARTMENT, PREFIX_SLOT,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                PREFIX_PERSONAL_EMAIL, PREFIX_NUS_WORK_EMAIL);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Name name;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // name preamble and role prefix must be present"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            name \u003d ParserUtil.parseName(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_ROLE)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Role role \u003d ParserUtil.parseRole(argMultimap.getValue(PREFIX_ROLE).get());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        if (role.getRole().equals(RoleType.INTERVIEWEE)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            EditIntervieweeDescriptor descriptor \u003d new EditIntervieweeDescriptor();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            fillIntervieweeDescriptor(descriptor, argMultimap);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            if (!descriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            return new EditIntervieweeCommand(name, descriptor);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        if (role.getRole().equals(RoleType.INTERVIEWER)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            EditInterviewerDescriptor descriptor \u003d new EditInterviewerDescriptor();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            fillInterviewerDescriptor(descriptor, argMultimap);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            if (!descriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            return new EditInterviewerCommand(name, descriptor);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        throw new AssertionError(MESSAGE_CRITICAL_ERROR); // should not reach this point"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Fills the given interviewee descriptor with necessary values from the argumentMultiMap."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private void fillIntervieweeDescriptor(EditIntervieweeDescriptor descriptor, ArgumentMultimap argMultimap)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            throws ParseException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            descriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            descriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        if (argMultimap.getValue(PREFIX_FACULTY).isPresent()) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            descriptor.setFaculty(ParserUtil.parseFaculty(argMultimap.getValue(PREFIX_FACULTY).get()));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        if (argMultimap.getValue(PREFIX_YEAR_OF_STUDY).isPresent()) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            descriptor.setYearOfStudy(ParserUtil.parseYearOfStudy(argMultimap.getValue(PREFIX_YEAR_OF_STUDY).get()));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PERSONAL_EMAIL).isPresent()"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                || argMultimap.getValue(PREFIX_NUS_WORK_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            Emails emails \u003d new Emails();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            if (argMultimap.getValue(PREFIX_PERSONAL_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                emails.addPersonalEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_PERSONAL_EMAIL).get()));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            if (argMultimap.getValue(PREFIX_NUS_WORK_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                emails.addNusEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_NUS_WORK_EMAIL).get()));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            descriptor.setEmails(emails);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // parse collections for edit"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(descriptor::setTags);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DEPARTMENT).isPresent()) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            parseDepartmentsForEdit("
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                    argMultimap.getAllValues(PREFIX_DEPARTMENT)).ifPresent(descriptor::setDepartmentChoices);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        if (argMultimap.getValue(PREFIX_SLOT).isPresent()) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            parseSlotsForEdit(argMultimap.getAllValues(PREFIX_SLOT)).ifPresent(descriptor::setAvailableTimeslots);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Fills the given interviewer descriptor with necessary values from the argumentMultiMap."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private void fillInterviewerDescriptor(EditInterviewerDescriptor descriptor, ArgumentMultimap argMultimap)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            throws ParseException {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            descriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            descriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NUS_WORK_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            descriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_NUS_WORK_EMAIL).get()));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DEPARTMENT).isPresent()) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            descriptor.setDepartment(ParserUtil.parseDepartment(argMultimap.getValue(PREFIX_DEPARTMENT).get()));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // parse collections for edit"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(descriptor::setTags);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        if (argMultimap.getValue(PREFIX_SLOT).isPresent()) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            parseSlotsForEdit(argMultimap.getAllValues(PREFIX_SLOT)).ifPresent(descriptor::setAvailabilities);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Converts a collection of strings into a Optional List of Departments. {@code departments} must contain at"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * least one string."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private Optional\u003cList\u003cDepartment\u003e\u003e parseDepartmentsForEdit(Collection\u003cString\u003e departments) throws ParseException {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assert departments !\u003d null;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        if (departments.isEmpty()) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return Optional.of(ParserUtil.parseDepartments(departments));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Converts a collection of strings into a Optional List of Slots. {@code slots} must contain at least one string."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private Optional\u003cList\u003cSlot\u003e\u003e parseSlotsForEdit(Collection\u003cString\u003e slots) throws ParseException {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assert slots !\u003d null;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        if (slots.isEmpty()) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return Optional.of(ParserUtil.parseSlots(slots));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 31,
      "-": 49,
      "KendrickAng": 128
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/logic/parser/EmailCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.commands.EmailCommand.ALL_TIMESLOTS_COMMAND_WORD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.commands.EmailCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.commands.EmailCommand.STATUS_COMMAND_WORD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.commands.EmailCommand.TIMESLOT_COMMAND_WORD;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.parser.CliSyntax.PREFIX_COMMAND_TYPE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.logic.commands.EmailCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dcshzj"
        },
        "content": " * Parses input arguments and creates a new EmailCommand object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dcshzj"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "public class EmailCommandParser implements Parser\u003cEmailCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EmailCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * and returns an EmailCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public EmailCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        ArgumentMultimap argumentMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_COMMAND_TYPE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        if (!argumentMultimap.getValue(PREFIX_COMMAND_TYPE).isPresent() || !argumentMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        String commandType \u003d argumentMultimap.getValue(PREFIX_COMMAND_TYPE).get();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        if (commandType.equals(TIMESLOT_COMMAND_WORD)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            return this.parseTimeslotCommand(argumentMultimap);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        } else if (commandType.equals(ALL_TIMESLOTS_COMMAND_WORD)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            return new EmailCommand(ALL_TIMESLOTS_COMMAND_WORD);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        } else if (commandType.equals(STATUS_COMMAND_WORD)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            return new EmailCommand(STATUS_COMMAND_WORD);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * Handles the \"timeslot\" sub-command in the context of the EmailCommand and returns"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * an EmailCommand object for execution"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * @param args The arguments of the command provided by the user"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public EmailCommand parseTimeslotCommand(ArgumentMultimap args) throws ParseException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        if (!args.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        Name name \u003d ParserUtil.parseName(args.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        return new EmailCommand(TIMESLOT_COMMAND_WORD, name);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 61
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/logic/parser/ExportCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mirozo"
        },
        "content": "package seedu.scheduler.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import static seedu.scheduler.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import static seedu.scheduler.logic.commands.ExportCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import static seedu.scheduler.logic.parser.CliSyntax.PREFIX_FILE_PATH;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import seedu.scheduler.logic.commands.ExportCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import seedu.scheduler.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import seedu.scheduler.model.FilePath;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mirozo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mirozo"
        },
        "content": " * Parses user input to create a new ExportCommand object."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mirozo"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mirozo"
        },
        "content": "public class ExportCommandParser implements Parser\u003cExportCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ExportCommand."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     * and returns a ExportCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    public ExportCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_FILE_PATH);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        if (argMultimap.getValue(PREFIX_FILE_PATH).isEmpty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        FilePath file \u003d ParserUtil.parseFilePath(argMultimap.getValue(PREFIX_FILE_PATH).get());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        return new ExportCommand(file);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mirozo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mirozo": 30
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/logic/parser/FindCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.commands.FindCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.PersonNameHasKeywordsPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return new FindCommand(new PersonNameHasKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 7,
      "-": 26,
      "KendrickAng": 1
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/logic/parser/ImportCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.commands.ImportCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import static seedu.scheduler.logic.parser.CliSyntax.PREFIX_FILE_PATH;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.logic.commands.ImportCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import seedu.scheduler.model.FilePath;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import seedu.scheduler.model.person.Role;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mirozo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mirozo"
        },
        "content": " * Parser class for ImportCommand."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mirozo"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mirozo"
        },
        "content": "public class ImportCommandParser implements Parser\u003cImportCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ImportCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     * and returns a ImportCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    public ImportCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_FILE_PATH);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        if (argMultimap.getValue(PREFIX_FILE_PATH).isEmpty() || argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        Role type \u003d ParserUtil.parseRole(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        FilePath file \u003d ParserUtil.parseFilePath(argMultimap.getValue(PREFIX_FILE_PATH).get());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        if (!file.exists()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            throw new ParseException(ImportCommand.FILE_DOES_NOT_EXIST);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        return new ImportCommand(type, file);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mirozo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mirozo": 29,
      "dcshzj": 6
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/logic/parser/Parser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 3,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/logic/parser/ParserUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import seedu.scheduler.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.commons.util.StringUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import seedu.scheduler.model.FilePath;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Department;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Email;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Faculty;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Role;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Slot;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     * Parses {@code filePath} into an {@code FilePath} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     * @throws ParseException if the specified filePath is invalid."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    public static FilePath parseFilePath(String filePath) throws ParseException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        String trimmedFilePath \u003d filePath.trim();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        if (!FilePath.isValidFilePath(trimmedFilePath)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            throw new ParseException(FilePath.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        return new FilePath(trimmedFilePath);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Parses a {@code String} role into a {@code Role}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static Role parseRole(String role) throws ParseException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        requireNonNull(role);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        String trimmedRole \u003d role.trim();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        if (!Role.isValidRole(trimmedRole)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            throw new ParseException(Role.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return new Role(trimmedRole);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Parses a {@code String faculty} into a {@code Faculty}."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @throws ParseException if the given {@code faculty} is invalid."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static Faculty parseFaculty(String faculty) throws ParseException {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        requireNonNull(faculty);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        String trimmedFaculty \u003d faculty.trim();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        if (!Faculty.isValidFaculty(trimmedFaculty)) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            throw new ParseException(Faculty.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return new Faculty(trimmedFaculty);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Parses a {@code String yearOfStudy} into a {@code Integer}."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @throws ParseException if the given {@code yearOfStudy} is invalid."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static Integer parseYearOfStudy(String yearOfStudy) throws ParseException {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        requireNonNull(yearOfStudy);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        String trimmedYearOfStudy \u003d yearOfStudy.trim();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Integer value;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            value \u003d Integer.parseUnsignedInt(trimmedYearOfStudy);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            if (value \u003c 0) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                throw new NumberFormatException();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            throw new ParseException(Messages.MESSAGE_INVALID_YEAR_OF_STUDY);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Parses a {@code String department} into a {@code Department}."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @throws ParseException if the given {@code department} is invalid."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static Department parseDepartment(String department) throws ParseException {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        requireNonNull(department);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        String trimmedDepartment \u003d department.trim();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        if (!Department.isValidDepartment(trimmedDepartment)) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            throw new ParseException(Department.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return new Department(trimmedDepartment);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e departments} into a {@code List\u003cDepartment\u003e}."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static List\u003cDepartment\u003e parseDepartments(Collection\u003cString\u003e departments) throws ParseException {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        requireNonNull(departments);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        final List\u003cDepartment\u003e departmentList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        for (String d: departments) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            departmentList.add(parseDepartment(d));"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return departmentList;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Parses a {@code String slot} into a {@code Slot}."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @throws ParseException if the given {@code slot} is invalid."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static Slot parseSlot(String slot) throws ParseException {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        requireNonNull(slot);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        String trimmedSlot \u003d slot.trim();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        if (!Slot.isValidSlot(trimmedSlot)) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            throw new ParseException(Slot.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        return Slot.fromString(trimmedSlot);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e slots} into a {@code List\u003cSlot\u003e}."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static List\u003cSlot\u003e parseSlots(Collection\u003cString\u003e slots) throws ParseException {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        requireNonNull(slots);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        final List\u003cSlot\u003e slotList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        for (String s: slots) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            slotList.add(parseSlot(s));"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return slotList;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mirozo": 15,
      "dcshzj": 13,
      "-": 100,
      "KendrickAng": 108
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/logic/parser/Prefix.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " * E.g. \u0027t/\u0027 in \u0027addEntity James t/ friend\u0027."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public Prefix(String prefix) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Prefix)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix otherPrefix \u003d (Prefix) obj;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 1,
      "-": 37,
      "KendrickAng": 1
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/logic/parser/ScheduleCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.commands.ScheduleCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.logic.commands.ScheduleCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": " * Parses user\u0027s input and creates a new ScheduleCommnad object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "public class ScheduleCommandParser implements Parser\u003cScheduleCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ScheduleCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * and returns a ScheduleCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public ScheduleCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        if (!userInput.trim().isEmpty()) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return new ScheduleCommand();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 20,
      "dcshzj": 7
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/logic/parser/exceptions/ParseException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a parse error encountered by a parser."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParseException extends IllegalValueException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 2,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/model/AppStatus.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "package seedu.scheduler.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": " * Encapsulates information related to the status(state) of the application."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "public class AppStatus {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private static AppStatus theOnlyOne \u003d null;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private boolean isScheduled \u003d false; // if the schedule algorithm has run or not"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private AppStatus() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public static AppStatus getInstance() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        if (theOnlyOne \u003d\u003d null) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            theOnlyOne \u003d new AppStatus();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return theOnlyOne;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public void setScheduled(boolean scheduled) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        isScheduled \u003d scheduled;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public boolean isScheduled() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return isScheduled;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 28
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/model/FilePath.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mirozo"
        },
        "content": "package seedu.scheduler.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import static seedu.scheduler.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mirozo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mirozo"
        },
        "content": " * Encapsulates a String representing the path of a file."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mirozo"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mirozo"
        },
        "content": "public class FilePath {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            \"File path is invalid. It must lead to a valid file with .csv extension.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    public static final String FILE_EXTENSION \u003d \"csv\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    public FilePath(String filePath) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        checkArgument(isValidFilePath(filePath), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        this.value \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    public String getValue() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     * Checks if {@code filePath} is valid."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     * @param filePath user input file path."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     * @return True if is valid, false otherwise."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    public static boolean isValidFilePath(String filePath) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        String[] parts \u003d filePath.split(\"\\\\.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            return parts[parts.length - 1].equals(FILE_EXTENSION) \u0026\u0026 !parts[parts.length - 2].equals(\"\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     * Checks if file exists."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     * @return boolean true if file exists, false otherwise"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    public boolean exists() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        File file \u003d new File(this.getValue());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        return file.exists();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                || (other instanceof FilePath // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                \u0026\u0026 value.equals(((FilePath) other).value)); // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mirozo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mirozo": 62
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/model/IntervieweeList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Interviewee;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dcshzj"
        },
        "content": " * Wraps all interviewee data at the scheduler-book level. Duplicates are not allowed (by Person#isSamePerson)."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dcshzj"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "public class IntervieweeList implements ReadAndWriteList\u003cInterviewee\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    private final UniquePersonList\u003cInterviewee\u003e interviewees;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public IntervieweeList() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        this.interviewees \u003d new UniquePersonList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public IntervieweeList(ReadOnlyList\u003cInterviewee\u003e book) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        resetData(book);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Adds the interviewee to the book. The interviewee must be unique."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @throws DuplicatePersonException if the interviewee already exists in the book."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public void addEntity(Interviewee interviewee) throws DuplicatePersonException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        interviewees.add(interviewee);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public Interviewee getEntity(Name name) throws PersonNotFoundException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Optional\u003cInterviewee\u003e i \u003d interviewees.asUnmodifiableObservableList().stream()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .filter(interviewee -\u003e interviewee.getName().equals(name))"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .findAny();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        if (!i.isPresent()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return i.get();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public void setEntity(Interviewee target, Interviewee editedTarget) throws PersonNotFoundException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        requireAllNonNull(target, editedTarget);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        interviewees.setPerson(target, editedTarget);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public void removeEntity(Interviewee interviewee) throws PersonNotFoundException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        interviewees.remove(interviewee);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public boolean hasEntity(Interviewee target) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return interviewees.contains(target);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public ObservableList\u003cInterviewee\u003e getEntityList() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return interviewees.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Replaces the contents of the interviewee list with {@code interviewees}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * {@code interviewees} must not contain duplicate interviewees."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public void setIntervieweeList(List\u003cInterviewee\u003e interviewees) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        this.interviewees.setPersons(interviewees);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Resets the underlying {@code UniquePersonList\u003cInterviewee\u003e} with that of the {@code book}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private void resetData(ReadOnlyList\u003cInterviewee\u003e book) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        requireNonNull(book);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        this.interviewees.setPersons(book.getEntityList());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Clears the allocated slot of all the interviewees"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public void clearAllAllocatedSlots() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        for (Interviewee interviewee : interviewees) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            interviewee.clearAllocatedSlot();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            interviewee.setEmailSent(false);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return interviewees.asUnmodifiableObservableList().size() + \" interviewees\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                || (other instanceof IntervieweeList// instanceof handles nulls"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                \u0026\u0026 interviewees.equals(((IntervieweeList) other).interviewees));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return interviewees.hashCode();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 10,
      "dcshzj": 63,
      "KendrickAng": 45
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/model/InterviewerList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Interviewer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " * Wraps all interviewee data in the model."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " * Duplicates are not allowed (by .isSamePerson comparison)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dcshzj"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "public class InterviewerList implements ReadAndWriteList\u003cInterviewer\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    private final UniquePersonList\u003cInterviewer\u003e interviewers;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public InterviewerList() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        this.interviewers \u003d new UniquePersonList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public InterviewerList(ReadOnlyList\u003cInterviewer\u003e book) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        resetData(book);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Adds the interviewer to the book. The interviewer must be unique."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @throws DuplicatePersonException if the interviewer already exists in the book."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public void addEntity(Interviewer interviewer) throws DuplicatePersonException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        interviewers.add(interviewer);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public void setEntity(Interviewer target, Interviewer editedTarget) throws PersonNotFoundException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        requireAllNonNull(target, editedTarget);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        interviewers.setPerson(target, editedTarget);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public Interviewer getEntity(Name name) throws PersonNotFoundException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Optional\u003cInterviewer\u003e i \u003d interviewers.asUnmodifiableObservableList().stream()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .filter(interviewer -\u003e interviewer.getName().equals(name))"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .findAny();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        if (!i.isPresent()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return i.get();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public void removeEntity(Interviewer interviewer) throws PersonNotFoundException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        interviewers.remove(interviewer);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public boolean hasEntity(Interviewer target) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return interviewers.contains(target);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public ObservableList\u003cInterviewer\u003e getEntityList() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return interviewers.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Replaces the contents of the interviewer list with {@code interviewers}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * {@code interviewers} must not contain duplicate interviewers."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public void setInterviewerList(List\u003cInterviewer\u003e interviewers) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        this.interviewers.setPersons(interviewers);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Resets the underlying {@code UniquePersonList\u003cInterviewer\u003e} with that of the {@code book}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private void resetData(ReadOnlyList\u003cInterviewer\u003e book) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        requireNonNull(book);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        this.interviewers.setPersons(book.getEntityList());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Clears the allocated slots of all interviewers."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public void clearAllAllocatedSlots() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        this.interviewers.forEach(Interviewer::clearAllocatedSlots);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return interviewers.asUnmodifiableObservableList().size() + \" interviewees\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                || (other instanceof InterviewerList// instanceof handles nulls"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                \u0026\u0026 interviewers.equals(((InterviewerList) other).interviewers));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return interviewers.hashCode();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 6,
      "mirozo": 1,
      "dcshzj": 61,
      "KendrickAng": 47
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/model/Model.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import seedu.scheduler.commons.exceptions.ScheduleException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Interviewee;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Interviewer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import seedu.scheduler.model.person.Slot;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.ui.RefreshListener;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "import seedu.scheduler.ui.TabListener;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    Predicate\u003cInterviewee\u003e PREDICATE_SHOW_ALL_INTERVIEWEES \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    Predicate\u003cInterviewer\u003e PREDICATE_SHOW_ALL_INTERVIEWERS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d App Status \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Sets the status whether the schedule command has been executed by the user. See @code{isScheduled} for more"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * details on when to set this status."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    void setScheduled(boolean scheduled);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Returns true if the scheduling command is executed by the user. Returns false if otherwise or the user import"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * interviewer\u0027s availability again after the scheduling command is executed."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    boolean isScheduled();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d IntervieweeList and InterviewerList \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    List\u003cSchedule\u003e getEmptyScheduleList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Replaces the list of IntervieweeList data with the data in {@code interviewees}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    void setIntervieweeList(List\u003cInterviewee\u003e interviewees);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Replaces the list of Interviewers data with the data in {@code interviewers}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    void setInterviewerList(List\u003cInterviewer\u003e interviewers);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Sets the user prefs\u0027 interviewee list file path."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    void setIntervieweeListFilePath(Path intervieweeListFilePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Sets the user pref\u0027s interviewer list file path."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    void setInterviewerListFilePath(Path interviewerListFilePath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Returns the user pref\u0027s interviewee list file path."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    Path getIntervieweeListFilePath();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Returns the user pref\u0027s interviewer list file path."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    Path getInterviewerListFilePath();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Returns the modifiable internal list of {@code Interviewee}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    ReadAndWriteList\u003cInterviewee\u003e getMutableIntervieweeList();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Returns the modifiable internal list of {@code Interviewer}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    ReadAndWriteList\u003cInterviewer\u003e getMutableInterviewerList();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Returns an unmodifiable list view of {@code Interviewee} backed by the internal {@code IntervieweeList}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @see Model#updateFilteredIntervieweeList(Predicate)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    ObservableList\u003cInterviewee\u003e getFilteredIntervieweeList();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Returns an unmodifiable list view of {@code Interviewer} backed by the internal {@code InterviewerList}."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @see Model#updateFilteredInterviewerList(Predicate)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    ObservableList\u003cInterviewer\u003e getFilteredInterviewerList();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Returns an unmodifiable list view of all {@code Interviewee}s backed by the internal {@code IntervieweeList}."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    ObservableList\u003cInterviewee\u003e getUnfilteredIntervieweeList();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Returns an unmodifiable list view of all {@code Interviewer}s backed by the internal {@code InterviewerList}."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    ObservableList\u003cInterviewer\u003e getUnfilteredInterviewerList();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Restricts the {@code ObservableList} of interviewee to display only what returns true on Predicate while"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * leaving the original {@code IntervieweeList} unmodified."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    void updateFilteredIntervieweeList(Predicate\u003cInterviewee\u003e predicate);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Restricts the {@code ObservableList} of interviewer to display only what returns true on Predicate while"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * leaving the original {@code InterviewerList} unmodified."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    void updateFilteredInterviewerList(Predicate\u003cInterviewer\u003e predicate);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Adds an interviewer to the model\u0027s {@code InterviewerList}. Must be unique."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    void addInterviewer(Interviewer interviewer);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Adds an interviewee to the model\u0027s {@code IntervieweeList}. Must be unique."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    void addInterviewee(Interviewee interviewee);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Returns true if an interviewee with the same identity exists in the interviewee list."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    boolean hasInterviewee(Interviewee interviewee);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Returns true if an interviewee with the same Name exists in the interviewee list."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    boolean hasInterviewee(Name name);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Returns true if an interviewer with the same identity exists in the interviewer list."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    boolean hasInterviewer(Interviewer interviewer);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Returns true if an interviewer with the same Name exists in the interviewer list."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    boolean hasInterviewer(Name name);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Returns an Interviewee given a name. The Interviewee must exist in the database, or an exception is thrown."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    Interviewee getInterviewee(String name) throws NoSuchElementException;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Returns an Interviewer given a name. The Interviewer must exist in the database, or an exception is thrown."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    Interviewer getInterviewer(String name) throws NoSuchElementException;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Deletes the interviewee from the {@code IntervieweeList}. An exception is thrown if {@code target} is not found."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    void deleteInterviewee(Interviewee target) throws PersonNotFoundException;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Deletes the interviewer from the {@code InterviewerList}. An exception is thrown if {@code target} is not found."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    void deleteInterviewer(Interviewer target) throws PersonNotFoundException;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Edits the interviewee with the {@code editedTarget}. An exception is thrown if {@code target} is not found."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    void setInterviewee(Interviewee target, Interviewee editedTarget) throws PersonNotFoundException;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Edits the interviewer with the {@code editedTarget}. An exception is thrown if {@code target} is not found."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    void setInterviewer(Interviewer target, Interviewer editedTarget) throws PersonNotFoundException;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Mass Email \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Emails the given Interviewee."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * The Interviewee must exist in the database."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    void emailInterviewee(Interviewee interviewee) throws IOException;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Refresh Listener \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     * Add a refresh listener to listen to changes of Schedule data."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    void addRefreshListener(RefreshListener listener);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * Add a tabListener to change tab when command is given."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    void addTabListener(TabListener tabListener);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Tab Change \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    void intervieweeTabChange();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    void interviewerTabChange();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    void scheduleTabChange();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Schedule \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Generates a list of empty schedules from the current list of interviewers."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    void setEmptyScheduleList() throws ParseException;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Replaces schedule data with the data in {@code schedule}."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    void setSchedulesList(List\u003cSchedule\u003e schedulesList);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Returns the interview slot allocated to the interviewee with the {@code intervieweeName}."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    Optional\u003cSlot\u003e getAllocatedSlot(String intervieweeName);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /** Returns a list of observable list of the schedules **/"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    List\u003cObservableList\u003cObservableList\u003cString\u003e\u003e\u003e getObservableLists();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /** Returns the schedulesList **/"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    List\u003cSchedule\u003e getSchedulesList();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /** Returns a list of lists of column titles, each list of column titles belong to a Schedule table*/"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    List\u003cList\u003cString\u003e\u003e getTitlesLists();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Updates the schedules after schedule command is executed by placing the interviewees into their allocated slot."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     **/"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    void updateSchedulesAfterScheduling() throws ScheduleException;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d User Prefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Resets the relevant data before running a schedule command."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    void resetDataBeforeScheduling();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 49,
      "mrchensheng21": 13,
      "mirozo": 16,
      "dcshzj": 51,
      "-": 48,
      "KendrickAng": 94
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/model/ModelManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.commands.EmailCommand.EMAIL_MESSAGE_BODY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import java.awt.Desktop;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import java.io.UnsupportedEncodingException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import java.net.URI;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import java.net.URLEncoder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import seedu.scheduler.commons.exceptions.ScheduleException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Department;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Interviewee;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Interviewer;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Name;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Slot;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.ui.RefreshListener;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "import seedu.scheduler.ui.TabListener;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": " * Represents the in-memory model of the schedule table data."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private static List\u003cSchedule\u003e emptyScheduleList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private final AppStatus appStatus;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private final List\u003cSchedule\u003e schedulesList;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private final IntervieweeList intervieweeList; // functionality not stable, refrain from using"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private final InterviewerList interviewerList;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private final FilteredList\u003cInterviewee\u003e filteredInterviewees; // if we want to display all interviewees on UI"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private final FilteredList\u003cInterviewer\u003e filteredInterviewers; // if we want to display all inteviewers on UI"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    private RefreshListener refreshListener;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    private TabListener tabListener;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * Initializes a ModelManager with the given intervieweeList, interviewerList, userPrefs and schedulesList."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public ModelManager(ReadOnlyList\u003cInterviewee\u003e intervieweeList, ReadOnlyList\u003cInterviewer\u003e interviewerList,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                        ReadOnlyUserPrefs userPrefs, List\u003cSchedule\u003e schedulesList) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        requireAllNonNull(intervieweeList, interviewerList, userPrefs, schedulesList);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        logger.fine(\"Initialising with list of interviewees: \" + intervieweeList"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                + \", list of interviewers: \" + interviewerList"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                + \", user prefs: \" + userPrefs"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                + \" and schedules list: \" + schedulesList"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        );"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        this.intervieweeList \u003d new IntervieweeList(intervieweeList);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        this.interviewerList \u003d new InterviewerList(interviewerList);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        filteredInterviewees \u003d new FilteredList\u003c\u003e(this.intervieweeList.getEntityList());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        filteredInterviewers \u003d new FilteredList\u003c\u003e(this.interviewerList.getEntityList());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        this.schedulesList \u003d cloneSchedulesList(schedulesList);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        this.appStatus \u003d AppStatus.getInstance();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        this(new IntervieweeList(), new InterviewerList(), new UserPrefs(), new LinkedList\u003c\u003e());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AppStatus \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public void setScheduled(boolean scheduled) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        this.appStatus.setScheduled(scheduled);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public boolean isScheduled() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return this.appStatus.isScheduled();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d IntervieweeList and InterviewerList \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public void setIntervieweeList(List\u003cInterviewee\u003e interviewees) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        logger.fine(\"Updating list of interviewees: \" + interviewees);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        this.intervieweeList.setIntervieweeList(interviewees);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public void setInterviewerList(List\u003cInterviewer\u003e interviewers) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        logger.fine(\"Updating list of interviewers: \" + interviewers);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        this.interviewerList.setInterviewerList(interviewers);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public void setIntervieweeListFilePath(Path intervieweeListFilePath) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        requireNonNull(intervieweeListFilePath);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        userPrefs.setIntervieweeListFilePath(intervieweeListFilePath);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public void setInterviewerListFilePath(Path interviewerListFilePath) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        requireNonNull(interviewerListFilePath);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        userPrefs.setInterviewerListFilePath(interviewerListFilePath);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public Path getIntervieweeListFilePath() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return userPrefs.getIntervieweeListFilePath();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public Path getInterviewerListFilePath() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return userPrefs.getInterviewerListFilePath();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public void addInterviewee(Interviewee interviewee) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        intervieweeList.addEntity(interviewee);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public boolean hasInterviewee(Interviewee interviewee) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return intervieweeList.hasEntity(interviewee);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public boolean hasInterviewee(Name name) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            intervieweeList.getEntity(name);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        } catch (PersonNotFoundException e) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public boolean hasInterviewer(Interviewer interviewer) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return interviewerList.hasEntity(interviewer);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public boolean hasInterviewer(Name name) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            interviewerList.getEntity(name);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        } catch (PersonNotFoundException e) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public void addInterviewer(Interviewer interviewer) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        interviewerList.addEntity(interviewer);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        this.updateScheduleList();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Gets the model\u0027s underlying IntervieweeList. For testing purposes only."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public IntervieweeList getIntervieweeList() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return this.intervieweeList;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Gets the model\u0027s underlying InterviewerList. For testing purposes only."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public InterviewerList getInterviewerList() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return this.interviewerList;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public ReadAndWriteList\u003cInterviewee\u003e getMutableIntervieweeList() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return intervieweeList;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public ReadAndWriteList\u003cInterviewer\u003e getMutableInterviewerList() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return interviewerList;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public ObservableList\u003cInterviewee\u003e getFilteredIntervieweeList() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return filteredInterviewees;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public ObservableList\u003cInterviewer\u003e getFilteredInterviewerList() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return filteredInterviewers;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public ObservableList\u003cInterviewee\u003e getUnfilteredIntervieweeList() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        updateFilteredIntervieweeList(PREDICATE_SHOW_ALL_INTERVIEWEES);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return getFilteredIntervieweeList();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public ObservableList\u003cInterviewer\u003e getUnfilteredInterviewerList() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        updateFilteredInterviewerList(PREDICATE_SHOW_ALL_INTERVIEWERS);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return getFilteredInterviewerList();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public void updateFilteredIntervieweeList(Predicate\u003cInterviewee\u003e predicate) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        filteredInterviewees.setPredicate(predicate);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public void updateFilteredInterviewerList(Predicate\u003cInterviewer\u003e predicate) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        filteredInterviewers.setPredicate(predicate);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public Interviewee getInterviewee(String name) throws NoSuchElementException {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return intervieweeList.getEntity(new Name(name));"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public Interviewer getInterviewer(String name) throws NoSuchElementException {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return interviewerList.getEntity(new Name(name));"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public void deleteInterviewee(Interviewee target) throws PersonNotFoundException {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        intervieweeList.removeEntity(target);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        this.updateScheduleList();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public void deleteInterviewer(Interviewer target) throws PersonNotFoundException {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        interviewerList.removeEntity(target);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        this.updateScheduleList();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public void setInterviewee(Interviewee target, Interviewee editedTarget) throws PersonNotFoundException {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        intervieweeList.setEntity(target, editedTarget);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public void setInterviewer(Interviewer target, Interviewer editedTarget) throws PersonNotFoundException {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        interviewerList.setEntity(target, editedTarget);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Mass Email \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public void emailInterviewee(Interviewee interviewee) throws IOException {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        Desktop desktop \u003d Desktop.getDesktop();"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        String intervieweeEmails \u003d interviewee.getEmails().getAllEmails().values().stream()"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                .map((x) -\u003e {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                    StringBuilder output \u003d new StringBuilder();"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                    for (int i \u003d 0; i \u003c x.size(); i++) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                        output.append(x.get(i));"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                        output.append(\"; \");"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                    if (output.length() !\u003d 0) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                        output.delete(output.length() - 2, output.length());"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                    return output.toString();"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                })"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                .reduce((x, y) -\u003e x + \"; \" + y).get();"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        String ccEmails \u003d this.userPrefs.getCcEmails().stream()"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                .reduce((x, y) -\u003e x + \"; \" + y)"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                .get();"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        String sb \u003d \"mailto:\""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                + encodeForEmail(intervieweeEmails)"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                + \"?cc\u003d\" + encodeForEmail(ccEmails)"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                + \"\u0026subject\u003d\""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                + encodeForEmail(this.userPrefs.getEmailSubject())"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                + \"\u0026body\u003d\""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                + encodeForEmail(getEmailBody(interviewee));"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        URI uri \u003d URI.create(sb);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        desktop.mail(uri);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * This method encodes the given String into a format that can be used to generate the email message"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * contents."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * @param input The String to encode"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * @return The encoded message"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public String encodeForEmail(String input) {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            return URLEncoder.encode(input,"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                    java.nio.charset.StandardCharsets.UTF_8.toString()).replace(\"+\", \"%20\");"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        } catch (UnsupportedEncodingException e) {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public String getEmailBody(Interviewee interviewee) {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        // TODO: Uncomment after \"schedule\" command is implemented!"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        // String slots \u003d this.getInterviewSlots(interviewee.getName().toString()).stream()"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        //         .map(Slot::toString)"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        //         .reduce((x, y) -\u003e x + \", \" + y)"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        //         .get();"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        Optional\u003cSlot\u003e allocatedSlot \u003d this.getAllocatedSlot(interviewee.getName().toString());"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        String slot \u003d \"\";"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        if (allocatedSlot.isPresent()) {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            slot \u003d allocatedSlot.get().toString();"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        return String.format(EMAIL_MESSAGE_BODY, interviewee.getName(), this.userPrefs.getOrganisation(),"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                slot, this.userPrefs.getInterviewLocation(), this.userPrefs.getEmailAdditionalInformation());"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Refresh Listener \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    public void addRefreshListener(RefreshListener listener) {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        this.refreshListener \u003d listener;"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    public void addTabListener(TabListener tabListener) {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        this.tabListener \u003d tabListener;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Schedule \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    public void setEmptyScheduleList() throws ParseException {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        emptyScheduleList \u003d this.generateEmptyScheduleList();"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    public List\u003cSchedule\u003e getEmptyScheduleList() {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        return emptyScheduleList;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Generates an empty schedule list from the current interviewer list. Used to generate GUI after user imports data"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * and also before the user runs a schedule command."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     * @return ArrayList of {@Code Schedule}"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     * @throws ParseException when timings are not of HH:mm format"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    public ArrayList\u003cSchedule\u003e generateEmptyScheduleList() throws ParseException {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        ArrayList\u003cSchedule\u003e emptyScheduleList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        HashSet\u003cString\u003e dates \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        String startTime \u003d userPrefs.getStartTime();"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        String endTime \u003d userPrefs.getEndTime();"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        int duration \u003d userPrefs.getDurationPerSlot();"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        ObservableList\u003cInterviewer\u003e listOfInterviewers \u003d interviewerList.getEntityList();"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        for (Interviewer interviewer: listOfInterviewers) {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            List\u003cSlot\u003e availabilities \u003d interviewer.getAvailabilities();"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            for (Slot slot: availabilities) {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                String date \u003d slot.date;"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                dates.add(date);"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        ArrayList\u003cString\u003e headers \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        for (Interviewer interviewer: listOfInterviewers) {"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            Name name \u003d interviewer.getName();"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            Department department \u003d interviewer.getDepartment();"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            headers.add(stringifyHeadersForTable(name, department));"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        ArrayList\u003cString\u003e datesList \u003d new ArrayList\u003c\u003e(dates);"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        for (String date: datesList) {"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            LinkedList\u003cLinkedList\u003cString\u003e\u003e table \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            LinkedList\u003cString\u003e fullHeader \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            fullHeader.add(date);"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            for (String header: headers) {"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                fullHeader.add(header);"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            table.add(fullHeader);"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            String currentTime \u003d startTime;"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            while (!isGreaterThanOrEqual(currentTime, endTime)) {"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                LinkedList\u003cString\u003e row \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                String nextTimeSlot \u003d addTime(duration, currentTime);"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                row.add(currentTime + \"-\" + nextTimeSlot);"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                Slot currentSlot \u003d new Slot(date, currentTime, nextTimeSlot);"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                for (int i \u003d 0; i \u003c listOfInterviewers.size(); i++) {"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                    Interviewer currentInterviewer \u003d listOfInterviewers.get(i);"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                    if (currentInterviewer.isAvailable(currentSlot)) {"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                        row.add(\"1\");"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                        row.add(\"0\");"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                }"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                currentTime \u003d nextTimeSlot;"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                table.add(row);"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            emptyScheduleList.add(new Schedule(date, table));"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        return emptyScheduleList;"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     * Adds the given duration to the given time."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     * @param duration amount of time to add"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     * @param currentTime original time"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     * @return String result after addition"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     * @throws ParseException when String currentTime is not of HH:mm format"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    public static String addTime(int duration, String currentTime) throws ParseException {"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        SimpleDateFormat dateFormat \u003d new SimpleDateFormat(\"HH:mm\");"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        Date date \u003d dateFormat.parse(currentTime);"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        Calendar cal \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        cal.setTime(date);"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        cal.add(Calendar.MINUTE, duration);"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        String newTime \u003d dateFormat.format(cal.getTime());"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        return newTime;"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     * Compares 2 given times as String in format HH:mm, and returns true if the first is greater than the second."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     * @param currentTime"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     * @param endTime"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     * @return True if currentTime is greater or equals to endTime"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    public static boolean isGreaterThanOrEqual(String currentTime, String endTime) throws ParseException {"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        SimpleDateFormat dateFormat \u003d new SimpleDateFormat(\"HH:mm\");"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        Date currentTimeAsDate \u003d dateFormat.parse(currentTime);"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        Date endTimeAsDate \u003d dateFormat.parse(endTime);"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        return currentTimeAsDate.after(endTimeAsDate) || currentTimeAsDate.equals(endTimeAsDate);"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     * Static method to combine name and department into one string used for headers."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     * @param name"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     * @param department"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     * @return Header as String"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    public static String stringifyHeadersForTable(Name name, Department department) {"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        return department.toString() + \" - \" + name.toString();"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     * Replaces schedule data with the data in {@code schedule}."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     * @param list"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    public void setSchedulesList(List\u003cSchedule\u003e list) {"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        schedulesList.clear();"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        schedulesList.addAll(cloneSchedulesList(list));"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        if (refreshListener !\u003d null) {"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            refreshListener.scheduleDataUpdated();"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        logger.fine(\"Schedules list is reset\");"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    public void intervieweeTabChange() {"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        if (tabListener !\u003d null) {"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            tabListener.changeTabInterviewee();"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        }"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    public void interviewerTabChange() {"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        if (tabListener !\u003d null) {"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            tabListener.changeTabInterviewer();"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        }"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    public void scheduleTabChange() {"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        if (tabListener !\u003d null) {"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            tabListener.changeTabSchedule();"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        }"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     * Updates schedule list with an empty schedule list."
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    public void updateScheduleList() {"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            this.setEmptyScheduleList();"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            List\u003cSchedule\u003e schedules \u003d this.getEmptyScheduleList();"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            this.setSchedulesList(schedules);"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            logger.log(Level.WARNING, \"Should not have exceptions\");"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Returns the interview slot allocated to the interviewee with the {@code intervieweeName}."
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public Optional\u003cSlot\u003e getAllocatedSlot(String intervieweeName) {"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return intervieweeList.getEntity(new Name(intervieweeName)).getAllocatedSlot();"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Returns a list of observable list of the schedules."
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public List\u003cObservableList\u003cObservableList\u003cString\u003e\u003e\u003e getObservableLists() {"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        List\u003cObservableList\u003cObservableList\u003cString\u003e\u003e\u003e observableLists \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        for (Schedule schedule : schedulesList) {"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            observableLists.add(schedule.getObservableList());"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return observableLists;"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     * Adds the given interviewer to schedule(s) in which the interviewer\u0027s availability fall."
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     * If the interviewer\u0027s availability does not fall within any of the schedule, then the interviewer will not"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     * be added into any of the schedule."
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public List\u003cSchedule\u003e getSchedulesList() {"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return schedulesList;"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public List\u003cList\u003cString\u003e\u003e getTitlesLists() {"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        List\u003cList\u003cString\u003e\u003e titlesLists \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        for (Schedule schedule : schedulesList) {"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            titlesLists.add(schedule.getTitles());"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return titlesLists;"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public void updateSchedulesAfterScheduling() throws ScheduleException {"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        List\u003cInterviewer\u003e interviewers \u003d interviewerList.getEntityList();"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        for (Interviewer interviewer : interviewers) {"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            for (Schedule schedule : schedulesList) {"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                schedule.addAllocatedInterviewees(interviewer, interviewer.getAllocatedSlots());"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        if (refreshListener !\u003d null) {"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            refreshListener.scheduleDataUpdated();"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Returns the deep copy of the schedules list given."
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @param list the list of schedules to be copied."
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @return the deep copy of the schedules list given."
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private static List\u003cSchedule\u003e cloneSchedulesList(List\u003cSchedule\u003e list) {"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        List\u003cSchedule\u003e listClone \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        for (Schedule schedule : list) {"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            listClone.add(Schedule.cloneSchedule(schedule));"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return listClone;"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d User Prefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public void resetDataBeforeScheduling() {"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        // Clear all allocated slots"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        this.intervieweeList.clearAllAllocatedSlots();"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        this.interviewerList.clearAllAllocatedSlots();"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        // Clear the interviewees from the schedule"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        for (Schedule schedule : schedulesList) {"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            schedule.clearAllocatedInterviewees();"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        logger.info(\"Clear all allocated slots\");"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                \u0026\u0026 intervieweeList.equals(other.intervieweeList)"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                \u0026\u0026 interviewerList.equals(other.interviewerList)"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                \u0026\u0026 filteredInterviewees.equals(other.filteredInterviewees)"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                \u0026\u0026 filteredInterviewers.equals(other.filteredInterviewers);"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 91,
      "mrchensheng21": 26,
      "mirozo": 151,
      "dcshzj": 134,
      "-": 61,
      "KendrickAng": 166
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/model/ReadAndWriteList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Name;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Person;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " * Address book that behaves like a list."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " * @param \u003cT\u003e Interviewee or Interviewer."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "public interface ReadAndWriteList\u003cT extends Person\u003e extends ReadOnlyList\u003cT\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Adds an entity to the book. This book will not contain duplicates."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    void addEntity(T person);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Edits the target entity with details from the {@code editedTarget}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @throws PersonNotFoundException if the target does not exist in the list."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    void setEntity(T target, T editedTarget) throws PersonNotFoundException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Removes the entity with specified name from the list. The entity must exist in the list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @throws PersonNotFoundException if the person does not exist in the list."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    void removeEntity(T person) throws PersonNotFoundException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Returns true if the list contains {@code targe}, false otherwise."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    boolean hasEntity(T target);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Gets the entity with specified name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @throws PersonNotFoundException if nobody with the name exists."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    T getEntity(Name name) throws PersonNotFoundException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 4,
      "KendrickAng": 37
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/model/ReadOnlyList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Person;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " * Represents a List of Interviewees/Interviewers that can only be read."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "public interface ReadOnlyList\u003cT extends Person\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Returns an unmodifiable view of the Interviewer/Interviewee list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * This list will not contain any duplicate Interviewers/Interviewees."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    ObservableList\u003cT\u003e getEntityList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 2,
      "KendrickAng": 15
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/model/ReadOnlyUserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    Path getIntervieweeListFilePath();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    Path getInterviewerListFilePath();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    String getStartTime();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    String getEndTime();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    int getDurationPerSlot();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    String getOrganisation();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    String getInterviewLocation();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    List\u003cString\u003e getCcEmails();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    String getEmailSubject();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    String getEmailAdditionalInformation();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 22,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/model/Schedule.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import java.util.ListIterator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import seedu.scheduler.commons.exceptions.ScheduleException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import seedu.scheduler.model.person.Interviewee;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import seedu.scheduler.model.person.IntervieweeSlot;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Interviewer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Slot;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": " * Represents the interview schedule."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": " * The first row of the Schedule is the column titles, with the first cell as the date of the interview schedule."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": " * Subsequent rows are time slots, with the first cell of each row as the timing of all the time slots in the row."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "public class Schedule {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private static String columnTitleFormat \u003d \"%s - %s\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private String date;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private ObservableList\u003cString\u003e titles;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private ObservableList\u003cObservableList\u003cString\u003e\u003e data; // EXCLUDE the first row which is the column titles"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public Schedule(String date, LinkedList\u003cLinkedList\u003cString\u003e\u003e list) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        ObservableList\u003cObservableList\u003cString\u003e\u003e table \u003d toTwoDimensionalObservableList(list);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        if (table.isEmpty()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            this.titles \u003d FXCollections.observableList(new LinkedList\u003c\u003e());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            this.titles \u003d table.remove(0); // separate the first row out which is the column titles."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        this.data \u003d table;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private Schedule() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public ObservableList\u003cString\u003e getTitles() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return titles;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public ObservableList\u003cObservableList\u003cString\u003e\u003e getObservableList() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return data;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public List\u003cSlot\u003e getInterviewSlots(String intervieweeName) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        List\u003cSlot\u003e slots \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        int tableSize \u003d data.size();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        // Need to search the first row as well because now the first row of data(table) is not the titles,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        // it is data."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        for (int i \u003d 0; i \u003c tableSize; i++) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            ObservableList\u003cString\u003e row \u003d data.get(i);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            int rowSize \u003d row.size();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            // Exclude search in the first cell as the first cell is the time slot"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            for (int j \u003d 1; j \u003c rowSize; j++) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                String value \u003d row.get(j);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                if (\"NA\".equals(value)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                } else if (intervieweeName.equals(value)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                    String timeSlot \u003d row.get(0);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                    String[] times \u003d timeSlot.split(\"-\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                    String start \u003d times[0].trim();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                    String end \u003d times[1].trim();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                    slots.add(new Slot(date, start, end));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return slots;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Clears all the interviewees in the schedule."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public void clearAllocatedInterviewees() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        for (ObservableList\u003cString\u003e row : data) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            if (row.size() \u003c 2) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            int size \u003d row.size();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            ListIterator\u003cString\u003e iterator \u003d row.listIterator();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            iterator.next();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            for (int i \u003d 1; i \u003c size; i++) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                String value \u003d iterator.next();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                if (!value.equals(\"0\") \u0026\u0026 !value.equals(\"1\")) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                    iterator.set(\"1\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Adds all the interviewees that the interviewer will be interviewing into the schedule. An interviewee will only"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * be added if the date and timing that it will be interviewed falls in this schedule, as well as the interviewer."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * The slot that the interviewee to be added into must be available too, i.e. must be \"1\" and not \"0\", else a"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * ScheduleException will be thrown."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public void addAllocatedInterviewees(Interviewer interviewer, List\u003cIntervieweeSlot\u003e slots)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            throws ScheduleException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        for (IntervieweeSlot intervieweeSlot : slots) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            addAllocatedInterviewee(interviewer, intervieweeSlot.getInterviewee(), intervieweeSlot.getSlot());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Adds the given interviewee into the schedule, refer the description of @code{allAllocatedInterviewees} for more"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * details."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private void addAllocatedInterviewee(Interviewer interviewer, Interviewee interviewee, Slot slot)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            throws ScheduleException {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        if (!slot.date.equals(this.date)) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        // Locate interviewer and slot"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        int columnIndex \u003d locateInterviewer(interviewer);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        int rowIndex \u003d locateSlot(slot);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        // If interviewer or slot is not present in the schedule"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        if (columnIndex \u003d\u003d -1 || rowIndex \u003d\u003d -1) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        ObservableList\u003cString\u003e row \u003d data.get(rowIndex);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        if (!row.get(columnIndex).equals(\"1\")) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            throw new ScheduleException(\"Slot where an interviewer is to be added is not labelled as 1,\""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                    + \" i.e. not available!\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        row.set(columnIndex, interviewee.getName().toString());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Returns the index of the column at which the interviewer is located if the interviewer is present in"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * the schedule, otherwise returns -1."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private int locateInterviewer(Interviewer interviewer) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        String columnTitle \u003d generateColumnTitle(interviewer);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return titles.indexOf(columnTitle);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Returns the index of the row where the slot is located based on its timing if the slot is present in the schedule"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * , otherwise returns -1."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private int locateSlot(Slot slot) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        int rowIndex \u003d -1;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        int size \u003d data.size();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        // Search through the date of all the rows"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        for (int i \u003d 0; i \u003c size; i++) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            String currTime \u003d data.get(i).get(0);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            if (currTime.equals(slot.getTiming())) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                rowIndex \u003d i;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return rowIndex;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Returns true if an interviewer exists in the Schedule."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public boolean hasInterviewer(Interviewer interviewer) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        String columnTitle \u003d generateColumnTitle(interviewer);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        boolean found \u003d false;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        for (String title : titles) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            if (title.equals(columnTitle)) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                found \u003d true;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return found;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Returns the corresponding column title of the given interviewer."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public String generateColumnTitle(Interviewer interviewer) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return String.format(columnTitleFormat, interviewer.getDepartment().toString(),"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            interviewer.getName().toString());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public boolean equals(Object s) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        if (!(s instanceof Schedule)) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Schedule sCasted \u003d (Schedule) s;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return date.equals(sCasted.date)"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            \u0026\u0026 titles.equals(sCasted.titles)"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            \u0026\u0026 data.equals(sCasted.data);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Returns a copy of the @code{Schedule} object given."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public static Schedule cloneSchedule(Schedule schedule) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Schedule clone \u003d new Schedule();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        clone.date \u003d String.valueOf(schedule.date);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        clone.titles \u003d cloneRow(schedule.titles);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        clone.data \u003d cloneTable(schedule.data);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return clone;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Returns an independent deep copy of the table given in observable list form."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private static ObservableList\u003cObservableList\u003cString\u003e\u003e cloneTable(ObservableList\u003cObservableList\u003cString\u003e\u003e table) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        ObservableList\u003cObservableList\u003cString\u003e\u003e tableClone \u003d FXCollections.observableList(new LinkedList\u003c\u003e());"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        for (ObservableList\u003cString\u003e row : table) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            ObservableList\u003cString\u003e rowClone \u003d cloneRow(row);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            tableClone.add(rowClone);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return tableClone;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Returns an independent deep copy of the row given in observable list form."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private static ObservableList\u003cString\u003e cloneRow(ObservableList\u003cString\u003e row) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        ObservableList\u003cString\u003e rowClone \u003d FXCollections.observableList(new LinkedList\u003c\u003e());"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        for (String string : row) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            rowClone.add(String.valueOf(string));"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return rowClone;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Convert a two-dimensional LinkedList into a two-dimensional Observable list."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public static ObservableList\u003cObservableList\u003cString\u003e\u003e toTwoDimensionalObservableList("
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        LinkedList\u003cLinkedList\u003cString\u003e\u003e list) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        LinkedList\u003cObservableList\u003cString\u003e\u003e clone \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        // Shallow copy can be used here as String is immutable."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        list.forEach(row -\u003e {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            LinkedList\u003cString\u003e rowCopy \u003d (LinkedList\u003cString\u003e) row.clone();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            clone.add(FXCollections.observableList(rowCopy));"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        });"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return FXCollections.observableList(clone);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        StringBuilder builder \u003d new StringBuilder(450);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        // Append the title rows"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        String titleRep \u003d rowToString(titles);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        builder.append(titleRep);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        // Append the other rows"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        for (ObservableList\u003cString\u003e row : data) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            String rowRep \u003d rowToString(row);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            builder.append(rowRep);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Convert a row to its string representation (each value separated by a comma, then the row ends with"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * a newline character."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private String rowToString(List\u003cString\u003e row) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        StringBuilder builder \u003d new StringBuilder(110);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        for (String value : row) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            builder.append(value);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            builder.append(\",\");"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        builder.append(\"\\n\");"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 286,
      "dcshzj": 3
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/model/UserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    private Path intervieweeListFilePath \u003d Paths.get(\"data\", \"interviewees.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    private Path interviewerListFilePath \u003d Paths.get(\"data\", \"interviewers.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    private String startTime \u003d \"10:00\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    private String endTime \u003d \"21:00\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    private int durationPerSlot \u003d 30;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    private String organisation \u003d \"Committee of Schedulers\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    private String interviewLocation \u003d \"Level 3, Block YI2\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    private List\u003cString\u003e ccEmails \u003d Arrays.asList(\"test@example.com\", \"president@comsch.invalid.tld\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    private String emailSubject \u003d \"Committee of Schedulers (ComSch) Interview\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    private String emailAdditionalInformation \u003d \"Thank you.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        setIntervieweeListFilePath(newUserPrefs.getIntervieweeListFilePath());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        setInterviewerListFilePath(newUserPrefs.getInterviewerListFilePath());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        setDurationPerSlot(newUserPrefs.getDurationPerSlot());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        setStartTime(newUserPrefs.getStartTime());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        setEndTime(newUserPrefs.getEndTime());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        setCcEmails(newUserPrefs.getCcEmails());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        setEmailAdditionalInformation(newUserPrefs.getEmailAdditionalInformation());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public Path getIntervieweeListFilePath() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        return this.intervieweeListFilePath;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public Path getInterviewerListFilePath() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        return this.interviewerListFilePath;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    public String getStartTime() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        return this.startTime;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    public String getEndTime() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        return this.endTime;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    public int getDurationPerSlot() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        return this.durationPerSlot;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    public void setDurationPerSlot(int durationPerSlot) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        this.durationPerSlot \u003d durationPerSlot;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    public void setEndTime(String endTime) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    public void setStartTime(String startTime) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public void setIntervieweeListFilePath(Path intervieweeListFilePath) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        requireNonNull(intervieweeListFilePath);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        this.intervieweeListFilePath \u003d intervieweeListFilePath;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public void setInterviewerListFilePath(Path interviewerListFilePath) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        requireNonNull(interviewerListFilePath);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        this.interviewerListFilePath \u003d interviewerListFilePath;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public String getOrganisation() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        return this.organisation;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public void setOrganisation(String organisation) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        this.organisation \u003d organisation;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public String getInterviewLocation() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        return this.interviewLocation;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public void setInterviewLocation(String interviewLocation) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        this.interviewLocation \u003d interviewLocation;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public List\u003cString\u003e getCcEmails() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        return this.ccEmails;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public void setCcEmails(List\u003cString\u003e ccEmails) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        this.ccEmails \u003d ccEmails;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public String getEmailSubject() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        return this.emailSubject;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public void setEmailSubject(String emailSubject) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        this.emailSubject \u003d emailSubject;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public String getEmailAdditionalInformation() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        return this.emailAdditionalInformation;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public void setEmailAdditionalInformation(String emailAdditionalInformation) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        this.emailAdditionalInformation \u003d emailAdditionalInformation;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                \u0026\u0026 this.intervieweeListFilePath.equals(o.intervieweeListFilePath)"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                \u0026\u0026 this.interviewerListFilePath.equals(o.interviewerListFilePath);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        return Objects.hash(guiSettings, intervieweeListFilePath, interviewerListFilePath);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        sb.append(\"\\nLocal interviewee data file location : \" + intervieweeListFilePath);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        sb.append(\"\\nLocal interviewer data file location : \" + interviewerListFilePath);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        sb.append(\"\\nStart Time : \" + startTime);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        sb.append(\"\\nEnd Time : \" + endTime);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        sb.append(\"\\nDuration per slot : \" + durationPerSlot);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        sb.append(\"\\nOrganisation name : \" + organisation);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        sb.append(\"\\nInterview location : \" + interviewLocation);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        sb.append(\"\\nCc emails : \" + ccEmails.toString());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        sb.append(\"\\nEmail subject : \" + emailSubject);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        sb.append(\"\\nAdditional information : \" + emailAdditionalInformation);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mirozo": 27,
      "dcshzj": 96,
      "-": 75
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/model/person/DefaultValues.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.Schedule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.tag.Tag;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " * A utility class containing all default values for the model."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "public class DefaultValues {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    // Person"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final Name DEFAULT_NAME \u003d new Name(\"John Doe\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final Phone DEFAULT_PHONE \u003d new Phone(\"88888888\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final Set\u003cTag\u003e DEFAULT_TAGS \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    // Interviewee"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final Role DEFAULT_INTERVIEWEE_ROLE \u003d new Role(\"interviewee\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final Email DEFAULT_PERSONAL_EMAIL \u003d new Email(\"john_doe@gmail.com\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final Email DEFAULT_NUS_WORK_EMAIL \u003d new Email(\"john_doe@u.nus.edu\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final Emails DEFAULT_EMAILS \u003d new Emails()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .addPersonalEmail(DEFAULT_PERSONAL_EMAIL)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .addNusEmail(DEFAULT_NUS_WORK_EMAIL);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final Faculty DEFAULT_FACULTY \u003d new Faculty(\"School of Computing\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final Integer DEFAULT_YEAR_OF_STUDY \u003d 2019;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public static final Slot DEFAULT_SLOT \u003d Slot.fromString(\"17/10/2019 13:00-14:00\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final List\u003cDepartment\u003e DEFAULT_DEPARTMENTS \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final List\u003cSlot\u003e DEFAULT_TIMESLOTS \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    // Interviewer"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final Role DEFAULT_INTERVIEWER_ROLE \u003d new Role(\"interviewer\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final List\u003cSchedule\u003e DEFAULT_SCHEDULES \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final Department DEFAULT_DEPARTMENT \u003d new Department(\"Marketing\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mirozo": 2,
      "dcshzj": 4,
      "KendrickAng": 32
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/model/person/Department.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " * Represents an {@code Interviewee}\u0027s choice of department in the scheduler."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "public class Department {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            \"Departments can take any values, but should not be blank.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            + \"Examples:\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            + \"Correct: \u0027Logistics\u0027\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            + \"Incorrect: \u0027 \u0027\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\"; // \" \" will be wrong"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public final String department;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Constructs a {@code Department}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @param department a valid department."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public Department(String department) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        requireNonNull(department);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        checkArgument(isValidDepartment(department), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        this.department \u003d department;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Returns true if the given string is a valid department."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static boolean isValidDepartment(String test) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return department;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                || (other instanceof Department // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                \u0026\u0026 department.equals(((Department) other).department)); // state check"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return department.hashCode();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 2,
      "KendrickAng": 52
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/model/person/Email.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dcshzj"
        },
        "content": " * Represents a Person\u0027s email in the scheduler book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Email {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Emails should be of the format local-part@domain \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"and adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \") .\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"2. This is followed by a \u0027@\u0027 and then a domain name. \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"The domain name must:\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - be at least 2 characters long\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - start and end with alphanumeric characters\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - consist of alphanumeric characters, a period or a hyphen for the characters in between, if any.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    // alphanumeric and special characters"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOCAL_PART_REGEX \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_FIRST_CHARACTER_REGEX \u003d \"[^\\\\W_]\"; // alphanumeric characters except underscore"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_MIDDLE_REGEX \u003d \"[a-zA-Z0-9.-]*\"; // alphanumeric, period and hyphen"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_LAST_CHARACTER_REGEX \u003d \"[^\\\\W_]$\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + DOMAIN_FIRST_CHARACTER_REGEX + DOMAIN_MIDDLE_REGEX + DOMAIN_LAST_CHARACTER_REGEX;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Email}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * @param email A valid email scheduler."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email(String email) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidEmail(email), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns if a given string is a valid email."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidEmail(String test) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Email // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Email) other).value)); // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 4,
      "-": 63
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/model/person/EmailType.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " * Possible types of emails that can be stored."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "public enum EmailType {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    PERSONAL, NUS"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 1,
      "KendrickAng": 7
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/model/person/Emails.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.model.person.EmailType.NUS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.model.person.EmailType.PERSONAL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " * Represents a group of emails, possibly categorised into different types."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "public class Emails {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private final HashMap\u003cEmailType, List\u003cEmail\u003e\u003e emails;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public Emails() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        this.emails \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public Emails(HashMap\u003cEmailType, List\u003cEmail\u003e\u003e emails) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        this.emails.putAll(emails);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * Adds a new personal email scheduler."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @return the same Emails instance."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public Emails addPersonalEmail(Email email) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        if (!emails.containsKey(PERSONAL)) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            // list doesn\u0027t exist, create and addEntity"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            emails.put(PERSONAL, new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        emails.get(PERSONAL).add(email);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * Adds a new Nus email scheduler."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @return the same Emails instance."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public Emails addNusEmail(Email email) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        if (!emails.containsKey(NUS)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            // list doesn\u0027t exist, create and addEntity"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            emails.put(NUS, new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        emails.get(NUS).add(email);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     * Adds all emails from the given lists."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     * @param nusEmail list of nus emails."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     * @param personalEmail list of personal emails."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    public void addAll(ArrayList\u003cEmail\u003e nusEmail, ArrayList\u003cEmail\u003e personalEmail) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        for (Email email: nusEmail) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            this.addNusEmail(email);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        for (Email email: personalEmail) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            this.addPersonalEmail(email);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Gets a list of emails of specified type."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @param type the type of emails to getEntity."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @return null if the emails don\u0027t exist, the {@code Email} {@code List} otherwise."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public List\u003cEmail\u003e getEmailsOfType(EmailType type) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return emails.get(type);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Returns true if there are any emails of specified type present."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public boolean hasEmailsOfType(EmailType type) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return emails.get(type) !\u003d null \u0026\u0026 !emails.get(type).isEmpty();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public HashMap\u003cEmailType, List\u003cEmail\u003e\u003e getAllEmails() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return emails;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        if (hasEmailsOfType(PERSONAL) \u0026\u0026 hasEmailsOfType(NUS)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            return String.format(\"%s %s %s %s\", PERSONAL, getEmailsOfType(PERSONAL), NUS, getEmailsOfType(NUS));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        if (hasEmailsOfType(PERSONAL) \u0026\u0026 !hasEmailsOfType(NUS)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            return String.format(\"%s %s\", PERSONAL, getEmailsOfType(PERSONAL));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        if (!hasEmailsOfType(PERSONAL) \u0026\u0026 hasEmailsOfType(NUS)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            return String.format(\"%s %s\", NUS, getEmailsOfType(NUS));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                || (other instanceof Emails // instanceof handles nulls"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                \u0026\u0026 emails.equals(((Emails) other).emails)); // state check"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return emails.hashCode();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mirozo": 14,
      "dcshzj": 5,
      "KendrickAng": 94
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/model/person/Faculty.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " * Represents the faculty an {@code Interviewee} belongs to."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "public class Faculty {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            \"Faculties can take any values, but should not be blank.\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            + \"Examples:\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            + \"Correct: \u0027School of Computing\u0027\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            + \"Incorrect: \u0027 \u0027\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\"; // \"\" will be wrong"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public final String faculty;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Constructs a {@code Faculty}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @param faculty a valid faculty."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public Faculty(String faculty) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        requireNonNull(faculty);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        checkArgument(isValidFaculty(faculty), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        this.faculty \u003d faculty;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Returns true if the given string is a valid faculty."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static boolean isValidFaculty(String test) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return faculty;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                || (other instanceof Faculty // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                \u0026\u0026 faculty.equals(((Faculty) other).faculty)); // state check"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return faculty.hashCode();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 2,
      "KendrickAng": 51
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/model/person/Interviewee.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.tag.Tag;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " * Represents an Interviewee in the scheduler."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "public class Interviewee extends Person {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private final Faculty faculty;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private final Integer yearOfStudy;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private final List\u003cDepartment\u003e departmentChoices; // choice of departments"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private final List\u003cSlot\u003e availableTimeslots;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private final Emails emails; // personal, NUS emails etc"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private Slot allocatedSlot;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    private boolean emailSent;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private Interviewee(Faculty faculty, Integer yearOfStudy,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                       List\u003cDepartment\u003e departmentChoices, List\u003cSlot\u003e availableTimeslots, Emails emails,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                       Name name, Phone phone, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        super(name, phone, tags);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        this.faculty \u003d faculty;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        this.yearOfStudy \u003d yearOfStudy;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        this.departmentChoices \u003d departmentChoices;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        this.availableTimeslots \u003d availableTimeslots;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        this.allocatedSlot \u003d null;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        this.emails \u003d emails;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        this.emailSent \u003d false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Builder class for Interviewee - allows certain fields to optionally be added."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static class IntervieweeBuilder {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // Required parameters for Person"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        private final Name name;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        private final Phone phone;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        private final Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // Optional parameters - initialised to default values"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        private Emails emails \u003d DefaultValues.DEFAULT_EMAILS;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        private Faculty faculty \u003d DefaultValues.DEFAULT_FACULTY;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        private Integer yearOfStudy \u003d DefaultValues.DEFAULT_YEAR_OF_STUDY;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        private List\u003cDepartment\u003e departmentChoices \u003d DefaultValues.DEFAULT_DEPARTMENTS;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        private List\u003cSlot\u003e availableTimeslots \u003d DefaultValues.DEFAULT_TIMESLOTS;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        public IntervieweeBuilder(Name name, Phone phone, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            this.tags \u003d tags;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // For testing purposes only"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        public IntervieweeBuilder(Person p) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            this(p.getName(), p.getPhone(), p.getTags());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "         * Sets the optional {@code Emails} to create the Interviewee object."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "         */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        public IntervieweeBuilder emails(Emails val) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            emails \u003d val;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "         * Sets the optional {@code Faculty} to create the Interviewee object."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "         */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        public IntervieweeBuilder faculty(Faculty val) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            faculty \u003d val;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "         * Sets the optional {@code Integer} year of study to create the Interviewee object."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "         */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        public IntervieweeBuilder yearOfStudy(Integer val) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            yearOfStudy \u003d val;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "         * Sets the optional {@code List\u003cDepartment\u003e} to create the Interviewee object."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "         */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        public IntervieweeBuilder departmentChoices(List\u003cDepartment\u003e val) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            departmentChoices \u003d val;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "         * Sets the optional {@code List\u003cSlot\u003e} to create the Interviewee object."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "         */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        public IntervieweeBuilder availableTimeslots(List\u003cSlot\u003e val) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            availableTimeslots \u003d val;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "         * Builds the Interviewee object."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "         */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        public Interviewee build() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            return new Interviewee(faculty, yearOfStudy, departmentChoices,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                    availableTimeslots, emails, name, phone, tags);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    // Getters and misc methods"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public Faculty getFaculty() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return faculty;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public Integer getYearOfStudy() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return yearOfStudy;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public List\u003cDepartment\u003e getDepartmentChoices() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return departmentChoices;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public List\u003cSlot\u003e getAvailableTimeslots() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Collections.sort(availableTimeslots);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return availableTimeslots;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Returns the allocated slot of the interviewee if any, otherwise returns an empty Optional."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public Optional\u003cSlot\u003e getAllocatedSlot() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        if (allocatedSlot !\u003d null) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            return Optional.of(allocatedSlot);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public void setAllocatedSlot(Slot slot) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        this.allocatedSlot \u003d slot;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public void clearAllocatedSlot() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        this.allocatedSlot \u003d null;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public Emails getEmails() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return emails;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public boolean getEmailSent() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        return this.emailSent;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public void setEmailSent(boolean flag) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        this.emailSent \u003d flag;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Returns true if both interviewees of the same name have the same name and phone number."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * This defines a weaker notion of equality between two interviewees."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public boolean isSamePerson(Interviewee interviewee) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        if (interviewee \u003d\u003d this) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return interviewee !\u003d null"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                \u0026\u0026 interviewee.getName().equals(getName());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Returns true if both interviewees have the same identity and data fields."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * This defines a stronger notion of equality between two interviewees."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        if (!(other instanceof Interviewee)) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Interviewee otherInterviewee \u003d (Interviewee) other;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return super.equals(other)"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                \u0026\u0026 otherInterviewee.getEmails().equals(getEmails())"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                \u0026\u0026 otherInterviewee.getFaculty().equals(getFaculty())"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                \u0026\u0026 otherInterviewee.getYearOfStudy().equals(getYearOfStudy())"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                \u0026\u0026 otherInterviewee.getDepartmentChoices().equals(getDepartmentChoices())"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                \u0026\u0026 otherInterviewee.getAvailableTimeslots().equals(getAvailableTimeslots());"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return Objects.hash(emails, faculty, yearOfStudy, departmentChoices, availableTimeslots,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                getName(), getPhone(), getTags());"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .append(\" Role: \")"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .append(getClass().getSimpleName().toLowerCase())"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .append(\" Emails: \")"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .append(getEmails())"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .append(\" Faculty: \")"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .append(getFaculty())"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .append(\" Year of study: \")"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .append(getYearOfStudy())"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .append(\" Choice of departments: \")"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .append(getDepartmentChoices())"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .append(\" Time slots: \")"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .append(getAvailableTimeslots())"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 28,
      "dcshzj": 12,
      "KendrickAng": 190
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/model/person/IntervieweeNameHasKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " * Represents a Predicate that checks for given keywords in an Interviewee."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "public class IntervieweeNameHasKeywordsPredicate implements Predicate\u003cInterviewee\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public IntervieweeNameHasKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public boolean test(Interviewee interviewee) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(interviewee.getName().fullName, keyword));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                || (other instanceof IntervieweeNameHasKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                \u0026\u0026 keywords.equals(((IntervieweeNameHasKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 2,
      "KendrickAng": 29
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/model/person/IntervieweeSlot.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "package seedu.scheduler.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": " * Represents a container for a slot and the interviewee which will be interviewing at the timing of the slot."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "public class IntervieweeSlot implements Comparable\u003cIntervieweeSlot\u003e {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private Interviewee interviewee;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private Slot slot;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public IntervieweeSlot(Interviewee interviewee, Slot slot) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        this.interviewee \u003d interviewee;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        this.slot \u003d slot;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public Interviewee getInterviewee() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return interviewee;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public Slot getSlot() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return slot;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public int compareTo(IntervieweeSlot other) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return this.slot.compareTo(other.slot);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return String.format(\"%s, %s\", interviewee, slot);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 32
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/model/person/Interviewer.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.tag.Tag;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " * Represents an Interviewer in the scheduler."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "public class Interviewer extends Person {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    // Each availability is given as a string in this format DD/MM/YYYY HH:MM-HH:MM"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private final List\u003cSlot\u003e availabilities;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private final List\u003cIntervieweeSlot\u003e allocatedSlots;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private final Department department;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private Interviewer(Name name, Phone phone, Set\u003cTag\u003e tags,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                        Email email, Department department, List\u003cSlot\u003e availabilities) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        super(name, phone, tags);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        this.department \u003d department;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        this.availabilities \u003d availabilities;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        this.allocatedSlots \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Static builder class for Interviewer."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static class InterviewerBuilder {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // Required parameters for Person"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        private final Name name;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        private final Phone phone;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        private final Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // Optional parameters - initialised to default values"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        private Department department \u003d DefaultValues.DEFAULT_DEPARTMENT;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        private Email email \u003d DefaultValues.DEFAULT_NUS_WORK_EMAIL;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        private List\u003cSlot\u003e availabilities \u003d DefaultValues.DEFAULT_TIMESLOTS;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        public InterviewerBuilder(Name name, Phone phone, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            this.tags \u003d tags;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "         * Sets the optional {@code Department} to create the Interviewer object."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "         */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        public InterviewerBuilder department(Department val) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            department \u003d val;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "         * Sets the optional {@code Email} to create the Interviewer object."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "         */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        public InterviewerBuilder email(Email val) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            email \u003d val;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "         * Sets the optional {@code List\u003cSlot\u003e} to create the Interviewer object."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "         */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        public InterviewerBuilder availabilities(List\u003cSlot\u003e val) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            availabilities \u003d val;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "         * Build and return the Interviewer object."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "         */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        public Interviewer build() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            return new Interviewer(name, phone, tags, email, department, availabilities);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    // Getters, setters and misc methods"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public Department getDepartment() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return department;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public List\u003cSlot\u003e getAvailabilities() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return availabilities;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    public void setAvailabilities(List\u003cSlot\u003e slots) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        this.availabilities.clear();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        this.availabilities.addAll(slots);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public List\u003cIntervieweeSlot\u003e getAllocatedSlots() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Collections.sort(allocatedSlots);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return allocatedSlots;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public void addAllocatedSlot(IntervieweeSlot slot) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        this.allocatedSlots.add(slot);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public void clearAllocatedSlots() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        this.allocatedSlots.clear();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     * Checks if interviewer is available for the given slot."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     * @param slot"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     * @return True if interviewer is available, false otherwise"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    public boolean isAvailable(Slot slot) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        for (Slot availableSlot: availabilities) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            if (availableSlot.equals(slot)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Returns true if both interviewers of the same name have the same name and phone number."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * This defines a weaker notion of equality between two interviewers."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public boolean isSamePerson(Interviewer interviewer) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        if (interviewer \u003d\u003d this) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return interviewer !\u003d null"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                \u0026\u0026 interviewer.getName().equals(getName());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Returns true if both interviewees have the same identity and data fields."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * This defines a stronger notion of equality between two interviewees."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        if (!(other instanceof Interviewer)) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Interviewer otherInterviewer \u003d (Interviewer) other;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return super.equals(other)"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                \u0026\u0026 otherInterviewer.getDepartment().equals(getDepartment())"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                \u0026\u0026 otherInterviewer.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                \u0026\u0026 otherInterviewer.getAvailabilities().equals(getAvailabilities());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return Objects.hash(department, email, availabilities,"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                getName(), getPhone(), getTags());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .append(\" Role: \")"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .append(getClass().getSimpleName())"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .append(\" Department: \")"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .append(getDepartment())"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .append(\" Availabilities: \")"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .append(getAvailabilities())"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 28,
      "mirozo": 16,
      "dcshzj": 2,
      "KendrickAng": 144
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/model/person/InterviewerNameHasKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " * Represents a Predicate that checks for given keywords in an Interviewer."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "public class InterviewerNameHasKeywordsPredicate implements Predicate\u003cInterviewer\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public InterviewerNameHasKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public boolean test(Interviewer interviewer) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(interviewer.getName().fullName, keyword));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                || (other instanceof InterviewerNameHasKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                \u0026\u0026 keywords.equals(((InterviewerNameHasKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 2,
      "KendrickAng": 29
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/model/person/Name.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dcshzj"
        },
        "content": " * Represents a Person\u0027s name in the database."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * The first character of the name must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 4,
      "-": 55
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/model/person/Person.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dcshzj"
        },
        "content": " * Represents a Person in the database."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class Person {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private final Name name; // compulsory"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private final Phone phone; // compulsory"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e(); // optional"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public Person(Name name, Phone phone, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        requireAllNonNull(name, phone, tags);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSamePerson(Person otherPerson) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (otherPerson \u003d\u003d this) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson !\u003d null"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                \u0026\u0026 (otherPerson.getPhone().equals(getPhone()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Person)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Person otherPerson \u003d (Person) other;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getTags().equals(getTags());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return Objects.hash(name, phone, tags);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 4,
      "-": 90,
      "KendrickAng": 7
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/model/person/PersonNameHasKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "public class PersonNameHasKeywordsPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public PersonNameHasKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getName().fullName, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public List\u003cString\u003e getKeywords() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return keywords;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                || (other instanceof PersonNameHasKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                \u0026\u0026 keywords.equals(((PersonNameHasKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 2,
      "-": 24,
      "KendrickAng": 8
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/model/person/Phone.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dcshzj"
        },
        "content": " * Represents a Person\u0027s phone number in the database."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Phone {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Phone numbers should only contain numbers, and it should be at least 3 digits long\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{3,}\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Phone}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param phone A valid phone number."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone(String phone) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidPhone(phone), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid phone number."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPhone(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Phone // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Phone) other).value)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 3,
      "-": 49
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/model/person/Role.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " * Represents a {@code Person}\u0027s role in the Scheduler."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidRole(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "public class Role {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            \"Roles are restricted to either an \u0027interviewee\u0027 or an \u0027interviewer\u0027.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"(interviewee|interviewer)\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public Role(String role) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        requireNonNull(role);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        checkArgument(isValidRole(role), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        value \u003d role;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Returns true if the given string is a valid role."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static boolean isValidRole(String test) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Returns the equivalent {@code RoleType} enumeration of the valid role, null if it doesn\u0027t exist."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public RoleType getRole() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        if (value.equals(\"interviewee\")) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            return RoleType.INTERVIEWEE;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        if (value.equals(\"interviewer\")) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            return RoleType.INTERVIEWER;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                || (other instanceof Role // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                \u0026\u0026 value.equals(((Role) other).value)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 2,
      "KendrickAng": 57
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/model/person/RoleType.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " * Represents the types of roles a person in the Scheduler can have."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "public enum RoleType {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    INTERVIEWER, INTERVIEWEE"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 1,
      "KendrickAng": 7
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/model/person/Slot.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.time.ZonedDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import seedu.scheduler.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " * Represents an interview timeslot an {@code Interviewee} is allocated."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "public class Slot implements Comparable\u003cSlot\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final String STRING_FORMAT \u003d \"%s %s-%s\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public static final String TIMING_FORMAT \u003d \"%s-%s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            \"A slot must follow this format: \" + String.format(STRING_FORMAT, \"dd/MM/yyyy\", \"HH:mm\", \"HH:mm\") + \".\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            + \"Constraints:\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            + \"The input date dd/mm/yyyy must be valid, i.e 30/02/2019 is an invalid date.\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            + \"A slot must also have a start time earlier than its end time.\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            + \"Examples:\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            + \"Correct: \u002703/12/2019 13:00-14:00\u0027\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            + \"Incorrect: \u002703/12/2019 13:00-13:00\u0027\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final String DATETIME_PARSE_PATTERN \u003d \"dd/MM/yyyy HH:mm\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private static final Pattern SEPARATION_REGEX \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            Pattern.compile(\"(?\u003cdate\u003e\\\\d{2}/\\\\d{2}/\\\\d{4}) (?\u003cslot1\u003e\\\\d{2}:\\\\d{2})-(?\u003cslot2\u003e\\\\d{2}:\\\\d{2})\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private static final DateTimeFormatter parseFormatter \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            DateTimeFormatter.ofPattern(DATETIME_PARSE_PATTERN, Locale.ENGLISH).withZone(ZoneId.systemDefault());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(Slot.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public final String date;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public final String start;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public final String end;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Constructs a {@code Slot} from the enforced format."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @param date the date of the slot."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @param start the starting time of the slot."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @param end  the ending time of the slot."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public Slot(String date, String start, String end) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        requireAllNonNull(date, start, end);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        checkArgument(isValidSlot(String.format(STRING_FORMAT, date, start, end)), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        this.start \u003d start;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        this.end \u003d end;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * Factory method for constructing a {@code Slot} from a given String in the enforced format."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * @param slot The String in the format given in SEPARATION_REGEX."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public static Slot fromString(String slot) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        requireNonNull(slot);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        checkArgument(isValidSlot(slot), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        final Matcher matcher \u003d SEPARATION_REGEX.matcher(slot);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            throw new IllegalArgumentException(MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        return new Slot(matcher.group(\"date\"), matcher.group(\"slot1\"), matcher.group(\"slot2\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Returns true if the given slot timing is in valid format and start occurs earlier than end."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static boolean isValidSlot(String test) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            // split the periods up"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            final Matcher matcher \u003d SEPARATION_REGEX.matcher(test);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            if (!matcher.matches()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                throw new ParseException(MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            final String date \u003d matcher.group(\"date\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            final String start \u003d String.format(\"%s %s\", date, matcher.group(\"slot1\"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            final String end \u003d String.format(\"%s %s\", date, matcher.group(\"slot2\"));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            ZonedDateTime t1 \u003d ZonedDateTime.parse(start, parseFormatter);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            ZonedDateTime t2 \u003d ZonedDateTime.parse(end, parseFormatter);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            // the start must be earlier than the end"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            if (t1.compareTo(t2) \u003e\u003d 0) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            logger.log(Level.WARNING, test + \" is formatted wrongly\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public String getTiming() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return String.format(TIMING_FORMAT, start, end);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return String.format(STRING_FORMAT, date, start, end);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                || (other instanceof Slot // instanceof handles nulls"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                \u0026\u0026 date.equals(((Slot) other).date)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                \u0026\u0026 start.equals(((Slot) other).start)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                \u0026\u0026 end.equals(((Slot) other).end)); // state check"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return Objects.hash(date, start, end);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Returns 0 if the date, starting time, and ending time of the this slot and those of @code{other} are equal."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Returns 1 if the date, starting time or ending time of @code{other} is earlier than the date, starting time,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * ending time of this slot, otherwise returns -1."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public int compareTo(Slot other) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        String dateTimePattern \u003d \"%s %s\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        String thisStart \u003d String.format(dateTimePattern, date, start);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        String otherStart \u003d String.format(dateTimePattern, other.date, other.start);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        ZonedDateTime s1 \u003d ZonedDateTime.parse(thisStart, parseFormatter);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        ZonedDateTime s2 \u003d ZonedDateTime.parse(otherStart, parseFormatter);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        int sComparison \u003d s1.compareTo(s2);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        if (sComparison \u003e 0 || sComparison \u003c 0) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            return sComparison;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            String thisEnd \u003d String.format(dateTimePattern, date, end);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            String otherEnd \u003d String.format(dateTimePattern, other.date, other.end);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            ZonedDateTime e1 \u003d ZonedDateTime.parse(thisEnd, parseFormatter);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            ZonedDateTime e2 \u003d ZonedDateTime.parse(otherEnd, parseFormatter);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            return e1.compareTo(e2);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 38,
      "mirozo": 5,
      "dcshzj": 19,
      "KendrickAng": 89
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/model/person/UniquePersonList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * A list of persons that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * A person is considered unique by comparing using {@code Person#isSamePerson(Person)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * persons uses Person#isSamePerson(Person) for equality so as to ensure that the person being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * unique in terms of identity in the UniquePersonList. However, the removal of a person uses Person#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * as to ensure that the person with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * @see Person#isSamePerson(Person)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "public class UniquePersonList\u003cT extends Person\u003e implements Iterable\u003cT\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    private final ObservableList\u003cT\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    private final ObservableList\u003cT\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Returns true if the list contains an equivalent person as the given argument, i.e same name and phone."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public boolean contains(T toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSamePerson);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public void add(T toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public void setPerson(T target, T editedPerson) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!target.isSamePerson(editedPerson) \u0026\u0026 contains(editedPerson)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.set(index, editedPerson);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes the equivalent person from the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public void remove(T toRemove) throws PersonNotFoundException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public void setPersons(UniquePersonList\u003cT\u003e replacement) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of this list with {@code persons}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public void setPersons(List\u003cT\u003e persons) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(persons);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personsAreUnique(persons)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(persons);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public ObservableList\u003cT\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public Iterator\u003cT\u003e iterator() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof UniquePersonList // instanceof handles nulls"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniquePersonList) other).internalList));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code persons} contains only unique persons."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private boolean personsAreUnique(List\u003cT\u003e persons) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c persons.size() - 1; i++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int j \u003d i + 1; j \u003c persons.size(); j++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                if (persons.get(i).isSamePerson(persons.get(j))) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 14,
      "-": 120,
      "KendrickAng": 3
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/model/person/exceptions/DuplicatePersonException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.model.person.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that the operation will result in duplicate Persons (Persons are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class DuplicatePersonException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public DuplicatePersonException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        super(\"Operation would result in duplicate persons\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/model/person/exceptions/PersonNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.model.person.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that the operation is unable to find the specified person."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 1,
      "-": 5
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/model/tag/Tag.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dcshzj"
        },
        "content": " * Represents a Tag in the scheduler book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 3,
      "-": 51
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/model/util/CsvReader.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.DefaultValues;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Department;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Email;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Emails;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Faculty;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Interviewee;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Interviewer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Phone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Slot;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mirozo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mirozo"
        },
        "content": " * Helper class to read from .csv(Comma separated values) files ."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mirozo"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mirozo"
        },
        "content": "public class CsvReader {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     * Constructor for CsvReader object to read from excel."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     * @param filePath Path of csv file"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    public CsvReader(String filePath) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Interviewers \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     * Reads from .csv file and returns a list of Interviewer objects."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     * @return ArrayList of Interviewers"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     * @throws IOException if input file is not found or file is in incorrect format."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    public ArrayList\u003cInterviewer\u003e readInterviewers() throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        BufferedReader csvReader \u003d new BufferedReader(new FileReader(filePath));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        String firstLine \u003d csvReader.readLine();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        int numberOfDays \u003d getValue(firstLine.split(\",\")[0]);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        int numberOfColumns \u003d getValue(firstLine.split(\",\")[1]) + 1;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        if (numberOfColumns \u003c 1) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            ArrayList\u003cInterviewer\u003e emptyList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            return emptyList;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        ArrayList\u003cInterviewer\u003e interviewers \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        csvReader.readLine(); //removes next line"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        for (int i \u003d 0; i \u003c numberOfDays; i++) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            String date \u003d null;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            String row;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            boolean firstEncounter \u003d true;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            boolean firstRow \u003d true;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            while ((row \u003d csvReader.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                String[] rowData \u003d row.split(\",\", -1);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                if (rowData[0].equals(\"\")) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                    if (firstEncounter) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                        firstEncounter \u003d false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                } else if (firstRow) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                    date \u003d rowData[0];"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                    assert date !\u003d null;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                    if (i \u003d\u003d 0) { //if this is the first table(day) being read"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                        interviewers \u003d getInterviewersFromHeader(rowData);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                    firstRow \u003d false;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                    updateInterviewersSlotsFromData(interviewers, rowData, date);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        csvReader.close();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        return interviewers;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     * Static method to get the integer value from a String in the format (\"key \u003d value\")."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     * @param element String in the format (\"key \u003d value\")"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     * @return int value"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    public static int getValue(String element) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        String[] strings \u003d element.split(\"\u003d\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        String trimmedString \u003d strings[1].trim();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        return Integer.parseInt(trimmedString);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     * Gets the interviewer\u0027s name from a String."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     * @param cell String that contains interviewer\u0027s name"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     * @return Interviewer\u0027s name"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    public static Name getInterviewerName(String cell) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        String[] strings \u003d cell.split(\"-\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        return new Name(strings[1].trim());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     * Gets the interviewer\u0027s department from a String."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     * @param cell String that contains interviewer\u0027s department"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     * @return Interviewer\u0027s department"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    public static Department getInterviewerDepartment(String cell) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        String[] strings \u003d cell.split(\"-\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        return new Department(strings[0].trim());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     * Updates availabilities of interviewers."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     * @param interviewers List of interviewer objects"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     * @param rowData Raw data of availabilities"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     * @param date Date of availability"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    public static void updateInterviewersSlotsFromData(ArrayList\u003cInterviewer\u003e interviewers,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        String[] rowData, String date) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        String timing \u003d rowData[0];"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        String startTime \u003d getStartTime(timing);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        String endTime \u003d getEndTime(timing);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        Slot slot \u003d new Slot(date, startTime, endTime);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        for (int j \u003d 1; j \u003c rowData.length; j++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            if (rowData[j].trim().equals(\"1\")) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                Interviewer currentInterviewer \u003d interviewers.get(j - 1);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                List\u003cSlot\u003e currentSlots \u003d currentInterviewer.getAvailabilities();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                currentSlots.add(slot);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                List\u003cSlot\u003e updatedSlots \u003d cloneSlots(currentSlots);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                currentInterviewer.setAvailabilities(updatedSlots);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     * Gets the Start time from a String in the format \"hh:mm - hh:mm\"."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     * @param timeRange String representing the range of timings."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     * @return String start time"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    public static String getStartTime(String timeRange) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        String[] strings \u003d timeRange.split(\"-\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        return strings[0].trim();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     * Gets the End time from a String in the format \"hh:mm - hh:mm\"."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     * @param timeRange String representing the range of timings."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     * @return String End time"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    public static String getEndTime(String timeRange) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        String[] strings \u003d timeRange.split(\"-\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        return strings[1].trim();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     * Returns the deep copy of the list of slots given."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     * @param list the list of slots to be copied."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     * @return the deep copy of the list of slots given."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    public static List\u003cSlot\u003e cloneSlots(List\u003cSlot\u003e list) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        List\u003cSlot\u003e listClone \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        for (Slot slot : list) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            listClone.add(slot);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        return listClone;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     * Generates and returns a list of interviewers with empty availabilities from a header row."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     * @param rowData Header row"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     * @return ArrayList of interviewer objects"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    public static ArrayList\u003cInterviewer\u003e getInterviewersFromHeader(String[] rowData) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        ArrayList\u003cInterviewer\u003e interviewers \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        for (int j \u003d 1; j \u003c rowData.length; j++) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            Name interviewerName \u003d getInterviewerName(rowData[j]);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            Department interviewerDepartment \u003d getInterviewerDepartment(rowData[j]);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            Interviewer.InterviewerBuilder interviewerBuilder \u003d"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                    new Interviewer.InterviewerBuilder(interviewerName,"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                            DefaultValues.DEFAULT_PHONE, DefaultValues.DEFAULT_TAGS);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            interviewerBuilder.department(interviewerDepartment);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            interviewerBuilder.availabilities(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            interviewers.add(interviewerBuilder.build());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        return interviewers;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Interviewees \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     * Reads from .csv file and returns a list of Interviewee objects."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     * @return ArrayList of Interviewees"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     * @throws IOException if input file is not found or file is in incorrect format."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    public ArrayList\u003cInterviewee\u003e readInterviewees() throws IOException {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        BufferedReader csvReader \u003d new BufferedReader(new FileReader(filePath));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        ArrayList\u003cInterviewee\u003e interviewees \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        csvReader.readLine(); //discard the first line"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        String row;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        while ((row \u003d csvReader.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            String[] rowData \u003d row.split(\",\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            Name name \u003d new Name(rowData[0]);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            Emails emails \u003d new Emails(new HashMap\u003c\u003e());"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            ArrayList\u003cEmail\u003e nusEmails \u003d getAllEmails(rowData[1]);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            ArrayList\u003cEmail\u003e personalEmails \u003d getAllEmails(rowData[2]);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            emails.addAll(nusEmails, personalEmails);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            Phone phone \u003d new Phone(rowData[3]);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            Faculty faculty \u003d new Faculty(rowData[4]);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            Integer yearOfStudy \u003d Integer.valueOf(rowData[5]);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            ArrayList\u003cDepartment\u003e choiceOfDepartments \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            choiceOfDepartments.add(new Department(rowData[6]));"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            List\u003cSlot\u003e availableTimeSlots \u003d getAllSlots(rowData);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            Interviewee interviewee \u003d new Interviewee.IntervieweeBuilder(name, phone, DefaultValues.DEFAULT_TAGS)"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                    .availableTimeslots(availableTimeSlots)"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                    .departmentChoices(choiceOfDepartments)"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                    .emails(emails)"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                    .yearOfStudy(yearOfStudy)"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                    .faculty(faculty)"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                    .build();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            interviewees.add(interviewee);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        return interviewees;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     * Extracts all indicated timeslots from the given row from interviewee\u0027s data."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     * @param rowData row data of csv file."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     * @return List of all indicated timeslots."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    public static List\u003cSlot\u003e getAllSlots(String[] rowData) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        List\u003cSlot\u003e timeSlots \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        for (int i \u003d 7; i \u003c rowData.length; i++) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            String trimmedData \u003d rowData[i].trim().replaceAll(\"\\\"\", \"\");"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            if (!trimmedData.equals(\"\")) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                Slot slot \u003d Slot.fromString(trimmedData);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                timeSlots.add(slot);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        return timeSlots;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     * Extracts emails from text and returns a list of the extracted emails from interviewee\u0027s data."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     * @param text String of emails, each separated by a whitespace."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     * @return list of emails."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    public static ArrayList\u003cEmail\u003e getAllEmails(String text) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        ArrayList\u003cEmail\u003e emails \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        String[] strings \u003d text.split(\" \");"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        for (String emailString: strings) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            emails.add(new Email(emailString));"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        return emails;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "mirozo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mirozo": 250,
      "dcshzj": 11
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/model/util/CsvWriter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mirozo"
        },
        "content": "package seedu.scheduler.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import seedu.scheduler.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import seedu.scheduler.model.Schedule;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mirozo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mirozo"
        },
        "content": " * Helper class to write to .csv(Comma-Separated Values) files."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mirozo"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mirozo"
        },
        "content": "public class CsvWriter {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    private String destinationFile;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     * Constructor for CsvWriter."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     * @param destinationFile File to write to."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     * @param model Where data resides."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    public CsvWriter(String destinationFile, Model model) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        this.destinationFile \u003d destinationFile;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     * Writes current scheduleList from model into destination file."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     * @return ArrayList of exported table for testing purposes."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     * @throws IOException when FileWriter fails."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    public ArrayList\u003cString\u003e writeSchedulesToFile() throws IOException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        FileWriter csvWriter \u003d new FileWriter(destinationFile);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        List\u003cSchedule\u003e schedules \u003d model.getSchedulesList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        ArrayList\u003cString\u003e table \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        for (Schedule schedule: schedules) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            ObservableList\u003cObservableList\u003cString\u003e\u003e rows \u003d schedule.getObservableList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            csvWriter.append(String.join(\",\", schedule.getTitles()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            csvWriter.append(\"\\n\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            table.add(String.join(\",\", schedule.getTitles()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            for (ObservableList\u003cString\u003e rowData: rows) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                csvWriter.append(String.join(\",\", rowData));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                csvWriter.append(\"\\n\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                table.add(String.join(\",\", rowData));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            csvWriter.append(\"\\n\").append(\"\\n\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        csvWriter.flush();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        csvWriter.close();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        return table;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mirozo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mirozo": 57
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/model/util/SampleDataUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.IntervieweeList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.InterviewerList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.ReadOnlyList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.Schedule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import seedu.scheduler.model.person.Department;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Interviewee;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Interviewer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import seedu.scheduler.model.person.Slot;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import seedu.scheduler.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " * Contains utility methods for populating {@code IntervieweeList} and {@code IntervieweeList} with sample data."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    private static String[][] sampleFilledTable \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            new String[][]{"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                    {\"10/9/2019\", \"Welfare - Hazel\", \"Technical - Johnathan\", \"Publicity - Lucia\"},"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                    {\"18:00-18:30\", \"John\", \"Steven\", \"0\"},"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                    {\"18:30-19:00\", \"Alex\", \"Clark\", \"John\"},"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                    {\"19:00-19:30\", \"Alicia\", \"0\", \"charlie\"},"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                    {\"19:30-20:00\", \"Charlie\", \"0\", \"Selina\"},"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                    {\"20:00-20:30\", \"Selina\", \"0\", \"0\"},"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                    {\"20:30-21:00\", \"Natal\", \"0\", \"0\"}};"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public static Interviewee[] getSampleInterviewees() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        // TODO: Expand this sample Interviewees list"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        return new Interviewee[0];"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public static Interviewer[] getSampleInterviewers() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        // TODO: Expand this sample Interviewers list"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        return new Interviewer[0];"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static ReadOnlyList\u003cInterviewee\u003e getSampleIntervieweeList() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        IntervieweeList sampleIntervieweeList \u003d new IntervieweeList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        for (Interviewee sampleInterviewee : getSampleInterviewees()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            sampleIntervieweeList.addEntity(sampleInterviewee);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        return sampleIntervieweeList;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static ReadOnlyList\u003cInterviewer\u003e getSampleInterviewerList() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        InterviewerList sampleInterviewerList \u003d new InterviewerList();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        for (Interviewer sampleInterviewer : getSampleInterviewers()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            sampleInterviewerList.addEntity(sampleInterviewer);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        return sampleInterviewerList;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    public static List\u003cSchedule\u003e getSampleSchedulesList() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        LinkedList\u003cSchedule\u003e sampleSchedulesList \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        String date \u003d sampleFilledTable[0][0];"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        LinkedList\u003cLinkedList\u003cString\u003e\u003e sampleData \u003d toTwoDimensionalLinkedList(sampleFilledTable);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        sampleSchedulesList.add(new Schedule(date, sampleData));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        return sampleSchedulesList;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * Returns the given two dimensional array of strings as a two dimensional LinkedList of strings."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    private static LinkedList\u003cLinkedList\u003cString\u003e\u003e toTwoDimensionalLinkedList(String[][] table) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        LinkedList\u003cLinkedList\u003cString\u003e\u003e tableCopy \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        for (String[] row : table) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            LinkedList\u003cString\u003e rowCopy \u003d new LinkedList\u003c\u003e(Arrays.asList(row));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            tableCopy.add(rowCopy);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        return tableCopy;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     * Returns a department list containing the list of strings given."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    public static List\u003cDepartment\u003e getDepartmentList(String... strings) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                .map(Department::new)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     * Returns a time slot list containing the list of strings given."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    public static List\u003cSlot\u003e getTimeslotList(String...timeslots) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        return Arrays.stream(timeslots)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                .map(Slot::fromString)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mrchensheng21": 31,
      "mirozo": 31,
      "dcshzj": 29,
      "-": 12,
      "KendrickAng": 7
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/storage/IntervieweeListStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.IntervieweeList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.ReadOnlyList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Interviewee;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dcshzj"
        },
        "content": " * Represents a storage for {@link IntervieweeList}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dcshzj"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "public interface IntervieweeListStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * Returns the file path of the interviewees data file."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    Path getIntervieweeListFilePath();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Returns Interviewees data as an {@link ReadOnlyList}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    Optional\u003cReadOnlyList\u003cInterviewee\u003e\u003e readIntervieweeList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * @see #getIntervieweeListFilePath()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    Optional\u003cReadOnlyList\u003cInterviewee\u003e\u003e readIntervieweeList(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Saves the given {@link ReadOnlyList} to the storage."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * @param intervieweeList cannot be null."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    void saveIntervieweeList(ReadOnlyList\u003cInterviewee\u003e intervieweeList) throws IOException;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @see #saveIntervieweeList(ReadOnlyList)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    void saveIntervieweeList(ReadOnlyList\u003cInterviewee\u003e intervieweeList, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 40,
      "KendrickAng": 7
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/storage/InterviewerListStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.InterviewerList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.ReadOnlyList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Interviewer;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dcshzj"
        },
        "content": " * Represents a storage for {@link InterviewerList}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dcshzj"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "public interface InterviewerListStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * Returns the file path of the interviewers data file."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    Path getInterviewerListFilePath();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Returns Interviewers data as an {@link ReadOnlyList}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    Optional\u003cReadOnlyList\u003cInterviewer\u003e\u003e readInterviewerList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * @see #getInterviewerListFilePath()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    Optional\u003cReadOnlyList\u003cInterviewer\u003e\u003e readInterviewerList(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Saves the given {@link ReadOnlyList} to the storage."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * @param interviewerList cannot be null."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    void saveInterviewerList(ReadOnlyList\u003cInterviewer\u003e interviewerList) throws IOException;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @see #saveInterviewerList(ReadOnlyList)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    void saveInterviewerList(ReadOnlyList\u003cInterviewer\u003e interviewerList, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 40,
      "KendrickAng": 7
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/storage/JsonAdaptedDepartment.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Department;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " * Jackson-friendly version of  {@link Department}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "public class JsonAdaptedDepartment {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private final String department;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Constructs a {@code JsonAdaptedDepartment} with the given {@code department}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public JsonAdaptedDepartment(String department) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        this.department \u003d department;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Converts a given {@code Tag} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public JsonAdaptedDepartment(Department source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        department \u003d source.department;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public String getDepartment() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return department;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Converts this Jackson-friendly adapted department object into the model\u0027s {@code Department} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted department."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public Department toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        if (!Department.isValidDepartment(department)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            throw new IllegalValueException(Department.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return new Department(department);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 3,
      "KendrickAng": 44
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/storage/JsonAdaptedInterviewee.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Department;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.EmailType;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Emails;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Faculty;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Interviewee;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Phone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Slot;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.tag.Tag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " * Jackson-friendly version of {@link Interviewee}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "public class JsonAdaptedInterviewee extends JsonAdaptedPerson {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private final String faculty;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private final Integer yearOfStudy;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private final List\u003cJsonAdaptedDepartment\u003e departmentChoices \u003d new ArrayList\u003c\u003e(); // choice of departments"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private final List\u003cJsonAdaptedSlot\u003e availableTimeslots \u003d new ArrayList\u003c\u003e(); // allocated interview time slots"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private final Map\u003cString, List\u003cString\u003e\u003e emails \u003d new HashMap\u003c\u003e(); // personal, NUS emails etc"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Constructs a {@code JsonAdaptedInterviewee} with the given interviewee details."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public JsonAdaptedInterviewee("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            @JsonProperty(\"faculty\") String faculty, @JsonProperty(\"yearOfStudy\") Integer yearOfStudy,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            @JsonProperty(\"departmentChoices\") List\u003cJsonAdaptedDepartment\u003e departmentChoices,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            @JsonProperty(\"availableTimeslots\") List\u003cJsonAdaptedSlot\u003e availableTimeslots,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            @JsonProperty(\"emails\") HashMap\u003cString, List\u003cString\u003e\u003e emails,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            @JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            @JsonProperty(\"phone\") String phone,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        super(name, phone, tagged);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        this.faculty \u003d faculty;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        this.yearOfStudy \u003d yearOfStudy;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        if (departmentChoices !\u003d null) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            this.departmentChoices.addAll(departmentChoices);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        if (availableTimeslots !\u003d null) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            this.availableTimeslots.addAll(availableTimeslots);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        if (emails !\u003d null) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            this.emails.putAll(emails);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Converts a given {@code Interviewee} into this class for Jackson use."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public JsonAdaptedInterviewee(Interviewee source) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        super(source.getName().fullName, source.getPhone().value,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                source.getTags().stream().map(JsonAdaptedTag::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        faculty \u003d source.getFaculty().faculty;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        yearOfStudy \u003d source.getYearOfStudy();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        departmentChoices.addAll(source.getDepartmentChoices()"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .map(JsonAdaptedDepartment::new)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        availableTimeslots.addAll(source.getAvailableTimeslots()"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .map(JsonAdaptedSlot::new)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        emails.putAll(source.getEmails().getAllEmails().entrySet()"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .collect(Collectors.toMap("
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                    entry -\u003e entry.getKey().toString(),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                    entry -\u003e entry.getValue().stream().map(Email::toString).collect(Collectors.toList()))"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                ));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Converts this Jackson-friendly adapted interviewee object into the model\u0027s {@code Interviewee} object."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted interviewee."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public Interviewee toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        final String name \u003d getName();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        final String phone \u003d getPhone();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        for (JsonAdaptedTag tag : getTagged()) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            personTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        final List\u003cDepartment\u003e departments \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        for (JsonAdaptedDepartment d: departmentChoices) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            departments.add(d.toModelType());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        final List\u003cSlot\u003e personSlots \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        for (JsonAdaptedSlot s: availableTimeslots) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            personSlots.add(s.toModelType());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        final HashMap\u003cEmailType, List\u003cEmail\u003e\u003e personEmails \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        for (Map.Entry\u003cString, List\u003cString\u003e\u003e entry: emails.entrySet()) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            personEmails.put("
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                    EmailType.valueOf(entry.getKey()),"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                    entry.getValue().stream().map(Email::new).collect(Collectors.toList())"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            );"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // check name"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // check phone"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // check faculty"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        if (faculty \u003d\u003d null) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Faculty.class.getSimpleName()));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        final Faculty modelFaculty \u003d new Faculty(faculty);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // check year of study"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        if (yearOfStudy \u003d\u003d null) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Integer.class.getSimpleName()));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        final Integer modelYearOfStudy \u003d Integer.valueOf(yearOfStudy);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // no need to check departments"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        final List\u003cDepartment\u003e modelDepartments \u003d new ArrayList\u003c\u003e(departments);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // no need to check tags"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // no need to check timeslots"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        final List\u003cSlot\u003e modelSlots \u003d new ArrayList\u003c\u003e(personSlots);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // no need to check emails"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        final Emails modelEmails \u003d new Emails(personEmails);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return new Interviewee.IntervieweeBuilder(modelName, modelPhone, modelTags)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .faculty(modelFaculty)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .yearOfStudy(modelYearOfStudy)"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .departmentChoices(modelDepartments)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .availableTimeslots(modelSlots)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .emails(modelEmails)"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 12,
      "KendrickAng": 148
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/storage/JsonAdaptedInterviewer.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Department;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Email;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Interviewer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Phone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Slot;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " * Jackson-friendly version of {@link Interviewer}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "public class JsonAdaptedInterviewer extends JsonAdaptedPerson {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private final List\u003cJsonAdaptedSlot\u003e availabilities \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private final String department;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private final String email;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Constructs a {@code JsonAdaptedInterviewer} with the given interviewer details."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public JsonAdaptedInterviewer("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            @JsonProperty(\"availabilities\") List\u003cJsonAdaptedSlot\u003e availabilities,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            @JsonProperty(\"department\") String department,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            @JsonProperty(\"email\") String email,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            @JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            @JsonProperty(\"phone\") String phone,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        super(name, phone, tagged);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        this.department \u003d department;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        if (availabilities !\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            this.availabilities.addAll(availabilities);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Converts a given {@code Interviewer} into this class for Jackson use."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public JsonAdaptedInterviewer(Interviewer source) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        super(source.getName().fullName, source.getPhone().value,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                source.getTags().stream().map(JsonAdaptedTag::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        department \u003d source.getDepartment().department;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        availabilities.addAll(source.getAvailabilities()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .map(JsonAdaptedSlot::new)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Converts this Jackson-friendly adapted interviewer object into the model\u0027s {@code Interviewer} object."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted interviewer."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public Interviewer toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        final String name \u003d getName();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        final String phone \u003d getPhone();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        for (JsonAdaptedTag tag : getTagged()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            personTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        final List\u003cSlot\u003e personAvailabilities \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        for (JsonAdaptedSlot s: availabilities) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            personAvailabilities.add(s.toModelType());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // check name"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // check phone"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // check department"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        if (department \u003d\u003d null) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Department.class.getSimpleName()));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        final Department modelDepartment \u003d new Department(department);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // check email"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // no need to check tags"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // no need to check availabilities"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        final List\u003cSlot\u003e modelAvailabilities \u003d new ArrayList\u003c\u003e(personAvailabilities);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return new Interviewer.InterviewerBuilder(modelName, modelPhone, modelTags)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                    .department(modelDepartment)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                    .availabilities(modelAvailabilities)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                    .email(modelEmail)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                    .build();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 10,
      "KendrickAng": 109
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/storage/JsonAdaptedPerson.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Phone;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Person}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedPerson {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedPerson(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Person} into this class for Jackson use."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedPerson(Person source) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            personTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return new Person(modelName, modelPhone, modelTags);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public List\u003cJsonAdaptedTag\u003e getTagged() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return tagged;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public String getPhone() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 6,
      "-": 80,
      "KendrickAng": 9
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/storage/JsonAdaptedSlot.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Slot;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " * Jackson-friendly version of (@link Slot}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "public class JsonAdaptedSlot {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    private final String slot;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * Constructs a {@code JsonAdaptedSlot} with the given {@code slot}s"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public JsonAdaptedSlot(String slot) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        this.slot \u003d slot;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Converts a given {@code Slot} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public JsonAdaptedSlot(Slot source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        this.slot \u003d source.toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public String getSlot() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        return this.slot;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Converts this Jackson-friendly adapted department object into the model\u0027s {@code Department} object."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted department."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public Slot toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        return Slot.fromString(this.slot);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 10,
      "KendrickAng": 35
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/storage/JsonAdaptedTag.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Tag}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedTag {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String tagName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(String tagName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Tag} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(Tag source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        tagName \u003d source.tagName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getTagName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(tagName)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(tagName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 3,
      "-": 45
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/storage/JsonIntervieweeListStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.ReadOnlyList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Interviewee;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dcshzj"
        },
        "content": " * A class to read Interviewee data stored as a JSON file on the hard disk."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dcshzj"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "public class JsonIntervieweeListStorage implements IntervieweeListStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonIntervieweeListStorage.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public JsonIntervieweeListStorage(Path filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public Path getIntervieweeListFilePath() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        return this.filePath;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public Optional\u003cReadOnlyList\u003cInterviewee\u003e\u003e readIntervieweeList() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        return this.readIntervieweeList(this.filePath);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public Optional\u003cReadOnlyList\u003cInterviewee\u003e\u003e readIntervieweeList(Path filePath) throws DataConversionException,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        Optional\u003cJsonSerializableIntervieweeList\u003e jsonIntervieweeList \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                filePath, JsonSerializableIntervieweeList.class);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        if (!jsonIntervieweeList.isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            return Optional.of(jsonIntervieweeList.get().toModelType());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public void saveIntervieweeList(ReadOnlyList\u003cInterviewee\u003e intervieweeList) throws IOException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        this.saveIntervieweeList(intervieweeList, this.filePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public void saveIntervieweeList(ReadOnlyList\u003cInterviewee\u003e intervieweeList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        requireNonNull(intervieweeList);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableIntervieweeList(intervieweeList), filePath);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 71,
      "KendrickAng": 4
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/storage/JsonInterviewerListStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.ReadOnlyList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Interviewer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dcshzj"
        },
        "content": " * A class to read Interviewer data stored as a JSON file on the hard disk."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dcshzj"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "public class JsonInterviewerListStorage implements InterviewerListStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonInterviewerListStorage.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public JsonInterviewerListStorage(Path filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public Path getInterviewerListFilePath() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        return this.filePath;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public Optional\u003cReadOnlyList\u003cInterviewer\u003e\u003e readInterviewerList() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        return this.readInterviewerList(this.filePath);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public Optional\u003cReadOnlyList\u003cInterviewer\u003e\u003e readInterviewerList(Path filePath) throws DataConversionException,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        Optional\u003cJsonSerializableInterviewerList\u003e jsonInterviewerList \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                filePath, JsonSerializableInterviewerList.class);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        if (!jsonInterviewerList.isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            return Optional.of(jsonInterviewerList.get().toModelType());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public void saveInterviewerList(ReadOnlyList\u003cInterviewer\u003e interviewerList) throws IOException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        this.saveInterviewerList(interviewerList, this.filePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public void saveInterviewerList(ReadOnlyList\u003cInterviewer\u003e interviewerList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        requireNonNull(interviewerList);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableInterviewerList(interviewerList), filePath);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 71,
      "KendrickAng": 4
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/storage/JsonSerializableIntervieweeList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.IntervieweeList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.ReadOnlyList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Interviewee;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dcshzj"
        },
        "content": " * An Immutable IntervieweeList that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dcshzj"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "@JsonRootName(value \u003d \"interviewees\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "public class JsonSerializableIntervieweeList {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_INTERVIEWEE \u003d \"Interviewee list contains duplicate interviewee(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    private final List\u003cJsonAdaptedInterviewee\u003e interviewees \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * Constructs a {@code JsonSerializableIntervieweeList} with the given Interviewees."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public JsonSerializableIntervieweeList(@JsonProperty(\"interviewees\") List\u003cJsonAdaptedInterviewee\u003e interviewees) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        this.interviewees.addAll(interviewees);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Converts a given {@code ReadOnlyList\u003cInterviewee\u003e} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableIntervieweeList}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public JsonSerializableIntervieweeList(ReadOnlyList\u003cInterviewee\u003e source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        this.interviewees.addAll(source.getEntityList().stream()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                .map(JsonAdaptedInterviewee::new)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * Converts this Interviewee list into the model\u0027s {@code IntervieweeList} object."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public IntervieweeList toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        IntervieweeList intervieweeList \u003d new IntervieweeList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        for (JsonAdaptedInterviewee jsonAdaptedInterviewee : this.interviewees) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            Interviewee interviewee \u003d jsonAdaptedInterviewee.toModelType();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            if (intervieweeList.hasEntity(interviewee)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_INTERVIEWEE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            intervieweeList.addEntity(interviewee);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        return intervieweeList;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 61,
      "KendrickAng": 5
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/storage/JsonSerializableInterviewerList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.InterviewerList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.ReadOnlyList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Interviewer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dcshzj"
        },
        "content": " * An Immutable InterviewerList that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dcshzj"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "@JsonRootName(value \u003d \"interviewers\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "public class JsonSerializableInterviewerList {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_INTERVIEWER \u003d \"Interviewer list contains duplicate interviewer(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    private final List\u003cJsonAdaptedInterviewer\u003e interviewers \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * Constructs a {@code JsonSerializableInterviewerList} with the given Interviewers."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public JsonSerializableInterviewerList(@JsonProperty(\"interviewers\") List\u003cJsonAdaptedInterviewer\u003e interviewers) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        this.interviewers.addAll(interviewers);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Converts a given {@code ReadOnlyList\u003cInterviewer\u003e} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableInterviewerList}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public JsonSerializableInterviewerList(ReadOnlyList\u003cInterviewer\u003e source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        this.interviewers.addAll(source.getEntityList().stream()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                .map(JsonAdaptedInterviewer::new)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * Converts this Interviewer list into the model\u0027s {@code InterviewerList} object."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public InterviewerList toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        InterviewerList interviewerList \u003d new InterviewerList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        for (JsonAdaptedInterviewer jsonAdaptedInterviewer : this.interviewers) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            Interviewer interviewer \u003d jsonAdaptedInterviewer.toModelType();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            if (interviewerList.hasEntity(interviewer)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_INTERVIEWER);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            interviewerList.addEntity(interviewer);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        return interviewerList;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 61,
      "KendrickAng": 5
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/storage/JsonUserPrefsStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 5,
      "-": 42
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/storage/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.ReadOnlyList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Interviewee;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Interviewer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "public interface Storage extends IntervieweeListStorage, InterviewerListStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d IntervieweeList \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    Path getIntervieweeListFilePath();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    Optional\u003cReadOnlyList\u003cInterviewee\u003e\u003e readIntervieweeList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    Optional\u003cReadOnlyList\u003cInterviewee\u003e\u003e readIntervieweeList(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    void saveIntervieweeList(ReadOnlyList\u003cInterviewee\u003e intervieweeList) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    void saveIntervieweeList(ReadOnlyList\u003cInterviewee\u003e intervieweeList, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d InterviewerList \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    Path getInterviewerListFilePath();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    Optional\u003cReadOnlyList\u003cInterviewer\u003e\u003e readInterviewerList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    Optional\u003cReadOnlyList\u003cInterviewer\u003e\u003e readInterviewerList(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    void saveInterviewerList(ReadOnlyList\u003cInterviewer\u003e interviewerList) throws IOException;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    void saveInterviewerList(ReadOnlyList\u003cInterviewer\u003e interviewerList, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 27,
      "-": 23,
      "KendrickAng": 10
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/storage/StorageManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.ReadOnlyList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Interviewee;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Interviewer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Manages storage of AddressBook data in local storage."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    private IntervieweeListStorage intervieweeListStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    private InterviewerListStorage interviewerListStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public StorageManager(IntervieweeListStorage intervieweeListStorage,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                          InterviewerListStorage interviewerListStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        this.intervieweeListStorage \u003d intervieweeListStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        this.interviewerListStorage \u003d interviewerListStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d IntervieweeList methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public Path getIntervieweeListFilePath() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        return this.intervieweeListStorage.getIntervieweeListFilePath();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public Optional\u003cReadOnlyList\u003cInterviewee\u003e\u003e readIntervieweeList() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        return readIntervieweeList(this.intervieweeListStorage.getIntervieweeListFilePath());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public Optional\u003cReadOnlyList\u003cInterviewee\u003e\u003e readIntervieweeList(Path filePath) throws DataConversionException,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            IOException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        logger.fine(\"Attempting to read interviewee data from file: \" + filePath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        return this.intervieweeListStorage.readIntervieweeList(filePath);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public void saveIntervieweeList(ReadOnlyList\u003cInterviewee\u003e intervieweeList) throws IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        saveIntervieweeList(intervieweeList, this.intervieweeListStorage.getIntervieweeListFilePath());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public void saveIntervieweeList(ReadOnlyList\u003cInterviewee\u003e intervieweeList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        logger.fine(\"Attempting to write to interviewee data file: \" + filePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        this.intervieweeListStorage.saveIntervieweeList(intervieweeList, filePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d InterviewerList methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public Path getInterviewerListFilePath() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        return this.interviewerListStorage.getInterviewerListFilePath();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public Optional\u003cReadOnlyList\u003cInterviewer\u003e\u003e readInterviewerList() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        return readInterviewerList(this.interviewerListStorage.getInterviewerListFilePath());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public Optional\u003cReadOnlyList\u003cInterviewer\u003e\u003e readInterviewerList(Path filePath) throws DataConversionException,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            IOException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        logger.fine(\"Attempting to read interviewer data from file: \" + filePath);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        return this.interviewerListStorage.readInterviewerList(filePath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public void saveInterviewerList(ReadOnlyList\u003cInterviewer\u003e interviewerList) throws IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        saveInterviewerList(interviewerList, this.interviewerListStorage.getInterviewerListFilePath());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public void saveInterviewerList(ReadOnlyList\u003cInterviewer\u003e interviewerList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        logger.fine(\"Attempting to write to interviewer data file: \" + filePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        this.interviewerListStorage.saveInterviewerList(interviewerList, filePath);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 50,
      "-": 55,
      "KendrickAng": 8
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/storage/UserPrefsStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dcshzj"
        },
        "content": " * Represents a storage for {@link UserPrefs}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * Saves the given {@link ReadOnlyUserPrefs} to the storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 6,
      "-": 30
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/ui/CommandBox.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.logic.Logic;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "         * @see Logic#execute(String)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 6,
      "-": 72
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/ui/HelpWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://ay1920s1-cs2103-f09-1.github.io/main/\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        root.sizeToScene();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 1,
      "dcshzj": 2,
      "-": 100
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/ui/IntervieweeListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "import javafx.scene.control.TableColumn;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "import javafx.scene.control.TableView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "import javafx.scene.control.cell.PropertyValueFactory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Interviewee;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": " * Panel containing the list of interviewee."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "public class IntervieweeListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private static final String FXML \u003d \"IntervieweeListPanel.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(IntervieweeListPanel.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    private ObservableList\u003cInterviewee\u003e intervieweeList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    private TableView intervieweeTableView;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    IntervieweeListPanel(ObservableList\u003cInterviewee\u003e intervieweeList) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        this.intervieweeList \u003d intervieweeList;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        initialise();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * Set the columns and the data from each column"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    private void initialise() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        setTableColumn();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        this.intervieweeTableView.setColumnResizePolicy(TableView.UNCONSTRAINED_RESIZE_POLICY);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        this.intervieweeTableView.setItems(this.intervieweeList);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * Set the table columns."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    private void setTableColumn() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        TableColumn\u003cObservableList\u003cString\u003e, String\u003e nameTitle \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                new TableColumn\u003cObservableList\u003cString\u003e, String\u003e(\"Name\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        nameTitle.setCellValueFactory(new PropertyValueFactory\u003cObservableList\u003cString\u003e, String\u003e(\"Name\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        editTableColumn(nameTitle);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        TableColumn\u003cObservableList\u003cString\u003e, String\u003e phoneTitle \u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                new TableColumn\u003cObservableList\u003cString\u003e, String\u003e(\"Phone\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        phoneTitle.setCellValueFactory(new PropertyValueFactory\u003cObservableList\u003cString\u003e, String\u003e(\"phoneTitle\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        editTableColumn(phoneTitle);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        TableColumn\u003cObservableList\u003cString\u003e, String\u003e emailTitle \u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                new TableColumn\u003cObservableList\u003cString\u003e, String\u003e(\"Emails\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        emailTitle.setCellValueFactory(new PropertyValueFactory\u003cObservableList\u003cString\u003e, String\u003e(\"Emails\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        editTableColumn(emailTitle);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        TableColumn\u003cObservableList\u003cString\u003e, String\u003e facultyTitle \u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                new TableColumn\u003cObservableList\u003cString\u003e, String\u003e(\"Faculty\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        facultyTitle.setCellValueFactory(new PropertyValueFactory\u003cObservableList\u003cString\u003e, String\u003e(\"Faculty\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        editTableColumn(facultyTitle);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        TableColumn\u003cObservableList\u003cString\u003e, String\u003e yearTitle \u003d"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                new TableColumn\u003cObservableList\u003cString\u003e, String\u003e(\"Academic Year\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        yearTitle.setCellValueFactory(new PropertyValueFactory\u003cObservableList\u003cString\u003e, String\u003e(\"yearOfStudy\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        editTableColumn(yearTitle);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        TableColumn\u003cObservableList\u003cString\u003e, String\u003e departmentTitle \u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                new TableColumn\u003cObservableList\u003cString\u003e, String\u003e(\"Department Choices\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        departmentTitle.setCellValueFactory("
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                new PropertyValueFactory\u003cObservableList\u003cString\u003e, String\u003e(\"DepartmentChoices\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        editTableColumn(departmentTitle);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        TableColumn\u003cObservableList\u003cString\u003e, String\u003e timeSlotTitle \u003d"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                new TableColumn\u003cObservableList\u003cString\u003e, String\u003e(\"Time Slots\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        timeSlotTitle.setCellValueFactory("
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                new PropertyValueFactory\u003cObservableList\u003cString\u003e, String\u003e(\"AvailableTimeslots\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        editTableColumn(timeSlotTitle);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        TableColumn\u003cObservableList\u003cString\u003e, String\u003e tagTitle \u003d"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                new TableColumn\u003cObservableList\u003cString\u003e, String\u003e(\"Tags\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        tagTitle.setCellValueFactory(new PropertyValueFactory\u003cObservableList\u003cString\u003e, String\u003e(\"Tags\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        editTableColumn(tagTitle);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        intervieweeTableView.getColumns().addAll(nameTitle, emailTitle, facultyTitle, yearTitle,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                departmentTitle, timeSlotTitle, tagTitle);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * Create a new TableColumn object."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * @param tableColumn The titles for each columns."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    private void editTableColumn(TableColumn tableColumn) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        tableColumn.setReorderable(false);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        tableColumn.setMinWidth(80);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    protected void listUpdated(ObservableList\u003cInterviewee\u003e newIntervieweeList) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        clearData();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        this.intervieweeTableView.setItems(newIntervieweeList);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    protected void clearData() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        this.intervieweeTableView.getItems().removeAll();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mrchensheng21": 75,
      "dcshzj": 3,
      "KendrickAng": 26
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/ui/InterviewerListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "import javafx.scene.control.TableColumn;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "import javafx.scene.control.TableView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "import javafx.scene.control.cell.PropertyValueFactory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Interviewer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": " * Panel containing the list of interviewer."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "public class InterviewerListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private static final String FXML \u003d \"InterviewerListPanel.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(InterviewerListPanel.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    private ObservableList\u003cInterviewer\u003e interviewerList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    private TableView interviewerTableView;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    InterviewerListPanel(ObservableList\u003cInterviewer\u003e interviewerList) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        this.interviewerList \u003d interviewerList;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        initialise();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * Set the columns and the data from each column"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    private void initialise() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        setTableColumn();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        this.interviewerTableView.setColumnResizePolicy(TableView.CONSTRAINED_RESIZE_POLICY);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        this.interviewerTableView.setItems(this.interviewerList);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * Set the table columns."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    private void setTableColumn() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        createNewTableColumn(\"Name\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        createNewTableColumn(\"Phone\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        createNewTableColumn(\"Department\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        createNewTableColumn(\"Availabilities\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        createNewTableColumn(\"Tags\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * Create a new TableColumn object."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * @param titles The titles for each columns."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    private void createNewTableColumn(String titles) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        TableColumn\u003cObservableList\u003cString\u003e, String\u003e columnTitle \u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                new TableColumn\u003cObservableList\u003cString\u003e, String\u003e("
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                        titles"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                );"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        columnTitle.setReorderable(false);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        columnTitle.setMinWidth(80);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        columnTitle.setCellValueFactory(new PropertyValueFactory\u003cObservableList\u003cString\u003e, String\u003e(titles));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        interviewerTableView.getColumns().add(columnTitle);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    protected void listUpdated(ObservableList\u003cInterviewer\u003e newInterviewerList) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        clearData();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        this.interviewerTableView.setItems(newInterviewerList);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    protected void clearData() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        this.interviewerTableView.getItems().removeAll();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "mrchensheng21": 55,
      "dcshzj": 3,
      "KendrickAng": 25
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/ui/MainWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import javafx.scene.control.Tab;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import javafx.scene.control.TabPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.logic.Logic;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "import seedu.scheduler.model.person.Interviewee;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "import seedu.scheduler.model.person.Interviewer;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private IntervieweeListPanel intervieweeListPanel;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private InterviewerListPanel interviewerListPanel;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    private ScheduleViewPanel scheduleViewPanel;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    private StackPane schedulePanelPlaceholder;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private TabPane tabPane;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private Tab schedulesTab;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    private StackPane schedulesPlaceholder;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private Tab intervieweeListTab;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    private StackPane intervieweeListPlaceholder;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private Tab interviewerListTab;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    private StackPane interviewerListPlaceholder;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "         * For now, we addEntity following event filter to capture such key events and open"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        tabPane.setTabClosingPolicy(TabPane.TabClosingPolicy.UNAVAILABLE);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        scheduleViewPanel \u003d new ScheduleViewPanel(logic.getTitlesLists(), logic.getObservableLists());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        schedulePanelPlaceholder.getChildren().add(scheduleViewPanel.getRoot());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        intervieweeListPanel \u003d new IntervieweeListPanel(logic.getFilteredIntervieweeList());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        intervieweeListPlaceholder.getChildren().add(intervieweeListPanel.getRoot());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        interviewerListPanel \u003d new InterviewerListPanel(logic.getFilteredInterviewerList());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        interviewerListPlaceholder.getChildren().add(interviewerListPanel.getRoot());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getAddressBookFilePath());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     * Signals the scheduleview panel that the data of the schedules are updated."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    public void scheduleDataUpdated(List\u003cList\u003cString\u003e\u003e newTitles,"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                List\u003cObservableList\u003cObservableList\u003cString\u003e\u003e\u003e newSchedules) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        scheduleViewPanel.dataUpdated(newTitles, newSchedules);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * Signals the interviewer list or interviewee list that the data has been updated"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    public void intervieweeListUpdated(ObservableList\u003cInterviewee\u003e newIntervieweeList) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        intervieweeListPanel.listUpdated(newIntervieweeList);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    public void interviewerListUpdated(ObservableList\u003cInterviewer\u003e newInterviewerList) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        interviewerListPanel.listUpdated(newInterviewerList);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    public void changeTab(int index) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        tabPane.getSelectionModel().select(index);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * @see Logic#execute(String)"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mrchensheng21": 32,
      "mirozo": 8,
      "dcshzj": 8,
      "-": 179,
      "KendrickAng": 23
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/ui/RefreshListener.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": " * API of refresh listener."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "public interface RefreshListener {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * Refresh the Ui when data is imported from .csv file."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    void scheduleDataUpdated();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * Refresh the Ui when interviewee data is updated"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    void intervieweeListUpdated();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * Refresh the Ui when interviewer data is updated"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    void interviewerListUpdated();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mrchensheng21": 20,
      "mirozo": 1,
      "dcshzj": 1
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/ui/ResultDisplay.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 1,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/ui/ScheduleView.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "import javafx.beans.property.ReadOnlyObjectWrapper;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "import javafx.scene.control.TableColumn;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "import javafx.scene.control.TableView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": " * Table consisting of timetables of scheduling."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "public class ScheduleView extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    private static final String FXML \u003d \"ScheduleView.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    private List\u003cString\u003e titles;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    private ObservableList\u003cObservableList\u003cString\u003e\u003e schedule; // Excluding titles"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    private TableView tableView;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    ScheduleView(List\u003cString\u003e titles, ObservableList\u003cObservableList\u003cString\u003e\u003e schedule) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        this.titles \u003d titles;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        this.schedule \u003d schedule;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        initialise();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * Allow the creation of table."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    private void initialise() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        for (int i \u003d 0; i \u003c this.titles.size(); i++) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            final int finalIdx \u003d i;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            TableColumn\u003cObservableList\u003cString\u003e, String\u003e column \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                    new TableColumn\u003cObservableList\u003cString\u003e, String\u003e("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                            this.titles.get(i)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                    );"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            column.setCellValueFactory(param -\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                    new ReadOnlyObjectWrapper\u003c\u003e(param.getValue().get(finalIdx))"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            );"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            column.setSortable(false);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            column.setReorderable(false);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            column.setMinWidth(300);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            this.tableView.getColumns().add(column);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            this.tableView.setColumnResizePolicy(TableView.UNCONSTRAINED_RESIZE_POLICY);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        this.tableView.setItems(this.schedule);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "mrchensheng21": 52,
      "ChrisKheng": 1,
      "dcshzj": 1
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/ui/ScheduleViewCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "package seedu.scheduler.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": " * An UI component that displays information of a {@code ScheduleViewCard}."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "public class ScheduleViewCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    private static final String FXML \u003d \"ScheduleViewCard.fxml\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    public final ScheduleView schedule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    private StackPane scheduleViewPane;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    public ScheduleViewCard(ScheduleView schedule) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        this.schedule \u003d schedule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        scheduleViewPane.getChildren().setAll(schedule.getRoot());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mrchensheng21": 23
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/ui/ScheduleViewPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "import seedu.scheduler.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": " * Panel consisting a of schedules"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mirozo"
        },
        "content": "public class ScheduleViewPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    private static final String FXML \u003d \"ScheduleViewPanel.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ScheduleViewPanel.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    private List\u003cObservableList\u003cObservableList\u003cString\u003e\u003e\u003e scheduleList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    private List\u003cScheduleView\u003e scheduleViewList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    private List\u003cList\u003cString\u003e\u003e titles;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    private ListView\u003cScheduleView\u003e scheduleListView;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    public ScheduleViewPanel(List\u003cList\u003cString\u003e\u003e titles,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                             List\u003cObservableList\u003cObservableList\u003cString\u003e\u003e\u003e scheduleList) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        this.titles \u003d titles;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        this.scheduleList \u003d scheduleList;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        this.scheduleViewList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        fillPanel();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * Fill the schedule view panel with schedule tables."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    private void fillPanel() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        for (int i \u003d 0; i \u003c this.scheduleList.size(); i++) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            scheduleViewList.add(new ScheduleView(this.titles.get(i), this.scheduleList.get(i)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        ObservableList\u003cScheduleView\u003e scheduleViewsObservable \u003d FXCollections.observableArrayList(scheduleViewList);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        scheduleListView.setItems(scheduleViewsObservable);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        scheduleListView.setCellFactory(listView -\u003e new ScheduleListViewCell());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code ScheduleView} using a {@code ScheduleViewCard}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    class ScheduleListViewCell extends ListCell\u003cScheduleView\u003e {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        protected void updateItem(ScheduleView schedule, boolean empty) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            super.updateItem(schedule, empty);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            if (empty || schedule \u003d\u003d null) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                setGraphic(new ScheduleViewCard(schedule).getRoot());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * Update table with new data from import."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * @param titles The new column titles."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * @param newSchedules The new data consisting of different schedules."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    public void dataUpdated(List\u003cList\u003cString\u003e\u003e titles, List\u003cObservableList\u003cObservableList\u003cString\u003e\u003e\u003e newSchedules) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        clearData();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        this.titles \u003d titles;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        this.scheduleList \u003d newSchedules;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        for (int i \u003d 0; i \u003c this.scheduleList.size(); i++) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            scheduleViewList.add(new ScheduleView(this.titles.get(i), this.scheduleList.get(i)));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        ObservableList\u003cScheduleView\u003e scheduleViewsObservable \u003d FXCollections.observableArrayList(scheduleViewList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        scheduleListView.setItems(scheduleViewsObservable);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        scheduleListView.setCellFactory(listView -\u003e new ScheduleListViewCell());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * Clear the data in UI."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    protected void clearData() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        this.scheduleViewList.clear();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "mrchensheng21": 93,
      "ChrisKheng": 1,
      "mirozo": 5,
      "dcshzj": 1
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/ui/StatusBarFooter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label saveLocationStatus;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooter(Path saveLocation) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 1,
      "-": 25
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/ui/TabListener.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "package seedu.scheduler.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": " * API of TabListener."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "public interface TabListener {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * Signal main window to change to schedule tab."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    void changeTabSchedule();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * Signal main window to change to interviewee tab."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    void changeTabInterviewee();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * Signal main window to change to interviewer tab."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    void changeTabInterviewer();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mrchensheng21": 22
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/ui/Ui.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * API of UI component"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "public interface Ui extends RefreshListener, TabListener {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Starts the UI (and the App).  */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    void start(Stage primaryStage);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    default void intervieweeListUpdated() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mrchensheng21": 5,
      "dcshzj": 1,
      "-": 11
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/ui/UiManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "public class UiManager implements Ui, TabListener, RefreshListener {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/address_book_32.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     * Signals the main window that the data of schedules are updated."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    public void scheduleDataUpdated() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        mainWindow.scheduleDataUpdated(logic.getTitlesLists(), logic.getObservableLists());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * Signals the main window that list of interviewee is updated."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    public void intervieweeListUpdated() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        mainWindow.intervieweeListUpdated(logic.getFilteredIntervieweeList());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    public void changeTabSchedule() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        mainWindow.changeTab(0);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    public void changeTabInterviewer() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        mainWindow.changeTab(2);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    public void changeTabInterviewee() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        mainWindow.changeTab(1);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * Signals the main window that list of interviewer is updated."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    public void interviewerListUpdated() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        mainWindow.interviewerListUpdated(logic.getFilteredInterviewerList());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mrchensheng21": 27,
      "mirozo": 7,
      "dcshzj": 5,
      "-": 80
    }
  },
  {
    "path": "src/main/java/seedu/scheduler/ui/UiPart.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Resource folder where FXML files are stored. */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 2,
      "-": 86,
      "KendrickAng": 1
    }
  },
  {
    "path": "src/main/resources/view/IntervieweeListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\u003cHBox id\u003d\"intervieweeCardPane\" fx:id\u003d\"intervieweeCardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "KendrickAng": 34
    }
  },
  {
    "path": "src/main/resources/view/IntervieweeListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "\u003c?import javafx.scene.control.TableView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    \u003cTableView fx:id\u003d\"intervieweeTableView\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            \u003cURL value\u003d\"@TableView.css\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    \u003c/TableView\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "mrchensheng21": 7,
      "KendrickAng": 6
    }
  },
  {
    "path": "src/main/resources/view/InterviewerListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\u003cHBox id\u003d\"interviewerCardPane\" fx:id\u003d\"interviewerCardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "KendrickAng": 34
    }
  },
  {
    "path": "src/main/resources/view/InterviewerListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "\u003c?import javafx.scene.control.TableView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    \u003cTableView fx:id\u003d\"interviewerTableView\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            \u003cURL value\u003d\"@TableView.css\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    \u003c/TableView\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\u003c/VBox\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "mrchensheng21": 7,
      "KendrickAng": 7
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "\u003c?import javafx.scene.control.TabPane?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "\u003c?import javafx.scene.control.Tab?\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "         title\u003d\"Scheduler App\" minWidth\u003d\"760\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    \u003cScene xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "      \u003croot\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cVBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "          \u003cchildren\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "              \u003cmenus\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                  \u003citems\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                  \u003c/items\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/Menu\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                  \u003citems\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                  \u003c/items\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/Menu\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "              \u003c/menus\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cpadding\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003c/padding\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"100\" minHeight\u003d\"100\" prefHeight\u003d\"100\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cpadding\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003c/padding\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            \u003cTabPane fx:id\u003d\"tabPane\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "              \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                \u003cURL value\u003d\"@TabView.css\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "              \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            \u003ctabs\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                \u003cTab fx:id\u003d\"scheduleTab\" text\u003d\"Schedules\"\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                  \u003cStackPane fx:id\u003d\"schedulePanelPlaceholder\" xmlns\u003d\"http://javafx.com/javafx/8\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                             xmlns:fx\u003d\"http://javafx.com/fxml/1\" minWidth\u003d\"340\" prefWidth\u003d\"340\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                      \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                  \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                \u003c/Tab\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                \u003cTab fx:id\u003d\"intervieweeTab\" text\u003d\"Interviewee\"\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                  \u003cStackPane fx:id\u003d\"intervieweeListPlaceholder\" xmlns\u003d\"http://javafx.com/javafx/8\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                           xmlns:fx\u003d\"http://javafx.com/fxml/1\" minWidth\u003d\"340\" prefWidth\u003d\"340\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                      \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                  \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                \u003c/Tab\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                \u003cTab fx:id\u003d\"interviewerTab\" text\u003d\"Interviewer\"\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                  \u003cStackPane fx:id\u003d\"interviewerListPlaceholder\" xmlns\u003d\"http://javafx.com/javafx/8\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                         xmlns:fx\u003d\"http://javafx.com/fxml/1\" minWidth\u003d\"340\" prefWidth\u003d\"340\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                      \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                  \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                \u003c/Tab\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "              \u003c/tabs\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            \u003c/TabPane\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "          \u003c/children\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "      \u003c/root\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "mrchensheng21": 32,
      "ChrisKheng": 1,
      "-": 41,
      "KendrickAng": 18
    }
  },
  {
    "path": "src/main/resources/view/ScheduleView.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        \u003cInsets bottom\u003d\"60\" left\u003d\"5\" right\u003d\"5\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    \u003cTableView fx:id\u003d\"tableView\" VBox.vgrow\u003d\"ALWAYS\" \u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            \u003cURL value\u003d\"@TableView.css\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    \u003c/TableView\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "mrchensheng21": 17
    }
  },
  {
    "path": "src/main/resources/view/ScheduleViewCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "\u003cStackPane id\u003d\"scheduleViewPane\" fx:id\u003d\"scheduleViewPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    minWidth\u003d\"340\" prefWidth\u003d\"340\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        \u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "mrchensheng21": 7
    }
  },
  {
    "path": "src/main/resources/view/ScheduleViewPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "\u003cListView xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "          fx:id\u003d\"scheduleListView\" VBox.vgrow\u003d\"ALWAYS\" \u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "\u003c/ListView\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "mrchensheng21": 9
    }
  },
  {
    "path": "src/main/resources/view/TabView.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ".tab-pane .tab-header-area .tab-header-background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    -fx-opacity: 0;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "}"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ".tab-pane"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "{"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    -fx-tab-min-width:90px;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ".tab{"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    -fx-background-insets: 0 1 0 1,0,0;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ".tab-pane .tab"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "{"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    -fx-background-color: #e6e6e6;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ".tab-pane .tab:selected"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "{"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    -fx-background-color: #3c3c3c;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ".tab .tab-label {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    -fx-alignment: CENTER;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    -fx-text-fill: #828282;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    -fx-font-size: 12px;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ".tab:selected .tab-label {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    -fx-alignment: CENTER;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    -fx-text-fill: #96b946;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mrchensheng21": 34
    }
  },
  {
    "path": "src/main/resources/view/TableView.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "//Style of entire tableView"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    /*-fx-background-color: transparent;*/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": " }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": " //Style of entire tableView when is getting focused"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ".table-view:focused {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    /*-fx-background-color: transparent;*/"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "//Style of each column header in the tableView"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ".table-view .column-header {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     -fx-background-color: transparent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "//Style of each column header\u0027s background in the tableView"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    -fx-background-color: linear-gradient(#131313 0.0%, #424141 100.0%);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": " //Style of each column header\u0027s label in the tableView"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ".table-view .column-header-background .label {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    -fx-font-weight:bold;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    -fx-font-size: 15px;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": " //Style of each table cell"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ".table-view .table-cell {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    -fx-font-weight:bold;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    -fx-font-size:15px;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "//Style of each entire row in the table view when is hovered"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ".table-row-cell:hover {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    -fx-background-color:rgb(255, 179, 37);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mrchensheng21": 39
    }
  },
  {
    "path": "src/main/resources/view/TableView.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "\u003c?import javafx.scene.control.TableColumn?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "\u003c?import javafx.scene.control.TableView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "\u003c?import javafx.scene.control.cell.PropertyValueFactory?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"593.0\" maxWidth\u003d\"726.0\" minHeight\u003d\"593.0\" minWidth\u003d\"726.0\" prefHeight\u003d\"593.0\" prefWidth\u003d\"726.0\" styleClass\u003d\"root\" xmlns\u003d\"http://javafx.com/javafx/8.0.111\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"seedu.scheduler.ui.MainWindow\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        \u003cVBox prefHeight\u003d\"400.0\" prefWidth\u003d\"600.0\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"AS_NEEDED\" vbarPolicy\u003d\"AS_NEEDED\" hvalue\u003d\"1.0\" layoutX\u003d\"4.0\" prefHeight\u003d\"593.0\" prefWidth\u003d\"726.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                    \u003ccontent\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                        \u003cTableView fx:id\u003d\"table\" prefHeight\u003d\"520.0\" prefWidth\u003d\"932.0\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                            \u003ccolumns\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                                \u003cTableColumn prefWidth\u003d\"130.0\" text\u003d\"Full Name\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                                    \u003ccellValueFactory\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                                        \u003cPropertyValueFactory property\u003d\"fullName\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                                    \u003c/cellValueFactory\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                                \u003c/TableColumn\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                                \u003cTableColumn fx:id\u003d\"nusEmailColumn\" prefWidth\u003d\"120.0\" text\u003d\"NUS Email\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                                    \u003ccellValueFactory\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                                        \u003cPropertyValueFactory property\u003d\"nusEmail\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                                    \u003c/cellValueFactory\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                                \u003c/TableColumn\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                                \u003cTableColumn prefWidth\u003d\"120.0\" text\u003d\"Personal Email\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                                    \u003ccellValueFactory\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                                        \u003cPropertyValueFactory property\u003d\"personalEmail\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                                    \u003c/cellValueFactory\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                                \u003c/TableColumn\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                                \u003cTableColumn fx:id\u003d\"mobileNumberColumn\" prefWidth\u003d\"90.0\" text\u003d\"Mobile\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                                    \u003ccellValueFactory\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                                        \u003cPropertyValueFactory property\u003d\"mobileNumber\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                                    \u003c/cellValueFactory\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                                \u003c/TableColumn\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                                \u003cTableColumn fx:id\u003d\"schoolColumn\" prefWidth\u003d\"90.0\" text\u003d\"School/Faculty\"\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                                    \u003ccellValueFactory\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                                        \u003cPropertyValueFactory property\u003d\"school\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                                    \u003c/cellValueFactory\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                                \u003c/TableColumn\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                                \u003cTableColumn fx:id\u003d\"acadYearColumn\" prefWidth\u003d\"50.0\" text\u003d\"Acad Year\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                                    \u003ccellValueFactory\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                                        \u003cPropertyValueFactory property\u003d\"acadYear\" /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                                    \u003c/cellValueFactory\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                                \u003c/TableColumn\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                                \u003cTableColumn fx:id\u003d\"choiceOneColumn\" prefWidth\u003d\"90.0\" text\u003d\"Choice of Department 1\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                                    \u003ccellValueFactory\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                                        \u003cPropertyValueFactory property\u003d\"choiceOne\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                                    \u003c/cellValueFactory\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                                \u003c/TableColumn\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                                \u003cTableColumn fx:id\u003d\"choiceTwoColumn\" prefWidth\u003d\"90.0\" text\u003d\"Choice of Department 2\"\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                                    \u003ccellValueFactory\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                                        \u003cPropertyValueFactory property\u003d\"choiceTwo\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                                    \u003c/cellValueFactory\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                                \u003c/TableColumn\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                                \u003cTableColumn fx:id\u003d\"timeSlotColumn\" prefWidth\u003d\"150.0\" text\u003d\"Preferred Time\"\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                                    \u003ccellValueFactory\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                                        \u003cPropertyValueFactory property\u003d\"timeSlot\" /\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                                    \u003c/cellValueFactory\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                                \u003c/TableColumn\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                            \u003c/columns\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                        \u003c/TableView\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                    \u003c/content\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                \u003cTextField fx:id\u003d\"userInput\" layoutX\u003d\"7.0\" layoutY\u003d\"538.0\" prefHeight\u003d\"100.0\" prefWidth\u003d\"329.0\" /\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                \u003cTextField fx:id\u003d\"outputMessage\" layoutX\u003d\"7.0\" layoutY\u003d\"538.0\" prefHeight\u003d\"200.0\" prefWidth\u003d\"329.0\"/\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "mrchensheng21": 72,
      "dcshzj": 1
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/AppParametersTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParametersTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ParametersStub parametersStub \u003d new ParametersStub();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AppParameters expected \u003d new AppParameters();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validConfigPath_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"config.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(Paths.get(\"config.json\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_nullConfigPath_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidConfigPath_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"a\\0\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class ParametersStub extends Application.Parameters {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        private Map\u003cString, String\u003e namedParameters \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getRaw() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getUnnamed() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        public Map\u003cString, String\u003e getNamed() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return Collections.unmodifiableMap(namedParameters);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 1,
      "-": 57
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/commons/core/ConfigTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        String defaultConfigAsString \u003d \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 1,
      "-": 26
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/commons/core/VersionTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class VersionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_acceptableVersionString_parsedVersionCorrectly() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_wrongVersionString_throwIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e Version.fromString(\"This is not a version string\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionConstructor_correctParameter_valueAsExpected() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(19, 10, 20, true);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(19, version.getMajor());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(10, version.getMinor());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(20, version.getPatch());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(true, version.isEarlyAccess());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionToString_validVersion_correctStringRepresentation() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // boundary at 0"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V0.0.0ea\", version.toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // normal values"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(4, 10, 5, false);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V4.10.5\", version.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // big numbers"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V100.100.100ea\", version.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_compareToIsCorrect() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests equality"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different patch"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 5, false);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different minor"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 5, 0, false);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different major"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high major vs low minor"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, true);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high patch vs low minor"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 10, false);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, false);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests same major minor different patch"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access vs not early access on same version number"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access lower version vs not early access higher version compare by version number first"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access higher version vs not early access lower version compare by version number first"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, true);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_hashCodeIsCorrect() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(100100100, version.hashCode());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(10, 10, 10, false);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1010010010, version.hashCode());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_equalIsCorrect() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private void verifyVersionParsedCorrectly(String versionString,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 2,
      "-": 133
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/commons/core/index/IndexTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        final Index fifthPersonIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(fifthPersonIndex));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(5.0f));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 2,
      "-": 58
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/commons/util/AppUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/address_book_32.png\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 2,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/commons/util/CollectionUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtilTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullVarargs() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // no arguments"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // any non-empty argument list"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(new Object(), new Object());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"test\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with just one null at the beginning"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object) null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, \"\", new Object());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, new Object(), new Object());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with nulls in the middle"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", null, new Object());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with one null as the last argument"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", new Object(), null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), new Object(), null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object[]) null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside lists in the argument list are not considered"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(containingNull, new Object());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullCollection() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the front"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList((Object) null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the middle"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls at the end"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty list"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Collections.emptyList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // list with all non-null elements"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside nested lists are not considered"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isAnyNonNull() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object) null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code objects} or any element of {@code objects} is null."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Object... objects) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(objects));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code collection} or any element of {@code collection} is null."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(collection));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Object... objects) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(objects);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(collection);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 3,
      "-": 105
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/commons/util/ConfigUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.commons.core.Config;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtilTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path tempDir;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e read(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(read(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e read(\"NotJsonFormatConfig.json\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"TypicalConfig.json\").get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"EmptyConfig.json\").get();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Config(), actual);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"ExtraValuesConfig.json\").get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config getTypicalConfig() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d new Config();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setLogLevel(Level.INFO);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return ConfigUtil.readConfig(configFilePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullConfig_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullFile_throwsNullPointerException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(new Config(), null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Config original \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d tempDir.resolve(\"TempConfig.json\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setLogLevel(Level.FINE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void save(Config config, String configFileInTestDataFolder) throws IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(config, configFilePath);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return configFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                                  ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                                  : null;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 4,
      "-": 112
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/commons/util/FileUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtilTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPath() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid path"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(FileUtil.isValidPath(\"valid/file/path\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid path"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(FileUtil.isValidPath(\"a\\0\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // null path -\u003e throws NullPointerException"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e FileUtil.isValidPath(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 2,
      "-": 21
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/commons/util/JsonUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.testutil.SerializableTestClass;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.testutil.TestUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests JSON Read and Write"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtilTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SERIALIZATION_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"serialize.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        serializableTestClass.setTestValues();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE), SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d JsonUtil"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 3,
      "-": 42
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/commons/util/StringUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isNonZeroUnsignedInteger() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", ()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"  \"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter should be a single word\", ()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(null, \"abc\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            .contains(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 2,
      "-": 141
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/logic/LogicManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.DEPARTMENT_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.EMAIL_NUS_WORK_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.ROLE_DESC_AMY_INTVR;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.SLOT_DESC_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.scheduler.testutil.TypicalPersons.AMY_INTERVIEWER_MANUAL;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.Model;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.ModelManager;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.ReadOnlyList;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.UserPrefs;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Interviewee;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Interviewer;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.storage.JsonIntervieweeListStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.storage.JsonInterviewerListStorage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.storage.StorageManager;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        JsonIntervieweeListStorage intervieweeListStorage \u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                new JsonIntervieweeListStorage(temporaryFolder.resolve(\"interviewee.json\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        JsonInterviewerListStorage interviewerListStorage \u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                new JsonInterviewerListStorage(temporaryFolder.resolve(\"interviewer.json\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        StorageManager storage \u003d new StorageManager(intervieweeListStorage, interviewerListStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseException(deleteCommand,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        JsonIntervieweeListStorage intervieweeListStorage \u003d"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                new JsonIntervieweeListIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionInterviewee.json\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        JsonInterviewerListStorage interviewerListStorage \u003d"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                new JsonInterviewerListIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionInterviewer.json\"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        StorageManager storage \u003d new StorageManager(intervieweeListStorage, interviewerListStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + ROLE_DESC_AMY_INTVR + NAME_DESC_AMY + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                + TAG_DESC_FRIEND + EMAIL_NUS_WORK_DESC_AMY + DEPARTMENT_DESC_AMY + SLOT_DESC_AMY;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        expectedModel.addInterviewer(AMY_INTERVIEWER_MANUAL);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getMutableIntervieweeList(), model.getMutableInterviewerList(),"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                new UserPrefs(), new LinkedList\u003c\u003e());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called for IntervieweeList."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public static class JsonIntervieweeListIoExceptionThrowingStub extends JsonIntervieweeListStorage {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        private JsonIntervieweeListIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        public void saveIntervieweeList(ReadOnlyList\u003cInterviewee\u003e intervieweeList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called for InterviewerList."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public static class JsonInterviewerListIoExceptionThrowingStub extends JsonInterviewerListStorage {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        private JsonInterviewerListIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        public void saveInterviewerList(ReadOnlyList\u003cInterviewer\u003e interviewerList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 1,
      "dcshzj": 53,
      "-": 118,
      "KendrickAng": 10
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/logic/commands/AddCommandIntegrationTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.testutil.TypicalPersons.ALICE_INTERVIEWEE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.testutil.TypicalPersons.ALICE_INTERVIEWER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.testutil.TypicalPersons.getTypicalIntervieweeList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.testutil.TypicalPersons.getTypicalInterviewerList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.IntervieweeList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.InterviewerList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Interviewee;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Interviewer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        model \u003d new ModelManager(new IntervieweeList(), new InterviewerList(), new UserPrefs(), new LinkedList\u003c\u003e());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public void execute_newInterviewee_success() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Interviewee validInterviewee \u003d ALICE_INTERVIEWEE;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getMutableIntervieweeList(), model.getMutableInterviewerList(),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                new UserPrefs(), new LinkedList\u003c\u003e());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        expectedModel.addInterviewee(validInterviewee);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertCommandSuccess(new AddIntervieweeCommand(validInterviewee), model,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validInterviewee), expectedModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public void execute_newInterviewer_success() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Interviewer validInterviewer \u003d ALICE_INTERVIEWER;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getMutableIntervieweeList(), model.getMutableInterviewerList(),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                new UserPrefs(), new LinkedList\u003c\u003e());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        expectedModel.addInterviewer(validInterviewer);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertCommandSuccess(new AddInterviewerCommand(validInterviewer), model,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validInterviewer), expectedModel);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public void execute_duplicateInterviewee_throwsCommandException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        model \u003d new ModelManager(getTypicalIntervieweeList(), getTypicalInterviewerList(),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                new UserPrefs(), new LinkedList\u003c\u003e());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Interviewee intervieweeInList \u003d model.getInterviewee(ALICE_INTERVIEWEE.getName().fullName);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertCommandFailure(new AddIntervieweeCommand(intervieweeInList), model, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 2,
      "dcshzj": 14,
      "-": 26,
      "KendrickAng": 26
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/logic/commands/AddIntervieweeCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.testutil.TypicalPersons.ALICE_INTERVIEWEE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.testutil.TypicalPersons.BOB_INTERVIEWEE_MANUAL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.IntervieweeList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.ModelStub;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.ReadAndWriteList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Interviewee;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "class AddIntervieweeCommandTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddIntervieweeCommand(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public void execute_intervieweeAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        ModelStubAcceptingIntervieweeAdded modelStub \u003d new ModelStubAcceptingIntervieweeAdded();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Interviewee validInterviewee \u003d ALICE_INTERVIEWEE;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        CommandResult commandResult \u003d new AddIntervieweeCommand(validInterviewee).execute(modelStub);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validInterviewee), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertEquals(Arrays.asList(validInterviewee), modelStub.intervieweesAdded);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public void execute_duplicateInterviewee_throwsCommandException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Interviewee validInterviewee \u003d ALICE_INTERVIEWEE;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        AddCommand addCommand \u003d new AddIntervieweeCommand(validInterviewee);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        ModelStubWithInterviewee modelStub \u003d new ModelStubWithInterviewee(validInterviewee);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_PERSON, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Interviewee alice \u003d ALICE_INTERVIEWEE;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Interviewee bob \u003d BOB_INTERVIEWEE_MANUAL;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddIntervieweeCommand(alice);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        AddCommand addBobCommand \u003d new AddIntervieweeCommand(bob);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddIntervieweeCommand(alice);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // different interviewee -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private class ModelStubWithInterviewee extends ModelStub {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        private final Interviewee interviewee;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        ModelStubWithInterviewee(Interviewee interviewee) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            requireNonNull(interviewee);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            this.interviewee \u003d interviewee;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        public boolean hasInterviewee(Interviewee interviewee) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            requireNonNull(interviewee);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            return this.interviewee.isSamePerson(interviewee);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private class ModelStubAcceptingIntervieweeAdded extends ModelStub {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        final ArrayList\u003cInterviewee\u003e intervieweesAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        public boolean hasInterviewee(Interviewee interviewee) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            requireNonNull(interviewee);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            return intervieweesAdded.stream().anyMatch(interviewee::isSamePerson);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        public void addInterviewee(Interviewee interviewee) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            requireNonNull(interviewee);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            intervieweesAdded.add(interviewee);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        public ReadAndWriteList\u003cInterviewee\u003e getMutableIntervieweeList() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            return new IntervieweeList();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        public void updateFilteredIntervieweeList(Predicate\u003cInterviewee\u003e predicate) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            requireNonNull(predicate);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 2,
      "dcshzj": 18,
      "-": 57,
      "KendrickAng": 44
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/logic/commands/AddInterviewerCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.testutil.TypicalPersons.ALICE_INTERVIEWEE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.testutil.TypicalPersons.ALICE_INTERVIEWER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.testutil.TypicalPersons.BOB_INTERVIEWEE_MANUAL;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.IntervieweeList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.ModelStub;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.ReadAndWriteList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Interviewee;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Interviewer;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "class AddInterviewerCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddInterviewerCommand(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public void execute_interviewerAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        ModelStubAcceptingInterviewerAdded modelStub \u003d new ModelStubAcceptingInterviewerAdded();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Interviewer validInterviewer \u003d ALICE_INTERVIEWER;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        CommandResult commandResult \u003d new AddInterviewerCommand(validInterviewer).execute(modelStub);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validInterviewer), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertEquals(Arrays.asList(validInterviewer), modelStub.interviewersAdded);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public void execute_duplicateInterviewer_throwsCommandException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Interviewer validInterviewer \u003d ALICE_INTERVIEWER;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        AddCommand addCommand \u003d new AddInterviewerCommand(validInterviewer);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        ModelStubWithInterviewer modelStub \u003d new ModelStubWithInterviewer(validInterviewer);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_PERSON, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Interviewee alice \u003d ALICE_INTERVIEWEE;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Interviewee bob \u003d BOB_INTERVIEWEE_MANUAL;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddIntervieweeCommand(alice);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        AddCommand addBobCommand \u003d new AddIntervieweeCommand(bob);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddIntervieweeCommand(alice);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // different interviewee -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private class ModelStubWithInterviewer extends ModelStub {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        private final Interviewer interviewer;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        ModelStubWithInterviewer(Interviewer interviewer) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            requireNonNull(interviewer);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            this.interviewer \u003d interviewer;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        public boolean hasInterviewer(Interviewer interviewer) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            requireNonNull(interviewer);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            return this.interviewer.isSamePerson(interviewer);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private class ModelStubAcceptingInterviewerAdded extends ModelStub {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        final ArrayList\u003cInterviewer\u003e interviewersAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        public boolean hasInterviewer(Interviewer interviewer) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            requireNonNull(interviewer);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            return interviewersAdded.stream().anyMatch(interviewer::isSamePerson);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        public void addInterviewer(Interviewer interviewer) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            requireNonNull(interviewer);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            interviewersAdded.add(interviewer);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        public ReadAndWriteList\u003cInterviewee\u003e getMutableIntervieweeList() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            return new IntervieweeList();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        public void updateFilteredInterviewerList(Predicate\u003cInterviewer\u003e predicate) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            requireNonNull(predicate);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 3,
      "dcshzj": 19,
      "-": 57,
      "KendrickAng": 44
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/logic/commands/ClearCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.testutil.TypicalPersons.getTypicalIntervieweeList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.testutil.TypicalPersons.getTypicalInterviewerList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalIntervieweeList(), getTypicalInterviewerList(),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                new UserPrefs(), new LinkedList\u003c\u003e());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalIntervieweeList(), getTypicalInterviewerList(),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                new UserPrefs(), new LinkedList\u003c\u003e());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        expectedModel.setIntervieweeList(List.of());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        expectedModel.setInterviewerList(List.of());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 2,
      "dcshzj": 7,
      "-": 22,
      "KendrickAng": 7
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/logic/commands/CommandResultTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false)));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true, false).hashCode());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, true).hashCode());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 1,
      "-": 53
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/logic/commands/CommandTestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.parser.CliSyntax.PREFIX_DEPARTMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.parser.CliSyntax.PREFIX_FACULTY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import static seedu.scheduler.logic.parser.CliSyntax.PREFIX_FILE_PATH;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.parser.CliSyntax.PREFIX_NUS_WORK_EMAIL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.parser.CliSyntax.PREFIX_PERSONAL_EMAIL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.parser.CliSyntax.PREFIX_ROLE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.parser.CliSyntax.PREFIX_SLOT;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.parser.CliSyntax.PREFIX_YEAR_OF_STUDY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.IntervieweeList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.InterviewerList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.ModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Interviewee;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.IntervieweeNameHasKeywordsPredicate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Interviewer;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import seedu.scheduler.model.person.InterviewerNameHasKeywordsPredicate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final String VALID_ROLE_AMY_INTVR \u003d \"interviewer\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final String VALID_ROLE_BOB_INTVE \u003d \"interviewee\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final String VALID_FACULTY_AMY \u003d \"School of Engineering\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final String VALID_FACULTY_BOB \u003d \"School of Computing\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final String VALID_YEAR_OF_STUDY_AMY \u003d \"2019\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final String VALID_YEAR_OF_STUDY_BOB \u003d \"2020\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final String VALID_DEPARTMENT_AMY \u003d \"Logistics\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final String VALID_DEPARTMENT_BOB \u003d \"Marketing\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final String VALID_SLOT_AMY \u003d \"17/10/2019 12:30-13:30\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final String VALID_SLOT_BOB \u003d \"17/10/2019 13:30-14:30\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final String VALID_PERSONAL_EMAIL_AMY \u003d \"amy_infamy@gmail.com\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final String VALID_NUS_WORK_EMAIL_AMY \u003d \"amy_infamy@u.nus.edu\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final String VALID_PERSONAL_EMAIL_BOB \u003d \"bob_cat@gmail.com\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final String VALID_NUS_WORK_EMAIL_BOB \u003d \"bob_cat@u.nus.edu\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    public static final String VALID_FILE_PATH \u003d \"src/test/data/ImportsTest/storage.csv\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final String ROLE_DESC_AMY_INTVR \u003d \" \" + PREFIX_ROLE + VALID_ROLE_AMY_INTVR;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final String ROLE_DESC_BOB_INTVE \u003d \" \" + PREFIX_ROLE + VALID_ROLE_BOB_INTVE;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final String FACULTY_DESC_AMY \u003d \" \" + PREFIX_FACULTY + VALID_FACULTY_AMY;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final String FACULTY_DESC_BOB \u003d \" \" + PREFIX_FACULTY + VALID_FACULTY_BOB;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final String YEAR_OF_STUDY_DESC_AMY \u003d \" \" + PREFIX_YEAR_OF_STUDY + VALID_YEAR_OF_STUDY_AMY;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final String YEAR_OF_STUDY_DESC_BOB \u003d \" \" + PREFIX_YEAR_OF_STUDY + VALID_YEAR_OF_STUDY_BOB;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final String DEPARTMENT_DESC_AMY \u003d \" \" + PREFIX_DEPARTMENT + VALID_DEPARTMENT_AMY;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final String DEPARTMENT_DESC_BOB \u003d \" \" + PREFIX_DEPARTMENT + VALID_DEPARTMENT_BOB;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final String SLOT_DESC_AMY \u003d \" \" + PREFIX_SLOT + VALID_SLOT_AMY;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final String SLOT_DESC_BOB \u003d \" \" + PREFIX_SLOT + VALID_SLOT_BOB;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final String EMAIL_PERSONAL_DESC_AMY \u003d \" \" + PREFIX_PERSONAL_EMAIL + VALID_PERSONAL_EMAIL_AMY;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final String EMAIL_NUS_WORK_DESC_AMY \u003d \" \" + PREFIX_NUS_WORK_EMAIL + VALID_NUS_WORK_EMAIL_AMY;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final String EMAIL_PERSONAL_DESC_BOB \u003d \" \" + PREFIX_PERSONAL_EMAIL + VALID_PERSONAL_EMAIL_BOB;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final String EMAIL_NUS_WORK_DESC_BOB \u003d \" \" + PREFIX_NUS_WORK_EMAIL + VALID_NUS_WORK_EMAIL_BOB;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    public static final String FILE_PATH_DESC \u003d \" \" + PREFIX_FILE_PATH + VALID_FILE_PATH;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final String INVALID_FACULTY_DESC \u003d \" \" + PREFIX_FACULTY; // empty string not allowed"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final String INVALID_YEAR_OF_STUDY \u003d \" \" + PREFIX_YEAR_OF_STUDY + \"abc\"; // only numbers allowed"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final String INVALID_DEPARTMENT_DESC \u003d \" \" + PREFIX_DEPARTMENT; // empty string not allowed for dept"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final String INVALID_SLOT_DESC \u003d \" \" + PREFIX_SLOT + \"123456\"; // invalid format"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final String INVALID_PERSONAL_EMAIL_DESC \u003d \" \" + PREFIX_PERSONAL_EMAIL + \"bool sheet\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final String INVALID_NUS_WORK_EMAIL_DESC \u003d \" \" + PREFIX_NUS_WORK_EMAIL + \"long dong\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    public static final String INVALID_FILE_PATH_DESC \u003d \" \" + PREFIX_FILE_PATH"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            + \"src/test/data/ImportsTest/InterviewerInvalidTestData.csv\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    // CUSTOM ASSERTIONS FOR USAGE IN TEST PACKAGE"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Checks that the given {@code interviewee} exsits in the {@code model}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static void assertModelHasInterviewee(Model model, Interviewee interviewee) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            model.getInterviewee(interviewee.getName().fullName);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            throw new AssertionError(\"Interviewee does not exist in model.\", e);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            CommandResult expectedCommandResult, Model expectedModel) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * - the interviewee/interviewer lists, filtered interviewee/interviewer list and selected person in"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * {@code actualModel} remain unchanged."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        IntervieweeList expectedIntervieweeList \u003d new IntervieweeList(actualModel.getMutableIntervieweeList());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        InterviewerList expectedInterviewerList \u003d new InterviewerList(actualModel.getMutableInterviewerList());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        List\u003cInterviewee\u003e expectedFilteredIntervieweeList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredIntervieweeList());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        List\u003cInterviewer\u003e expectedFilteredInterviewerList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredInterviewerList());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertEquals(expectedIntervieweeList, ((ModelManager) actualModel).getIntervieweeList());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertEquals(expectedInterviewerList, ((ModelManager) actualModel).getInterviewerList());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertEquals(expectedFilteredIntervieweeList, actualModel.getFilteredIntervieweeList());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertEquals(expectedFilteredInterviewerList, actualModel.getFilteredInterviewerList());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    // CUSTOM CONVENIENCE METHODS FOR TESTING PURPOSES ONLY"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Updates {@code model}\u0027s filtered interviewee list to show only the interviewee with {@code name}."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static void showIntervieweeWithName(Model model, Name name) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            Interviewee i \u003d model.getInterviewee(name.fullName);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            final String[] splitName \u003d i.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            model.updateFilteredIntervieweeList(new IntervieweeNameHasKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            throw new AssertionError(\"Name should exist in the model beforehand!\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Updates {@code model}\u0027s filtered interviewee list to show only the interviewer with {@code name}."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static void showInterviewerWithName(Model model, Name name) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            Interviewer i \u003d model.getInterviewer(name.fullName);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            final String[] splitName \u003d i.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            model.updateFilteredInterviewerList(new InterviewerNameHasKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            throw new AssertionError(\"Name should exist in the model beforehand!\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     * Generates test data for export command."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     * @return expected results for export function."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    public static ArrayList\u003cString\u003e getExpectedExportedData() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        ArrayList\u003cString\u003e exportedData \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        exportedData.add(\"10/09/2019,Welfare - Hazel,Technical - Johnathan,Publicity - Lucia\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        exportedData.add(\"18:00-18:30,John,Steven,0\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        exportedData.add(\"18:30-19:00,Alex,Clark,John\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        exportedData.add(\"19:00-19:30,Alicia,0,charlie\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        exportedData.add(\"19:30-20:00,Charlie,0,Selina\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        exportedData.add(\"20:00-20:30,Selina,0,0\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        exportedData.add(\"20:30-21:00,Natal,0,0\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        return exportedData;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mirozo": 22,
      "dcshzj": 23,
      "-": 73,
      "KendrickAng": 90
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/logic/commands/DeleteCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.assertModelHasInterviewee;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.showIntervieweeWithName;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.testutil.TypicalPersons.ALICE_INTERVIEWEE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.testutil.TypicalPersons.BENSON_INTERVIEWEE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.testutil.TypicalPersons.getTypicalIntervieweeList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.testutil.TypicalPersons.getTypicalInterviewerList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.commons.core.Messages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.IntervieweeList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.InterviewerList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Interviewee;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Interviewer;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Role;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public void execute_validIntervieweeUnfilteredList_success() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalIntervieweeList(), new InterviewerList(),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                new UserPrefs(), new LinkedList\u003c\u003e());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Interviewee alice \u003d TypicalPersons.ALICE_INTERVIEWEE;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Role role \u003d new Role(\"interviewee\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Interviewee intervieweeToDel \u003d model.getInterviewee(alice.getName().fullName);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(alice.getName(), role);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, intervieweeToDel);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // create duplicate and remove interviewee"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getMutableIntervieweeList(),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                model.getMutableInterviewerList(), new UserPrefs(), new LinkedList\u003c\u003e());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        expectedModel.deleteInterviewee(intervieweeToDel);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public void execute_validInterviewerUnfilteredList_success() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Model model \u003d new ModelManager(new IntervieweeList(), getTypicalInterviewerList(),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                new UserPrefs(), new LinkedList\u003c\u003e());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Interviewer benson \u003d TypicalPersons.BENSON_INTERVIEWER;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Role role \u003d new Role(\"interviewer\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Interviewer interviewerToDel \u003d model.getInterviewer(benson.getName().fullName);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(benson.getName(), role);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, interviewerToDel);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // create duplicate and remove interviewee"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getMutableIntervieweeList(),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                model.getMutableInterviewerList(), new UserPrefs(), new LinkedList\u003c\u003e());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        expectedModel.deleteInterviewer(interviewerToDel);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public void execute_invalidNameUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalIntervieweeList(), getTypicalInterviewerList(),"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                new UserPrefs(), new LinkedList\u003c\u003e());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(new Name(\"This name doesnt exist in IntervieweeBook\"),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                new Role(\"interviewee\"));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_NAME);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public void execute_validNameFilteredList_success() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // pre-processing"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalIntervieweeList(), new InterviewerList(),"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                new UserPrefs(), new LinkedList\u003c\u003e());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Interviewee toDelete \u003d ALICE_INTERVIEWEE;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, toDelete);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertModelHasInterviewee(model, toDelete);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        showIntervieweeWithName(model, ALICE_INTERVIEWEE.getName());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(toDelete.getName(), new Role(\"interviewee\"));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getMutableIntervieweeList(), model.getMutableInterviewerList(),"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                new UserPrefs(), new LinkedList\u003c\u003e());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        expectedModel.deleteInterviewee(toDelete);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        showAllInterviewees(expectedModel);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public void execute_invalidNameFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalIntervieweeList(), new InterviewerList(),"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                new UserPrefs(), new LinkedList\u003c\u003e());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        showIntervieweeWithName(model, ALICE_INTERVIEWEE.getName());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Name invalidName \u003d new Name(\"This name doesnt exist in the interviewee book\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(invalidName, new Role(\"interviewee\"));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_NAME);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(ALICE_INTERVIEWEE.getName(), new Role(\"interviewee\"));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(BENSON_INTERVIEWEE.getName(), new Role(\"interviewee\"));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(ALICE_INTERVIEWEE.getName(), new Role(\"interviewee\"));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Updates {@code model}\u0027s filtered interviewee list to show no one."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private void showNoInterviewee(Model model) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        model.updateFilteredIntervieweeList(p -\u003e false);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertTrue(model.getFilteredIntervieweeList().isEmpty());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Updates {@code model}\u0027s filtered interviewee list to show everyone."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @param model"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private void showAllInterviewees(Model model) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        model.updateFilteredIntervieweeList(p -\u003e true);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 2,
      "dcshzj": 20,
      "-": 63,
      "KendrickAng": 84
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/logic/commands/EditIntervieweeCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.showIntervieweeWithName;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.commands.EditIntervieweeCommand.EditIntervieweeDescriptor;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.model.person.DefaultValues.DEFAULT_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.model.person.DefaultValues.DEFAULT_PHONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.model.person.DefaultValues.DEFAULT_TAGS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.testutil.TypicalPersons.ALICE_INTERVIEWEE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.testutil.TypicalPersons.BENSON_INTERVIEWEE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.testutil.TypicalPersons.BOB_INTERVIEWEE_MANUAL;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.testutil.TypicalPersons.getTypicalIntervieweeList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.testutil.TypicalPersons.getTypicalInterviewerList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.commons.core.Messages;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.ModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.UserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Interviewee;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.testutil.IntervieweeBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.testutil.TestUtil;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "class EditIntervieweeCommandTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UNIT TESTS \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public void constructor_nullFieldsInput_failure() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                new EditIntervieweeCommand(new Name(\"Alice\"), null));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                new EditIntervieweeCommand(null, new EditIntervieweeCommand.EditIntervieweeDescriptor()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                new EditIntervieweeCommand(null, null));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        final EditIntervieweeDescriptor aliceDescriptor \u003d TestUtil.getDescriptorFromInterviewee(ALICE_INTERVIEWEE);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        final EditIntervieweeCommand standardCommand \u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                new EditIntervieweeCommand(ALICE_INTERVIEWEE.getName(), aliceDescriptor);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        EditIntervieweeDescriptor copyDescriptor \u003d new EditIntervieweeDescriptor(aliceDescriptor);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        EditIntervieweeCommand commandWithSameValues \u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                new EditIntervieweeCommand(ALICE_INTERVIEWEE.getName(), copyDescriptor);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertFalse(standardCommand.equals("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                new EditIntervieweeCommand(BOB_INTERVIEWEE_MANUAL.getName(), aliceDescriptor)));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        final EditIntervieweeDescriptor bobDescriptor \u003d TestUtil.getDescriptorFromInterviewee(BOB_INTERVIEWEE_MANUAL);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertFalse(standardCommand.equals(new EditIntervieweeCommand(ALICE_INTERVIEWEE.getName(), bobDescriptor)));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d INTEGRATION TESTS \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // completely changes alice_interviewee into a different interviewee (name, phone... all changed)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalIntervieweeList(), getTypicalInterviewerList(),"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                new UserPrefs(), new LinkedList\u003c\u003e());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Interviewee editedInterviewee \u003d new Interviewee.IntervieweeBuilder(DEFAULT_NAME, DEFAULT_PHONE, DEFAULT_TAGS)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        EditIntervieweeDescriptor descriptor \u003d TestUtil.getDescriptorFromInterviewee(editedInterviewee);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        EditIntervieweeCommand editCommand \u003d new EditIntervieweeCommand(ALICE_INTERVIEWEE.getName(), descriptor);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedInterviewee);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalIntervieweeList(), getTypicalInterviewerList(),"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                new UserPrefs(), new LinkedList\u003c\u003e());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        expectedModel.setInterviewee(ALICE_INTERVIEWEE, editedInterviewee);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // doesn\u0027t change alice_interviewees identity (name, phone) except non-identity details (faculty, email)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalIntervieweeList(), getTypicalInterviewerList(),"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                new UserPrefs(), new LinkedList\u003c\u003e());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Interviewee editedInterviewee \u003d new IntervieweeBuilder(ALICE_INTERVIEWEE)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .withFaculty(\"School of Engineering\")"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .withPersonalEmail(\"alicealice@gmail.com\")"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        EditIntervieweeDescriptor descriptor \u003d TestUtil.getDescriptorFromInterviewee(editedInterviewee);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        EditIntervieweeCommand editCommand \u003d new EditIntervieweeCommand(ALICE_INTERVIEWEE.getName(), descriptor);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedInterviewee);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalIntervieweeList(), getTypicalInterviewerList(),"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                new UserPrefs(), new LinkedList\u003c\u003e());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        expectedModel.setInterviewee(ALICE_INTERVIEWEE, editedInterviewee);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public void execute_noFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // empty descriptor"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalIntervieweeList(), getTypicalInterviewerList(),"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                new UserPrefs(), new LinkedList\u003c\u003e());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        EditIntervieweeDescriptor descriptor \u003d new EditIntervieweeDescriptor();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        EditIntervieweeCommand editCommand \u003d new EditIntervieweeCommand(ALICE_INTERVIEWEE.getName(), descriptor);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, ALICE_INTERVIEWEE);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalIntervieweeList(), getTypicalInterviewerList(),"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                new UserPrefs(), new LinkedList\u003c\u003e());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Edit interviewee into an interviewee already existing in the unfiltered list (by isSamePerson check)."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public void execute_duplicateIntervieweeUnfilteredList_failure() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalIntervieweeList(), getTypicalInterviewerList(),"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                new UserPrefs(), new LinkedList\u003c\u003e());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        EditIntervieweeDescriptor descriptor \u003d TestUtil.getDescriptorFromInterviewee(BENSON_INTERVIEWEE);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        EditIntervieweeCommand editCommand \u003d new EditIntervieweeCommand(ALICE_INTERVIEWEE.getName(), descriptor);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public void execute_duplicateIntervieweeFilteredList_failure() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalIntervieweeList(), getTypicalInterviewerList(),"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                new UserPrefs(), new LinkedList\u003c\u003e());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // filter the list to show all interviewees"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        model.updateFilteredIntervieweeList(Model.PREDICATE_SHOW_ALL_INTERVIEWEES);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        EditIntervieweeDescriptor descriptor \u003d TestUtil.getDescriptorFromInterviewee(BENSON_INTERVIEWEE);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        EditIntervieweeCommand editCommand \u003d new EditIntervieweeCommand(ALICE_INTERVIEWEE.getName(), descriptor);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Interviewee name does not exist in the unfiltered list."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public void execute_invalidIntervieweeNameUnfilteredList_failure() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalIntervieweeList(), getTypicalInterviewerList(),"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                new UserPrefs(), new LinkedList\u003c\u003e());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Name invalidName \u003d new Name(\"This name doesnt exist in the list\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        EditIntervieweeDescriptor descriptor \u003d new EditIntervieweeDescriptor();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        EditIntervieweeCommand editCommand \u003d new EditIntervieweeCommand(invalidName, descriptor);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_NAME);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Filtered list doesn\u0027t contain the interviewee name, but Unfiltered list does."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public void execute_invalidIntervieweeNameFilteredList_failure() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalIntervieweeList(), getTypicalInterviewerList(),"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                new UserPrefs(), new LinkedList\u003c\u003e());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // name is in the unfiltered list, but not in the filtered list."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        showIntervieweeWithName(model, ALICE_INTERVIEWEE.getName());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // ensure alice is in the unfiltered list"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertTrue(model.hasInterviewee(ALICE_INTERVIEWEE));"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // filter the list to exclude alice"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        model.updateFilteredIntervieweeList(interviewee -\u003e !interviewee.isSamePerson(ALICE_INTERVIEWEE));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        EditIntervieweeCommand editCommand \u003d new EditIntervieweeCommand(ALICE_INTERVIEWEE.getName(),"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                new EditIntervieweeDescriptor());"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_NAME);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 22,
      "KendrickAng": 186
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/logic/commands/EditIntervieweeDescriptorTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.testutil.TypicalPersons.ALICE_INTERVIEWEE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.testutil.TypicalPersons.BOB_INTERVIEWEE_MANUAL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.testutil.TestUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " * Unit tests for EditIntervieweeDescriptor."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "public class EditIntervieweeDescriptorTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        EditIntervieweeCommand.EditIntervieweeDescriptor aliceDescriptor \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                TestUtil.getDescriptorFromInterviewee(ALICE_INTERVIEWEE);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        EditIntervieweeCommand.EditIntervieweeDescriptor aliceDescriptorDuplicate \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                TestUtil.getDescriptorFromInterviewee(ALICE_INTERVIEWEE);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        EditIntervieweeCommand.EditIntervieweeDescriptor bobDescriptor \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                TestUtil.getDescriptorFromInterviewee(BOB_INTERVIEWEE_MANUAL);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertTrue(aliceDescriptor.equals(aliceDescriptorDuplicate));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertTrue(aliceDescriptor.equals(aliceDescriptor));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertFalse(aliceDescriptor.equals(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertFalse(aliceDescriptor.equals(5));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertFalse(aliceDescriptor.equals(bobDescriptor));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 4,
      "KendrickAng": 36
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/logic/commands/EditInterviewerCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.showInterviewerWithName;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.scheduler.logic.commands.EditInterviewerCommand.EditInterviewerDescriptor;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.scheduler.model.person.DefaultValues.DEFAULT_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.scheduler.model.person.DefaultValues.DEFAULT_PHONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.scheduler.model.person.DefaultValues.DEFAULT_TAGS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.scheduler.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.scheduler.testutil.TypicalPersons.ALICE_INTERVIEWER;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.scheduler.testutil.TypicalPersons.BENSON_INTERVIEWER;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.scheduler.testutil.TypicalPersons.getTypicalIntervieweeList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.scheduler.testutil.TypicalPersons.getTypicalInterviewerList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import seedu.scheduler.commons.core.Messages;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import seedu.scheduler.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import seedu.scheduler.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import seedu.scheduler.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import seedu.scheduler.model.person.Interviewer;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import seedu.scheduler.model.person.Name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import seedu.scheduler.testutil.InterviewerBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import seedu.scheduler.testutil.TestUtil;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "class EditInterviewerCommandTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UNIT TESTS \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public void constructor_nullFieldsInput_failure() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                new EditInterviewerCommand(new Name(\"Alice\"), null));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                new EditInterviewerCommand(null, new EditInterviewerDescriptor()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                new EditInterviewerCommand(null, null));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        final EditInterviewerDescriptor aliceDescriptor \u003d TestUtil.getDescriptorFromInterviewer(ALICE_INTERVIEWER);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        final EditInterviewerCommand standardCommand \u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                new EditInterviewerCommand(ALICE_INTERVIEWER.getName(), aliceDescriptor);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        EditInterviewerDescriptor copyDescriptor \u003d new EditInterviewerDescriptor(aliceDescriptor);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        EditInterviewerCommand commandWithSameValues \u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                new EditInterviewerCommand(ALICE_INTERVIEWER.getName(), copyDescriptor);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertFalse(standardCommand.equals("
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                new EditInterviewerCommand(BENSON_INTERVIEWER.getName(), aliceDescriptor)));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        final EditInterviewerDescriptor bobDescriptor \u003d TestUtil.getDescriptorFromInterviewer(BENSON_INTERVIEWER);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertFalse(standardCommand.equals(new EditInterviewerCommand(ALICE_INTERVIEWER.getName(), bobDescriptor)));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d INTEGRATION TESTS \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    // Complete descriptor"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // completely changes alice_interviewer into a different interviewee (name, phone... all changed)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalIntervieweeList(), getTypicalInterviewerList(),"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                new UserPrefs(), new LinkedList\u003c\u003e());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Interviewer editedInterviewer \u003d new Interviewer.InterviewerBuilder(DEFAULT_NAME, DEFAULT_PHONE, DEFAULT_TAGS)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        EditInterviewerDescriptor descriptor \u003d TestUtil.getDescriptorFromInterviewer(editedInterviewer);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        EditInterviewerCommand editCommand \u003d new EditInterviewerCommand(ALICE_INTERVIEWER.getName(), descriptor);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedInterviewer);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalIntervieweeList(), getTypicalInterviewerList(),"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                new UserPrefs(), new LinkedList\u003c\u003e());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        expectedModel.setInterviewer(ALICE_INTERVIEWER, editedInterviewer);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    // Partial descriptor"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // doesn\u0027t change alice_interviewees identity (name, phone) except non-identity details (faculty, email)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalIntervieweeList(), getTypicalInterviewerList(),"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                new UserPrefs(), new LinkedList\u003c\u003e());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Interviewer editedInterviewer \u003d new InterviewerBuilder(ALICE_INTERVIEWER)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .withEmail(\"alicealice@gmail.com\")"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .withDepartment(\"Logistics\")"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        EditInterviewerDescriptor descriptor \u003d TestUtil.getDescriptorFromInterviewer(editedInterviewer);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        EditInterviewerCommand editCommand \u003d new EditInterviewerCommand(ALICE_INTERVIEWER.getName(), descriptor);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedInterviewer);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalIntervieweeList(), getTypicalInterviewerList(),"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                new UserPrefs(), new LinkedList\u003c\u003e());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        expectedModel.setInterviewer(ALICE_INTERVIEWER, editedInterviewer);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    // Empty descriptor"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public void execute_noFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // empty descriptor"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalIntervieweeList(), getTypicalInterviewerList(),"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                new UserPrefs(), new LinkedList\u003c\u003e());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        EditInterviewerDescriptor descriptor \u003d new EditInterviewerDescriptor();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        EditInterviewerCommand editCommand \u003d new EditInterviewerCommand(ALICE_INTERVIEWER.getName(), descriptor);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, ALICE_INTERVIEWER);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalIntervieweeList(), getTypicalInterviewerList(),"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                new UserPrefs(), new LinkedList\u003c\u003e());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    // Editing interviewer to another interviewer with same name in the interviewer list"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public void execute_duplicateInterviewerUnfilteredList_failure() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalIntervieweeList(), getTypicalInterviewerList(),"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                new UserPrefs(), new LinkedList\u003c\u003e());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        EditInterviewerDescriptor descriptor \u003d TestUtil.getDescriptorFromInterviewer(BENSON_INTERVIEWER);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        EditInterviewerCommand editCommand \u003d new EditInterviewerCommand(ALICE_INTERVIEWER.getName(), descriptor);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public void execute_duplicateInterviewerFilteredList_failure() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalIntervieweeList(), getTypicalInterviewerList(),"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                new UserPrefs(), new LinkedList\u003c\u003e());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // filter the list to show all interviewees"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        model.updateFilteredInterviewerList(Model.PREDICATE_SHOW_ALL_INTERVIEWERS);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        EditInterviewerDescriptor descriptor \u003d TestUtil.getDescriptorFromInterviewer(BENSON_INTERVIEWER);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        EditInterviewerCommand editCommand \u003d new EditInterviewerCommand(ALICE_INTERVIEWER.getName(), descriptor);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    // Interviewer name doesn\u0027t exist in interviewer list"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public void execute_invalidInterviewerNameUnfilteredList_failure() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalIntervieweeList(), getTypicalInterviewerList(),"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                new UserPrefs(), new LinkedList\u003c\u003e());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        EditInterviewerDescriptor descriptor \u003d TestUtil.getDescriptorFromInterviewer(BENSON_INTERVIEWER);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        EditInterviewerCommand editCommand \u003d new EditInterviewerCommand(ALICE_INTERVIEWER.getName(), descriptor);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    // Interviewer doesn\u0027t exist in filtered list, only unfiltered list."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public void execute_invalidInterviewerNameFilteredList_failure() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalIntervieweeList(), getTypicalInterviewerList(),"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                new UserPrefs(), new LinkedList\u003c\u003e());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // name is in the unfiltered list, but not in the filtered list."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        showInterviewerWithName(model, ALICE_INTERVIEWER.getName());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // ensure alice is in the unfiltered list"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertTrue(model.hasInterviewer(ALICE_INTERVIEWER));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // filter the list to exclude alice"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        model.updateFilteredInterviewerList(interviewer -\u003e !interviewer.isSamePerson(ALICE_INTERVIEWER));"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        EditInterviewerCommand editCommand \u003d new EditInterviewerCommand(ALICE_INTERVIEWER.getName(),"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                new EditInterviewerDescriptor());"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_NAME);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 1,
      "KendrickAng": 202
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/logic/commands/EditInterviewerDescriptorTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.testutil.TypicalPersons.ALICE_INTERVIEWER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.testutil.TypicalPersons.BENSON_INTERVIEWER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.testutil.TestUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "public class EditInterviewerDescriptorTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        EditInterviewerCommand.EditInterviewerDescriptor aliceDescriptor \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                TestUtil.getDescriptorFromInterviewer(ALICE_INTERVIEWER);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        EditInterviewerCommand.EditInterviewerDescriptor aliceDescriptorDuplicate \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                TestUtil.getDescriptorFromInterviewer(ALICE_INTERVIEWER);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        EditInterviewerCommand.EditInterviewerDescriptor bensonDescriptor \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                TestUtil.getDescriptorFromInterviewer(BENSON_INTERVIEWER);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertTrue(aliceDescriptor.equals(aliceDescriptorDuplicate));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertTrue(aliceDescriptor.equals(aliceDescriptor));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertFalse(aliceDescriptor.equals(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertFalse(aliceDescriptor.equals(5));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertFalse(aliceDescriptor.equals(bensonDescriptor));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 4,
      "KendrickAng": 33
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/logic/commands/EmailCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.VALID_SLOT_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.commands.EmailCommand.MESSAGE_EMAIL_ALL_SUCCESS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.commands.EmailCommand.MESSAGE_EMAIL_CLIENT_ERROR;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.commands.EmailCommand.MESSAGE_NO_SLOTS_ALLOCATED;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.commands.EmailCommand.MESSAGE_STATUS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.commands.EmailCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.testutil.TypicalPersons.ALICE_INTERVIEWEE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.testutil.TypicalPersons.getTypicalIntervieweeList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.testutil.TypicalPersons.getTypicalInterviewerList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import java.awt.Desktop;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.commons.core.Messages;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.ModelManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.ModelStub;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.ReadOnlyList;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.Schedule;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.UserPrefs;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Interviewee;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Interviewer;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Name;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Slot;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "public class EmailCommandTest {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        model \u003d new ModelManager(getTypicalIntervieweeList(), getTypicalInterviewerList(),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                new UserPrefs(), new LinkedList\u003c\u003e());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getMutableIntervieweeList(), model.getMutableInterviewerList(),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                new UserPrefs(), new LinkedList\u003c\u003e());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public void execute_emailInvalidSubcommand_commandException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        EmailCommand emailCommand \u003d new EmailCommand(\"invalid\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        assertCommandFailure(emailCommand, model, String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public void execute_emailStatusSubcommand_success() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        EmailCommand emailCommand \u003d new EmailCommand(\"status\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        String expectedResult \u003d String.format(MESSAGE_STATUS, 0, expectedModel.getUnfilteredIntervieweeList().size());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        assertCommandSuccess(emailCommand, model, expectedResult, expectedModel);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public void execute_emailInvalidName_invalidPerson() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        EmailCommand emailCommand \u003d new EmailCommand(\"timeslot\", new Name(\"Invalid Doe John\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        assertCommandFailure(emailCommand, model, Messages.MESSAGE_INVALID_PERSON_NAME);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public void execute_emailTimeslotSubcommand_noSlotsAllocated() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        EmailCommand emailCommand \u003d new EmailCommand(\"timeslot\", ALICE_INTERVIEWEE.getName());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        assertCommandFailure(emailCommand, model, MESSAGE_NO_SLOTS_ALLOCATED);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public void execute_emailTimeslotSubcommand_mailClientError() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        if (!Desktop.isDesktopSupported() || !Desktop.getDesktop().isSupported(Desktop.Action.MAIL)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            EmailCommand emailCommand \u003d new EmailCommand(\"timeslot\", ALICE_INTERVIEWEE.getName());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            ALICE_INTERVIEWEE.setAllocatedSlot(Slot.fromString(VALID_SLOT_AMY));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            assertCommandFailure(emailCommand, model, MESSAGE_EMAIL_CLIENT_ERROR);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            ALICE_INTERVIEWEE.clearAllocatedSlot();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    // Note: This method is disabled until we find a suitable way of testing without an annoying popup of the"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    // mail client"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    // public void execute_emailTimeslotSubcommand_success() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    //     EmailCommand emailCommand \u003d new EmailCommand(\"timeslot\", ALICE_INTERVIEWEE.getName());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    //     String expectedResult \u003d String.format(MESSAGE_EMAIL_INTERVIEWEE_SUCCESS, ALICE_INTERVIEWEE.getName());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    //     ALICE_INTERVIEWEE.setAllocatedSlot(Slot.fromString(VALID_SLOT_AMY));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    //     assertCommandSuccess(emailCommand, model, expectedResult, expectedModel);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    //     ALICE_INTERVIEWEE.clearAllocatedSlot();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    //     ALICE_INTERVIEWEE.setEmailSent(false);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public void execute_emailAllTimeslotSubcommand_successWithAllNoSlots() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        EmailCommand emailCommand \u003d new EmailCommand(\"alltimeslot\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        int numberOfInterviewees \u003d model.getUnfilteredIntervieweeList().size();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        String expectedResult \u003d String.format(MESSAGE_EMAIL_ALL_SUCCESS, 0, 0, 0, numberOfInterviewees,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                numberOfInterviewees);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        assertCommandSuccess(emailCommand, model, expectedResult, expectedModel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public void execute_emailAllTimeslotSubcommand_successWithAllSkipped() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        model \u003d new ModelStubWithAllSlotsAllocated(getTypicalIntervieweeList(), getTypicalInterviewerList(),"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                new UserPrefs(), new LinkedList\u003c\u003e());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        expectedModel \u003d new ModelStubWithAllSlotsAllocated(getTypicalIntervieweeList(), getTypicalInterviewerList(),"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                new UserPrefs(), new LinkedList\u003c\u003e());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        EmailCommand emailCommand \u003d new EmailCommand(\"alltimeslot\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        for (Interviewee interviewee : model.getUnfilteredIntervieweeList()) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            interviewee.setEmailSent(true);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        int numberOfInterviewees \u003d model.getUnfilteredIntervieweeList().size();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        String expectedResult \u003d String.format(MESSAGE_EMAIL_ALL_SUCCESS, 0, numberOfInterviewees, 0, 0,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                numberOfInterviewees);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        assertCommandSuccess(emailCommand, model, expectedResult, expectedModel);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        // Reset state to avoid affecting other test cases"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        for (Interviewee interviewee : model.getUnfilteredIntervieweeList()) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            interviewee.setEmailSent(false);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * A Model stub that always return Interviewees with a slot allocated."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    private class ModelStubWithAllSlotsAllocated extends ModelStub {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        private final ReadOnlyList\u003cInterviewee\u003e typicalIntervieweeList;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        private final ReadOnlyList\u003cInterviewer\u003e typicalInterviewerList;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        private final ReadOnlyUserPrefs userPrefs;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        private final List\u003cSchedule\u003e schedulesList;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        public ModelStubWithAllSlotsAllocated(ReadOnlyList\u003cInterviewee\u003e intervieweeList,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                ReadOnlyList\u003cInterviewer\u003e interviewerList, ReadOnlyUserPrefs userPrefs, List\u003cSchedule\u003e schedulesList) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            this.typicalIntervieweeList \u003d intervieweeList;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            this.typicalInterviewerList \u003d interviewerList;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            this.userPrefs \u003d userPrefs;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            this.schedulesList \u003d schedulesList;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        public Optional\u003cSlot\u003e getAllocatedSlot(String intervieweeName) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            return Optional.of(Slot.fromString(VALID_SLOT_AMY));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        public ObservableList\u003cInterviewee\u003e getUnfilteredIntervieweeList() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            return this.typicalIntervieweeList.getEntityList();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            if (!(obj instanceof ModelStubWithAllSlotsAllocated)) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            ModelStubWithAllSlotsAllocated other \u003d (ModelStubWithAllSlotsAllocated) obj;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            return userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                    \u0026\u0026 typicalIntervieweeList.equals(other.typicalIntervieweeList)"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                    \u0026\u0026 typicalInterviewerList.equals(other.typicalInterviewerList)"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                    \u0026\u0026 schedulesList.equals(other.schedulesList);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 178
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/logic/commands/ExitCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 5,
      "-": 15
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/logic/commands/ExportCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mirozo"
        },
        "content": "package seedu.scheduler.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import seedu.scheduler.model.FilePath;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import seedu.scheduler.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import seedu.scheduler.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mirozo"
        },
        "content": "public class ExportCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    public static final String DESTINATION_FILE \u003d \"src/test/data/ImportsTest/storage.csv\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    private static Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    public void execute_exportCommand_success() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        ExportCommand exportCommand \u003d new ExportCommand(new FilePath(DESTINATION_FILE));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(ExportCommand.SUCCESS_MESSAGE, false, false);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        model.setScheduled(true);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        assertCommandSuccess(exportCommand, model, expectedCommandResult, model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    public void execute_exportCommand_throwsCommandException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        ExportCommand exportCommand \u003d new ExportCommand(new FilePath(DESTINATION_FILE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        model.setScheduled(false);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        assertCommandFailure(exportCommand, model, ExportCommand.NOT_SCHEDULED_ERROR);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mirozo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mirozo": 31
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/logic/commands/FindCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.testutil.TypicalPersons.getTypicalIntervieweeList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.testutil.TypicalPersons.getTypicalInterviewerList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.PersonNameHasKeywordsPredicate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalIntervieweeList(), getTypicalInterviewerList(),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            new UserPrefs(), new LinkedList\u003c\u003e());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalIntervieweeList(), getTypicalInterviewerList(),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            new UserPrefs(), new LinkedList\u003c\u003e());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        PersonNameHasKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                new PersonNameHasKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        PersonNameHasKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                new PersonNameHasKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_zeroKeywords_noPersonFound() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // TODO: Fix this train wreck (ken)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        PersonNameHasKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_multipleKeywords_multiplePersonsFound() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        PersonNameHasKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Parses {@code userInput} into a {@code PersonNameHasKeywordsPredicate}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private PersonNameHasKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return new PersonNameHasKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 1,
      "dcshzj": 7,
      "-": 60,
      "KendrickAng": 18
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/logic/commands/HelpCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 5,
      "-": 15
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/logic/commands/ImportCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import seedu.scheduler.model.FilePath;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.ModelManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import seedu.scheduler.model.person.Interviewee;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import seedu.scheduler.model.person.Interviewer;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import seedu.scheduler.model.person.Role;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import seedu.scheduler.testutil.SampleInterviewee;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import seedu.scheduler.testutil.SampleInterviewer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mirozo"
        },
        "content": "public class ImportCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    private static final String INTERVIEWER_FILE_PATH \u003d \"src/test/data/ImportsTest/InterviewerTestData.csv\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    private static final String INTERVIEWEE_FILE_PATH \u003d \"src/test/data/ImportsTest/IntervieweeTestData.csv\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    private static final String INTERVIEWER \u003d \"interviewer\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    private static final String INTERVIEWEE \u003d \"interviewee\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Interviewers \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    public void interviewerImportCommand_success() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        ImportCommand importCommand \u003d new ImportCommand(new Role(INTERVIEWER),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                new FilePath(INTERVIEWER_FILE_PATH));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(ImportCommand.SUCCESS_MESSAGE, false, false);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        for (Interviewer interviewer: SampleInterviewer.getSampleListOfInterviewers()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            expectedModel.addInterviewer(interviewer);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        assertCommandSuccess(importCommand, model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Interviewees \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    public void intervieweeImportCommand_success() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        ImportCommand importCommand \u003d new ImportCommand(new Role(INTERVIEWEE),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                new FilePath(INTERVIEWEE_FILE_PATH));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(ImportCommand.SUCCESS_MESSAGE, false, false);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        for (Interviewee interviewee: SampleInterviewee.getSampleIntervieweeList()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            expectedModel.addInterviewee(interviewee);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        assertCommandSuccess(importCommand, model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mirozo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mirozo": 48,
      "dcshzj": 4
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/logic/commands/ListCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.showIntervieweeWithName;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.testutil.TypicalPersons.ALICE_INTERVIEWEE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.testutil.TypicalPersons.getTypicalIntervieweeList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.testutil.TypicalPersons.getTypicalInterviewerList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        model \u003d new ModelManager(getTypicalIntervieweeList(), getTypicalInterviewerList(),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                new UserPrefs(), new LinkedList\u003c\u003e());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getMutableIntervieweeList(), model.getMutableInterviewerList(),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                new UserPrefs(), new LinkedList\u003c\u003e());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        showIntervieweeWithName(model, ALICE_INTERVIEWEE.getName());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 2,
      "dcshzj": 9,
      "-": 28,
      "KendrickAng": 5
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/logic/commands/ScheduleCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "package seedu.scheduler.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import seedu.scheduler.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import seedu.scheduler.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import seedu.scheduler.testutil.SampleInterviewee;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import seedu.scheduler.testutil.SampleInterviewer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "class ScheduleCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public void execute_sampleGraphData1() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        model.setIntervieweeList(SampleInterviewee.getSampleIntervieweesForGraph1());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        model.setInterviewerList(SampleInterviewer.getSampleInterviewersForGraph1());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        ScheduleCommand scheduleCommand \u003d new ScheduleCommand();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        assertDoesNotThrow(()-\u003e scheduleCommand.execute(model));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        assertTrue(model.isScheduled());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 25
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/logic/graph/BfsHopCroftKarpTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.logic.graph;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.testutil.SampleGraph;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.testutil.SampleInterviewSlotVertex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.testutil.TestUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "public class BfsHopCroftKarpTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public void bfs_sampleGraphOneAfterOneIteration_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        BipartiteGraph subjectGraph \u003d SampleGraph.getSampleGraphOne();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        int numInterviewees \u003d subjectGraph.getNumInterviewees();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        int numSlots \u003d subjectGraph.getNumInterviewSlots();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        List\u003cInterviewerSlotVertex\u003e intervieweePredecessor \u003d Arrays.asList(new InterviewerSlotVertex[numInterviewees]);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        List\u003cList\u003cIntervieweeVertex\u003e\u003e interviewSlotPredecessors \u003d new ArrayList\u003c\u003e(numSlots);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        TestUtil.fillWithSubLists(interviewSlotPredecessors, numSlots);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        List\u003cInterviewerSlotVertex\u003e expectedVertices \u003d SampleInterviewSlotVertex.getSampleInterviewSlotVerticesGraph1();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        List\u003cInterviewerSlotVertex\u003e resultVertices \u003d new BfsHopCroftKarp(subjectGraph).execute(intervieweePredecessor,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            interviewSlotPredecessors);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        // resultVertices.forEach(System.out::println);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        assertEquals(resultVertices, expectedVertices);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 29,
      "dcshzj": 4
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/logic/graph/BipartiteGraphGeneratorTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.logic.graph;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotSame;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Interviewee;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Interviewer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.testutil.SampleGraph;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.testutil.SampleInterviewee;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.testutil.SampleInterviewer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "class BipartiteGraphGeneratorTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public void getGraph_sampleDataFromGraphOne_returnSampleGraphOne() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        List\u003cInterviewer\u003e interviewers \u003d SampleInterviewer.getSampleInterviewersForGraph1();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        List\u003cInterviewee\u003e interviewees \u003d SampleInterviewee.getSampleIntervieweesForGraph1();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        BipartiteGraphGenerator generator \u003d new BipartiteGraphGenerator(interviewers, interviewees);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        BipartiteGraph expectedGraph \u003d SampleGraph.getSampleGraphOne();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        BipartiteGraph resultGraph \u003d generator.generate();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        assertNotSame(expectedGraph, resultGraph);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        assertEquals(expectedGraph, resultGraph);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 23,
      "dcshzj": 6
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/logic/graph/DfsHopCroftKarpTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.logic.graph;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.testutil.SampleGraph;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.testutil.TestUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "class DfsHopCroftKarpTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Integration testing of bfs and dfs."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public void execute_sampleGraph1After1Iteration_success() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        BipartiteGraph subjectGraph \u003d SampleGraph.getSampleGraphOne();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        int numInterviewees \u003d subjectGraph.getNumInterviewees();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        int numSlots \u003d subjectGraph.getNumInterviewSlots();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        List\u003cInterviewerSlotVertex\u003e intervieweePredecessor \u003d Arrays.asList(new InterviewerSlotVertex[numInterviewees]);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        List\u003cList\u003cIntervieweeVertex\u003e\u003e interviewSlotPredecessors \u003d new ArrayList\u003c\u003e(numSlots);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        boolean[] isUsedInterviewee \u003d new boolean[numInterviewees];"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        boolean[] isUsedSlot \u003d new boolean[numSlots];"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        TestUtil.fillWithSubLists(interviewSlotPredecessors, numSlots);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        List\u003cInterviewerSlotVertex\u003e lastLayer \u003d new BfsHopCroftKarp(subjectGraph).execute(intervieweePredecessor,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                interviewSlotPredecessors);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        DfsHopCroftKarp dfs \u003d new DfsHopCroftKarp(subjectGraph);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        dfs.execute(lastLayer, intervieweePredecessor, interviewSlotPredecessors, isUsedInterviewee, isUsedSlot);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        // Check the graph"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        int numMatched \u003d 0;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        for (int i \u003d 0; i \u003c numInterviewees; i++) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            IntervieweeVertex intervieweeVertex \u003d subjectGraph.getIntervieweePair(i).getHead();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            if (intervieweeVertex.isMatched()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                // System.out.printf(\"%s: allocated slot: %s\\n\", intervieweeVertex.getItem().getName(),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                //    intervieweeVertex.getPartner().getItem());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                assertTrue(isUsedInterviewee[intervieweeVertex.getIndex()]);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                assertTrue(isUsedSlot[intervieweeVertex.getPartner().getIndex()]);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                numMatched++;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        // For the case of sample graph one, there must be at least 3 interviewee vertices that are matched after"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        // one iteration of bfs and dfs."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        assertTrue(numMatched \u003e 2);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 49,
      "dcshzj": 3
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/logic/graph/HopCroftKarpTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.logic.graph;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import java.util.stream.IntStream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.testutil.SampleGraph;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "class HopCroftKarpTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public void execute_sampleGraph1_allMatched() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        BipartiteGraph subjectGraph \u003d SampleGraph.getSampleGraphOne();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        HopCroftKarp algorithm \u003d new HopCroftKarp(subjectGraph);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        algorithm.execute();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        int numInterviewees \u003d subjectGraph.getNumInterviewees();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        IntStream.range(0, numInterviewees).forEach(i -\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            IntervieweeVertex intervieweeVertex \u003d subjectGraph.getIntervieweePair(i).getHead();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            assertTrue(intervieweeVertex.isMatched());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            // System.out.println(intervieweeVertex.getPartner().getItem()); // TODO: comment this out!"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        });"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 23,
      "dcshzj": 2
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/logic/parser/AddCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.DEPARTMENT_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.DEPARTMENT_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.EMAIL_NUS_WORK_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.EMAIL_NUS_WORK_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.EMAIL_PERSONAL_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.EMAIL_PERSONAL_DESC_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.FACULTY_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.FACULTY_DESC_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.INVALID_DEPARTMENT_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.INVALID_FACULTY_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.INVALID_NUS_WORK_EMAIL_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.INVALID_PERSONAL_EMAIL_DESC;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.INVALID_SLOT_DESC;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.INVALID_YEAR_OF_STUDY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.ROLE_DESC_AMY_INTVR;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.ROLE_DESC_BOB_INTVE;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.SLOT_DESC_AMY;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.SLOT_DESC_BOB;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.VALID_DEPARTMENT_AMY;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.VALID_DEPARTMENT_BOB;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.VALID_FACULTY_BOB;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.VALID_NUS_WORK_EMAIL_AMY;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.VALID_NUS_WORK_EMAIL_BOB;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.VALID_PERSONAL_EMAIL_BOB;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.VALID_ROLE_AMY_INTVR;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.VALID_ROLE_BOB_INTVE;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.VALID_SLOT_AMY;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.VALID_SLOT_BOB;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.VALID_YEAR_OF_STUDY_BOB;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.YEAR_OF_STUDY_DESC_AMY;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.YEAR_OF_STUDY_DESC_BOB;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.scheduler.testutil.TypicalPersons.AMY_INTERVIEWER_MANUAL;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.testutil.TypicalPersons.BOB_INTERVIEWEE_MANUAL;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import seedu.scheduler.commons.core.Messages;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.logic.commands.AddIntervieweeCommand;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import seedu.scheduler.logic.commands.AddInterviewerCommand;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import seedu.scheduler.model.person.Department;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import seedu.scheduler.model.person.Email;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import seedu.scheduler.model.person.Faculty;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Interviewee;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import seedu.scheduler.model.person.Interviewer;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Name;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Phone;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import seedu.scheduler.model.person.Slot;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.tag.Tag;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.testutil.IntervieweeBuilder;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import seedu.scheduler.testutil.InterviewerBuilder;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public void parse_intervieweeAllFieldsPresent_success() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Interviewee expectedInterviewee \u003d new IntervieweeBuilder(BOB_INTERVIEWEE_MANUAL).withTags(VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + ROLE_DESC_BOB_INTVE + NAME_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                + TAG_DESC_FRIEND + FACULTY_DESC_BOB + YEAR_OF_STUDY_DESC_BOB"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                + DEPARTMENT_DESC_BOB + SLOT_DESC_BOB + EMAIL_PERSONAL_DESC_BOB + EMAIL_NUS_WORK_DESC_BOB,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                new AddIntervieweeCommand(expectedInterviewee));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseSuccess(parser, ROLE_DESC_BOB_INTVE + NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                + TAG_DESC_FRIEND + FACULTY_DESC_BOB + YEAR_OF_STUDY_DESC_BOB"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                + DEPARTMENT_DESC_BOB + SLOT_DESC_BOB + EMAIL_PERSONAL_DESC_BOB + EMAIL_NUS_WORK_DESC_BOB,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                new AddIntervieweeCommand(expectedInterviewee));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseSuccess(parser, ROLE_DESC_BOB_INTVE + NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                + TAG_DESC_FRIEND + FACULTY_DESC_BOB + YEAR_OF_STUDY_DESC_BOB"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                + DEPARTMENT_DESC_BOB + SLOT_DESC_BOB + EMAIL_PERSONAL_DESC_BOB + EMAIL_NUS_WORK_DESC_BOB,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                new AddIntervieweeCommand(expectedInterviewee));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Interviewee expectedIntervieweeMultipleTags \u003d new IntervieweeBuilder(BOB_INTERVIEWEE_MANUAL)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseSuccess(parser, ROLE_DESC_BOB_INTVE + NAME_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND + FACULTY_DESC_BOB + YEAR_OF_STUDY_DESC_BOB"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                + DEPARTMENT_DESC_BOB + SLOT_DESC_BOB + EMAIL_PERSONAL_DESC_BOB + EMAIL_NUS_WORK_DESC_BOB,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                new AddIntervieweeCommand(expectedIntervieweeMultipleTags));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // multiple personal emails - last personal email accepted"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseSuccess(parser, ROLE_DESC_BOB_INTVE + NAME_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                + TAG_DESC_FRIEND + FACULTY_DESC_BOB + YEAR_OF_STUDY_DESC_BOB"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                + DEPARTMENT_DESC_BOB + SLOT_DESC_BOB + EMAIL_PERSONAL_DESC_AMY + EMAIL_PERSONAL_DESC_BOB"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                + EMAIL_NUS_WORK_DESC_BOB,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                new AddIntervieweeCommand(expectedInterviewee));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // multiple work emails - last work email accepted"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseSuccess(parser, ROLE_DESC_BOB_INTVE + NAME_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                        + TAG_DESC_FRIEND + FACULTY_DESC_BOB + YEAR_OF_STUDY_DESC_BOB"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                        + DEPARTMENT_DESC_BOB + SLOT_DESC_BOB + EMAIL_PERSONAL_DESC_BOB"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                        + EMAIL_NUS_WORK_DESC_AMY + EMAIL_NUS_WORK_DESC_BOB,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                new AddIntervieweeCommand(expectedInterviewee));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // multiple faculties - last faculty accepted"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseSuccess(parser, ROLE_DESC_BOB_INTVE + NAME_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                        + TAG_DESC_FRIEND + FACULTY_DESC_AMY + FACULTY_DESC_BOB + YEAR_OF_STUDY_DESC_BOB"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                        + DEPARTMENT_DESC_BOB + SLOT_DESC_BOB + EMAIL_PERSONAL_DESC_BOB + EMAIL_NUS_WORK_DESC_BOB,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                new AddIntervieweeCommand(expectedInterviewee));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // multiple years of study - last year of study accepted"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseSuccess(parser, ROLE_DESC_BOB_INTVE + NAME_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                        + TAG_DESC_FRIEND + FACULTY_DESC_BOB + YEAR_OF_STUDY_DESC_AMY + YEAR_OF_STUDY_DESC_BOB"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                        + DEPARTMENT_DESC_BOB + SLOT_DESC_BOB + EMAIL_PERSONAL_DESC_BOB + EMAIL_NUS_WORK_DESC_BOB,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                new AddIntervieweeCommand(expectedInterviewee));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // multiple slots - all accepted"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Interviewee expectedIntervieweeMultipleSlots \u003d new IntervieweeBuilder(BOB_INTERVIEWEE_MANUAL)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .withTimeslots(VALID_SLOT_AMY, VALID_SLOT_BOB)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseSuccess(parser, ROLE_DESC_BOB_INTVE + NAME_DESC_BOB + PHONE_DESC_BOB + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                        + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                        + FACULTY_DESC_BOB + YEAR_OF_STUDY_DESC_BOB + DEPARTMENT_DESC_BOB"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                        + SLOT_DESC_AMY + SLOT_DESC_BOB + EMAIL_PERSONAL_DESC_BOB + EMAIL_NUS_WORK_DESC_BOB,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                new AddIntervieweeCommand(expectedIntervieweeMultipleSlots));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // multiple departments - all accepted"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Interviewee expectedIntervieweeMultipleDepts \u003d new IntervieweeBuilder(BOB_INTERVIEWEE_MANUAL)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .withDepartmentChoices(VALID_DEPARTMENT_AMY, VALID_DEPARTMENT_BOB)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseSuccess(parser, ROLE_DESC_BOB_INTVE + NAME_DESC_BOB + PHONE_DESC_BOB + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                        + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                        + FACULTY_DESC_BOB + YEAR_OF_STUDY_DESC_BOB + DEPARTMENT_DESC_AMY + DEPARTMENT_DESC_BOB"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                        + SLOT_DESC_BOB + EMAIL_PERSONAL_DESC_BOB + EMAIL_NUS_WORK_DESC_BOB,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                new AddIntervieweeCommand(expectedIntervieweeMultipleDepts));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public void parse_interviewerAllFieldsPresent_success() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Interviewer expectedInterviewer \u003d new InterviewerBuilder(AMY_INTERVIEWER_MANUAL).withTags(VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + ROLE_DESC_AMY_INTVR + NAME_DESC_AMY + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                        + TAG_DESC_FRIEND + EMAIL_NUS_WORK_DESC_AMY + DEPARTMENT_DESC_AMY + SLOT_DESC_AMY,"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                new AddInterviewerCommand(expectedInterviewer));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseSuccess(parser, ROLE_DESC_AMY_INTVR + NAME_DESC_BOB + NAME_DESC_AMY"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                        + PHONE_DESC_AMY + TAG_DESC_FRIEND + EMAIL_NUS_WORK_DESC_AMY + DEPARTMENT_DESC_AMY"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                        + SLOT_DESC_AMY,"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                new AddInterviewerCommand(expectedInterviewer));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseSuccess(parser, ROLE_DESC_AMY_INTVR + NAME_DESC_AMY + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                        + PHONE_DESC_AMY + TAG_DESC_FRIEND + EMAIL_NUS_WORK_DESC_AMY + DEPARTMENT_DESC_AMY"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                        + SLOT_DESC_AMY,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                new AddInterviewerCommand(expectedInterviewer));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Interviewer expectedInterviewerMultipleTags \u003d new InterviewerBuilder(AMY_INTERVIEWER_MANUAL)"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseSuccess(parser, ROLE_DESC_AMY_INTVR + NAME_DESC_AMY"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                        + PHONE_DESC_AMY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + EMAIL_NUS_WORK_DESC_AMY"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                        + DEPARTMENT_DESC_AMY + SLOT_DESC_AMY,"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                new AddInterviewerCommand(expectedInterviewerMultipleTags));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // multiple work emails - last work email accepted"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseSuccess(parser, ROLE_DESC_AMY_INTVR + NAME_DESC_AMY + PHONE_DESC_AMY + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                        + EMAIL_NUS_WORK_DESC_BOB + EMAIL_NUS_WORK_DESC_AMY + DEPARTMENT_DESC_AMY + SLOT_DESC_AMY,"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                new AddInterviewerCommand(expectedInterviewer));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // multiple departments - last department accepted"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseSuccess(parser, ROLE_DESC_AMY_INTVR + NAME_DESC_AMY + PHONE_DESC_AMY + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                        + EMAIL_NUS_WORK_DESC_AMY + DEPARTMENT_DESC_BOB + DEPARTMENT_DESC_AMY"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                        + SLOT_DESC_AMY,"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                new AddInterviewerCommand(expectedInterviewer));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // multiple slots - all accepted"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Interviewer expectedInterviewerMultipleSlots \u003d new InterviewerBuilder(AMY_INTERVIEWER_MANUAL)"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .withAvailabilities(VALID_SLOT_AMY, VALID_SLOT_BOB)"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseSuccess(parser, ROLE_DESC_AMY_INTVR + NAME_DESC_AMY"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                        + PHONE_DESC_AMY + TAG_DESC_FRIEND + EMAIL_NUS_WORK_DESC_AMY"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                        + DEPARTMENT_DESC_AMY + SLOT_DESC_AMY + SLOT_DESC_BOB,"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                new AddInterviewerCommand(expectedInterviewerMultipleSlots));"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Interviewer expectedPerson \u003d new InterviewerBuilder(AMY_INTERVIEWER_MANUAL).withTags().build();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseSuccess(parser, ROLE_DESC_AMY_INTVR + NAME_DESC_AMY + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                        + EMAIL_NUS_WORK_DESC_AMY + DEPARTMENT_DESC_AMY + SLOT_DESC_AMY,"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                new AddInterviewerCommand(expectedPerson));"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public void parse_intervieweeCompulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // missing name"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseFailure(parser, ROLE_DESC_BOB_INTVE + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                + FACULTY_DESC_BOB + YEAR_OF_STUDY_DESC_BOB + DEPARTMENT_DESC_BOB + SLOT_DESC_BOB"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                + EMAIL_PERSONAL_DESC_BOB + EMAIL_NUS_WORK_DESC_BOB,"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // missing phone"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseFailure(parser, ROLE_DESC_BOB_INTVE + NAME_DESC_BOB"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                + FACULTY_DESC_BOB + YEAR_OF_STUDY_DESC_BOB + DEPARTMENT_DESC_BOB + SLOT_DESC_BOB"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                + EMAIL_PERSONAL_DESC_BOB + EMAIL_NUS_WORK_DESC_BOB,"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // missing personal email"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseFailure(parser, ROLE_DESC_BOB_INTVE + NAME_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                        + FACULTY_DESC_BOB + YEAR_OF_STUDY_DESC_BOB + DEPARTMENT_DESC_BOB + SLOT_DESC_BOB"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                        + EMAIL_NUS_WORK_DESC_BOB,"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // missing nus work email"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseFailure(parser, ROLE_DESC_BOB_INTVE + NAME_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                        + FACULTY_DESC_BOB + YEAR_OF_STUDY_DESC_BOB + DEPARTMENT_DESC_BOB + SLOT_DESC_BOB"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                        + EMAIL_PERSONAL_DESC_BOB,"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // missing faculty"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseFailure(parser, ROLE_DESC_BOB_INTVE + NAME_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                        + YEAR_OF_STUDY_DESC_BOB + DEPARTMENT_DESC_BOB + SLOT_DESC_BOB"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                        + EMAIL_PERSONAL_DESC_BOB + EMAIL_NUS_WORK_DESC_BOB,"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // missing year of study"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseFailure(parser, ROLE_DESC_BOB_INTVE + NAME_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                        + FACULTY_DESC_BOB + DEPARTMENT_DESC_BOB + SLOT_DESC_BOB"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                        + EMAIL_PERSONAL_DESC_BOB + EMAIL_NUS_WORK_DESC_BOB,"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // missing timeslot prefix"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseFailure(parser, ROLE_DESC_BOB_INTVE + NAME_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                        + FACULTY_DESC_BOB + YEAR_OF_STUDY_DESC_BOB + DEPARTMENT_DESC_BOB"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                        + EMAIL_PERSONAL_DESC_BOB + EMAIL_NUS_WORK_DESC_BOB,"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // missing department"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseFailure(parser, ROLE_DESC_BOB_INTVE + NAME_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                        + FACULTY_DESC_BOB + YEAR_OF_STUDY_DESC_BOB + SLOT_DESC_BOB"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                        + EMAIL_PERSONAL_DESC_BOB + EMAIL_NUS_WORK_DESC_BOB,"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseFailure(parser, VALID_ROLE_BOB_INTVE + \" \" + VALID_NAME_BOB + \" \" + VALID_PHONE_BOB"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                + \" \" + VALID_FACULTY_BOB + \" \" + VALID_YEAR_OF_STUDY_BOB + \" \" + VALID_DEPARTMENT_BOB"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                + \" \" + VALID_SLOT_BOB + \" \" + VALID_PERSONAL_EMAIL_BOB + \" \" + VALID_NUS_WORK_EMAIL_BOB,"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public void parse_interviewerCompulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // missing name"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseFailure(parser, ROLE_DESC_AMY_INTVR + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                        + TAG_DESC_FRIEND + DEPARTMENT_DESC_AMY + SLOT_DESC_AMY + EMAIL_NUS_WORK_DESC_AMY,"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // missing phone"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseFailure(parser, ROLE_DESC_AMY_INTVR + NAME_DESC_AMY"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                        + TAG_DESC_FRIEND + DEPARTMENT_DESC_AMY + SLOT_DESC_AMY + EMAIL_NUS_WORK_DESC_AMY,"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // missing department"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseFailure(parser, ROLE_DESC_AMY_INTVR + NAME_DESC_AMY + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                        + TAG_DESC_FRIEND + SLOT_DESC_AMY + EMAIL_NUS_WORK_DESC_AMY,"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // missing slot"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseFailure(parser, ROLE_DESC_AMY_INTVR + NAME_DESC_AMY + PHONE_DESC_AMY + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                        + DEPARTMENT_DESC_AMY + EMAIL_NUS_WORK_DESC_AMY,"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // missing work email"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseFailure(parser, ROLE_DESC_AMY_INTVR + NAME_DESC_AMY + PHONE_DESC_AMY + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                        + DEPARTMENT_DESC_AMY + SLOT_DESC_AMY,"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseFailure(parser, VALID_ROLE_AMY_INTVR + \" \" + VALID_NAME_AMY + \" \" + VALID_PHONE_AMY"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                        + \" \" + VALID_TAG_FRIEND + \" \" + VALID_DEPARTMENT_AMY + \" \" + VALID_SLOT_AMY"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                        + \" \" + VALID_NUS_WORK_EMAIL_AMY,"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public void parse_intervieweeInvalidValue_failure() {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseFailure(parser, ROLE_DESC_BOB_INTVE + INVALID_NAME_DESC + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                        + TAG_DESC_HUSBAND + TAG_DESC_FRIEND + FACULTY_DESC_BOB + YEAR_OF_STUDY_DESC_BOB"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                        + DEPARTMENT_DESC_BOB + SLOT_DESC_BOB + EMAIL_PERSONAL_DESC_BOB + EMAIL_NUS_WORK_DESC_BOB,"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseFailure(parser, ROLE_DESC_BOB_INTVE + NAME_DESC_BOB + INVALID_PHONE_DESC"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                        + TAG_DESC_HUSBAND + TAG_DESC_FRIEND + FACULTY_DESC_BOB + YEAR_OF_STUDY_DESC_BOB"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                        + DEPARTMENT_DESC_BOB + SLOT_DESC_BOB + EMAIL_PERSONAL_DESC_BOB + EMAIL_NUS_WORK_DESC_BOB,"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseFailure(parser, ROLE_DESC_BOB_INTVE + NAME_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                        + INVALID_TAG_DESC + VALID_TAG_FRIEND + FACULTY_DESC_BOB + YEAR_OF_STUDY_DESC_BOB"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                        + DEPARTMENT_DESC_BOB + SLOT_DESC_BOB + EMAIL_PERSONAL_DESC_BOB + EMAIL_NUS_WORK_DESC_BOB,"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // invalid faculty"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseFailure(parser, ROLE_DESC_BOB_INTVE + NAME_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                        + TAG_DESC_FRIEND + INVALID_FACULTY_DESC + YEAR_OF_STUDY_DESC_BOB"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                        + DEPARTMENT_DESC_BOB + SLOT_DESC_BOB + EMAIL_PERSONAL_DESC_BOB + EMAIL_NUS_WORK_DESC_BOB,"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                Faculty.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // invalid year of study"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseFailure(parser, ROLE_DESC_BOB_INTVE + NAME_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                        + TAG_DESC_FRIEND + FACULTY_DESC_BOB + INVALID_YEAR_OF_STUDY"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                        + DEPARTMENT_DESC_BOB + SLOT_DESC_BOB + EMAIL_PERSONAL_DESC_BOB + EMAIL_NUS_WORK_DESC_BOB,"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                Messages.MESSAGE_INVALID_YEAR_OF_STUDY);"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // invalid department"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseFailure(parser, ROLE_DESC_BOB_INTVE + NAME_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                        + TAG_DESC_FRIEND + FACULTY_DESC_BOB + YEAR_OF_STUDY_DESC_BOB"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                        + INVALID_DEPARTMENT_DESC + SLOT_DESC_BOB + EMAIL_PERSONAL_DESC_BOB + EMAIL_NUS_WORK_DESC_BOB,"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                Department.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // invalid slot"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseFailure(parser, ROLE_DESC_BOB_INTVE + NAME_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                        + TAG_DESC_FRIEND + FACULTY_DESC_BOB + YEAR_OF_STUDY_DESC_BOB"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                        + DEPARTMENT_DESC_BOB + INVALID_SLOT_DESC + EMAIL_PERSONAL_DESC_BOB + EMAIL_NUS_WORK_DESC_BOB,"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                Slot.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // invalid personal email"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseFailure(parser, ROLE_DESC_BOB_INTVE + NAME_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                        + TAG_DESC_FRIEND + FACULTY_DESC_BOB + YEAR_OF_STUDY_DESC_BOB"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                        + DEPARTMENT_DESC_BOB + SLOT_DESC_BOB + INVALID_PERSONAL_EMAIL_DESC + EMAIL_NUS_WORK_DESC_BOB,"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // invalid work email"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseFailure(parser, ROLE_DESC_BOB_INTVE + NAME_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                        + TAG_DESC_FRIEND + FACULTY_DESC_BOB + YEAR_OF_STUDY_DESC_BOB"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                        + DEPARTMENT_DESC_BOB + SLOT_DESC_BOB + EMAIL_PERSONAL_DESC_BOB + INVALID_NUS_WORK_EMAIL_DESC,"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseFailure(parser, ROLE_DESC_BOB_INTVE + INVALID_NAME_DESC + INVALID_PHONE_DESC"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                        + FACULTY_DESC_BOB + YEAR_OF_STUDY_DESC_BOB + DEPARTMENT_DESC_BOB + SLOT_DESC_BOB"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                        + EMAIL_PERSONAL_DESC_BOB + EMAIL_NUS_WORK_DESC_BOB,"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + ROLE_DESC_BOB_INTVE + NAME_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                        + TAG_DESC_HUSBAND + TAG_DESC_FRIEND + FACULTY_DESC_BOB + YEAR_OF_STUDY_DESC_BOB"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                        + DEPARTMENT_DESC_BOB + SLOT_DESC_BOB + EMAIL_PERSONAL_DESC_BOB + EMAIL_NUS_WORK_DESC_BOB,"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public void parse_interviewerInvalidValue_failure() {"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseFailure(parser, ROLE_DESC_AMY_INTVR + INVALID_NAME_DESC + PHONE_DESC_AMY + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                + DEPARTMENT_DESC_AMY + EMAIL_NUS_WORK_DESC_AMY + SLOT_DESC_AMY,"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseFailure(parser, ROLE_DESC_AMY_INTVR + NAME_DESC_AMY + INVALID_PHONE_DESC + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                        + DEPARTMENT_DESC_AMY + EMAIL_NUS_WORK_DESC_AMY + SLOT_DESC_AMY,"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseFailure(parser, ROLE_DESC_AMY_INTVR + NAME_DESC_AMY + PHONE_DESC_AMY + INVALID_TAG_DESC"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                        + DEPARTMENT_DESC_AMY + EMAIL_NUS_WORK_DESC_AMY + SLOT_DESC_AMY,"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // invalid department"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseFailure(parser, ROLE_DESC_AMY_INTVR + NAME_DESC_AMY + PHONE_DESC_AMY + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                        + INVALID_DEPARTMENT_DESC + EMAIL_NUS_WORK_DESC_AMY + SLOT_DESC_AMY,"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                Department.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // invalid work email"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseFailure(parser, ROLE_DESC_AMY_INTVR + NAME_DESC_AMY + PHONE_DESC_AMY + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                        + DEPARTMENT_DESC_AMY + INVALID_NUS_WORK_EMAIL_DESC + SLOT_DESC_AMY,"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // invalid slot"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseFailure(parser, ROLE_DESC_AMY_INTVR + NAME_DESC_AMY + PHONE_DESC_AMY + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                        + DEPARTMENT_DESC_AMY + EMAIL_NUS_WORK_DESC_AMY + INVALID_SLOT_DESC,"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                Slot.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseFailure(parser, ROLE_DESC_AMY_INTVR + NAME_DESC_AMY + PHONE_DESC_AMY + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                        + DEPARTMENT_DESC_AMY + INVALID_NUS_WORK_EMAIL_DESC + INVALID_SLOT_DESC,"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + ROLE_DESC_AMY_INTVR + NAME_DESC_AMY + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                        + TAG_DESC_FRIEND + DEPARTMENT_DESC_AMY + VALID_NUS_WORK_EMAIL_BOB + SLOT_DESC_AMY,"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 45,
      "-": 50,
      "KendrickAng": 329
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/logic/parser/AddressBookParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import static seedu.scheduler.logic.commands.ImportCommand.FILE_DOES_NOT_EXIST;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import static seedu.scheduler.logic.parser.CliSyntax.PREFIX_FILE_PATH;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.parser.CliSyntax.PREFIX_ROLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.testutil.TypicalPersons.ALICE_INTERVIEWEE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.testutil.TypicalPersons.BOB_INTERVIEWEE_MANUAL;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.logic.commands.AddIntervieweeCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import seedu.scheduler.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import seedu.scheduler.logic.commands.EditIntervieweeCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.logic.commands.EmailCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import seedu.scheduler.logic.commands.ExportCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import seedu.scheduler.logic.commands.ImportCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Interviewee;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.PersonNameHasKeywordsPredicate;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Role;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.testutil.IntervieweeBuilder;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.testutil.IntervieweeUtil;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import seedu.scheduler.testutil.PersonUtil;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import seedu.scheduler.testutil.TestUtil;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParserTest {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser parser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // add interviewee"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Interviewee interviewee \u003d new IntervieweeBuilder(BOB_INTERVIEWEE_MANUAL).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(IntervieweeUtil.getAddCommand(interviewee));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertEquals(new AddIntervieweeCommand(interviewee), command);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                        + ALICE_INTERVIEWEE.getName() + \" \""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                        + PREFIX_ROLE + \"interviewee\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertEquals(new DeleteCommand(ALICE_INTERVIEWEE.getName(), new Role(\"interviewee\")), command);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        EditIntervieweeCommand.EditIntervieweeDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                TestUtil.getDescriptorFromInterviewee(ALICE_INTERVIEWEE);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        EditIntervieweeCommand command \u003d"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                (EditIntervieweeCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                + ALICE_INTERVIEWEE.getName() + \" \" + PREFIX_ROLE + \"interviewee\" + \" \""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                + PersonUtil.getEditIntervieweeDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertEquals(new EditIntervieweeCommand(ALICE_INTERVIEWEE.getName(), descriptor), command);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertEquals(new FindCommand(new PersonNameHasKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public void parseCommand_email() throws Exception {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, EmailCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            -\u003e parser.parseCommand(EmailCommand.COMMAND_WORD));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, EmailCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            -\u003e parser.parseCommand(EmailCommand.COMMAND_WORD + \" ct/timeslot\"));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, EmailCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            -\u003e parser.parseCommand(EmailCommand.COMMAND_WORD + \" ct/invalidcommand\"));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        assertTrue(parser.parseCommand("
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                EmailCommand.COMMAND_WORD + \" ct/timeslot n/Alice\") instanceof EmailCommand);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    public void parseCommand_import() throws Exception {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        assertThrows(ParseException.class,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ImportCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                -\u003e parser.parseCommand(ImportCommand.COMMAND_WORD));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        //No File Path, interviewer"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        assertThrows(ParseException.class,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ImportCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                -\u003e parser.parseCommand(ImportCommand.COMMAND_WORD + \" interviewer\"));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        //No File Path, interviewee"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        assertThrows(ParseException.class,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ImportCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                -\u003e parser.parseCommand(ImportCommand.COMMAND_WORD + \" interviewee\"));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        //No prefix, interviewee"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        assertThrows(ParseException.class,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ImportCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                -\u003e parser.parseCommand(ImportCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                + \" interviewer src/test/data/ImportsTest/InterviewerTestData.csv\"));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        //No prefix, interviewee"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        assertThrows(ParseException.class,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ImportCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                -\u003e parser.parseCommand(ImportCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                + \" interviewee src/test/data/ImportsTest/InterviewerTestData.csv\"));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        //No type"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        assertThrows(ParseException.class,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ImportCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                -\u003e parser.parseCommand(ImportCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                + \" \" + PREFIX_FILE_PATH + \"src/test/data/ImportsTest/InterviewerTestData.csv\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        //File does not exist"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        assertThrows(ParseException.class,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                FILE_DOES_NOT_EXIST, () -\u003e parser.parseCommand(ImportCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                + \" interviewer \" + PREFIX_FILE_PATH + \"src/test/data/ImportsTest/InterviewerInvalidTestData.csv\"));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        //Success"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        assertTrue(parser.parseCommand("
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                ImportCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                        + \" interviewer \" + PREFIX_FILE_PATH + \"src/test/data/ImportsTest/InterviewerTestData.csv\")"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                instanceof ImportCommand);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        //Success"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        assertTrue(parser.parseCommand("
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                ImportCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                        + \" interviewee \" + PREFIX_FILE_PATH + \"src/test/data/ImportsTest/InterviewerTestData.csv\")"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                instanceof ImportCommand);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    public void parseCommand_export() throws Exception {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        assertTrue(parser.parseCommand(ExportCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                        + \" \" + PREFIX_FILE_PATH + \"src/test/data/ImportsTest/storage.csv\")"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                instanceof ExportCommand);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        //File does not exist, still works, should create a new file."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        assertTrue(parser.parseCommand("
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                ExportCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                        + \" \" + PREFIX_FILE_PATH + \"src/test/data/ImportsTest/InvalidTestData.csv\")"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                instanceof ExportCommand);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        //No prefix"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        assertThrows(ParseException.class,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ExportCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                -\u003e parser.parseCommand(ExportCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                + \" src/test/data/ImportsTest/storage.csv\"));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        //Only command word"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        assertThrows(ParseException.class,"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ExportCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                -\u003e parser.parseCommand(ExportCommand.COMMAND_WORD));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        assertThrows(ParseException.class,"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mirozo": 71,
      "dcshzj": 35,
      "-": 69,
      "KendrickAng": 21
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/logic/parser/ArgumentTokenizerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix pSlash \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix dashT \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix hatQ \u003d new Prefix(\"^Q\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_emptyArgsString_noValues() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the last value is returned"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_noPrefixes_allTakenAsPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Same string expected as preamble, but leading/trailing spaces should be trimmed"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString.trim());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_oneArgument() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Preamble present"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  Some preamble string p/ Argument value \";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // No preamble"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \" p/   Argument value \";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArguments() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only two arguments are present"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // All three arguments are present"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: Reusing of the tokenizer multiple times */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /** Also covers: testing for prefixes not specified as a prefix **/"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d unknownPrefix + \"some value\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsWithRepeats() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two arguments repeated, some have empty values"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsJoined() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix aaa \u003d new Prefix(\"aaa\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, aaa);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, new Prefix(\"aaa\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, \"aaa\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, new Prefix(\"aab\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 1,
      "-": 149
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/logic/parser/CommandParserTestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 3,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/logic/parser/DeleteCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.parser.CliSyntax.PREFIX_ROLE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.testutil.TypicalPersons.ALICE_INTERVIEWEE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Role;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseSuccess(parser, ALICE_INTERVIEWEE.getName() + \" \" + PREFIX_ROLE + \"interviewee\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                new DeleteCommand(ALICE_INTERVIEWEE.getName(), new Role(\"interviewee\")));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseFailure(parser, \"a\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 8,
      "-": 24,
      "KendrickAng": 4
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/logic/parser/EditCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.scheduler.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.scheduler.commons.core.Messages.MESSAGE_INVALID_YEAR_OF_STUDY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.DEPARTMENT_DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.DEPARTMENT_DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.EMAIL_NUS_WORK_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.EMAIL_NUS_WORK_DESC_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.EMAIL_PERSONAL_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.EMAIL_PERSONAL_DESC_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.FACULTY_DESC_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.FACULTY_DESC_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.INVALID_DEPARTMENT_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.INVALID_FACULTY_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.INVALID_NUS_WORK_EMAIL_DESC;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.INVALID_PERSONAL_EMAIL_DESC;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.INVALID_SLOT_DESC;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.INVALID_YEAR_OF_STUDY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.ROLE_DESC_AMY_INTVR;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.ROLE_DESC_BOB_INTVE;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.SLOT_DESC_AMY;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.SLOT_DESC_BOB;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.VALID_DEPARTMENT_AMY;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.VALID_DEPARTMENT_BOB;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.VALID_FACULTY_AMY;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.VALID_NUS_WORK_EMAIL_AMY;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.VALID_NUS_WORK_EMAIL_BOB;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.VALID_PERSONAL_EMAIL_AMY;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.VALID_SLOT_AMY;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.VALID_SLOT_BOB;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.VALID_YEAR_OF_STUDY_AMY;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.YEAR_OF_STUDY_DESC_AMY;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.YEAR_OF_STUDY_DESC_BOB;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.scheduler.logic.parser.CliSyntax.PREFIX_DEPARTMENT;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.scheduler.logic.parser.CliSyntax.PREFIX_FACULTY;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.scheduler.logic.parser.CliSyntax.PREFIX_SLOT;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.scheduler.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.scheduler.logic.parser.CliSyntax.PREFIX_YEAR_OF_STUDY;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.scheduler.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.scheduler.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import seedu.scheduler.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import seedu.scheduler.logic.commands.EditIntervieweeCommand;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import seedu.scheduler.logic.commands.EditIntervieweeCommand.EditIntervieweeDescriptor;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import seedu.scheduler.logic.commands.EditInterviewerCommand;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import seedu.scheduler.logic.commands.EditInterviewerCommand.EditInterviewerDescriptor;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import seedu.scheduler.model.person.Department;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import seedu.scheduler.model.person.Email;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import seedu.scheduler.model.person.Emails;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import seedu.scheduler.model.person.Faculty;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import seedu.scheduler.model.person.Name;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import seedu.scheduler.model.person.Phone;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import seedu.scheduler.model.person.Slot;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import seedu.scheduler.model.tag.Tag;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private static final String DEPARTMENT_EMPTY \u003d \" \" + PREFIX_DEPARTMENT;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private static final String SLOT_EMPTY \u003d \" \" + PREFIX_SLOT;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public void parse_intervieweeMissingParts_failure() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // no name specified"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseFailure(parser, ROLE_DESC_BOB_INTVE, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // no role specified"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + ROLE_DESC_BOB_INTVE, EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // no name and no role specified"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public void parse_interviewerMissingParts_failure() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // no name specified"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseFailure(parser, ROLE_DESC_AMY_INTVR, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // no role specified"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY + ROLE_DESC_AMY_INTVR, EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // no name and no role specified"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * A valid preamble only contains alphanumeric characters, and should not be blank."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public void parse_intervieweeInvalidPreamble_failure() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // preamble with special characters"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseFailure(parser, \"-5\" + VALID_NAME_BOB + ROLE_DESC_BOB_INTVE, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseFailure(parser, \"!\" + VALID_NAME_BOB + ROLE_DESC_BOB_INTVE, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseFailure(parser, \"@\" + VALID_NAME_BOB + ROLE_DESC_BOB_INTVE, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseFailure(parser, \"\u003c\u003e\" + VALID_NAME_BOB + ROLE_DESC_BOB_INTVE, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseFailure(parser, \"~\" + VALID_NAME_BOB + ROLE_DESC_BOB_INTVE, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // preamble with unicode characters"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseFailure(parser, \"\\u2202\" + VALID_NAME_BOB + ROLE_DESC_BOB_INTVE, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // invalid arguments being passed as preamble"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseFailure(parser, \"\" + ROLE_DESC_BOB_INTVE, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseFailure(parser, \" \" + ROLE_DESC_BOB_INTVE, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseFailure(parser, \"    \" + ROLE_DESC_BOB_INTVE, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public void parse_interviewerInvalidPreamble_failure() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // preamble with special characters"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseFailure(parser, \"-5\" + VALID_NAME_AMY + ROLE_DESC_AMY_INTVR, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseFailure(parser, \"!\" + VALID_NAME_AMY + ROLE_DESC_AMY_INTVR, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseFailure(parser, \"@\" + VALID_NAME_AMY + ROLE_DESC_AMY_INTVR, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseFailure(parser, \"\u003c\u003e\" + VALID_NAME_AMY + ROLE_DESC_AMY_INTVR, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseFailure(parser, \"~\" + VALID_NAME_AMY + ROLE_DESC_AMY_INTVR, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // preamble with unicode characters"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseFailure(parser, \"\\u2202\" + VALID_NAME_AMY + ROLE_DESC_AMY_INTVR, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // invalid arguments being passed as preamble"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseFailure(parser, \"\" + ROLE_DESC_AMY_INTVR, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseFailure(parser, \" \" + ROLE_DESC_AMY_INTVR, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseFailure(parser, \"    \" + ROLE_DESC_AMY_INTVR, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public void parse_intervieweeInvalidValue_failure() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + ROLE_DESC_BOB_INTVE"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + ROLE_DESC_BOB_INTVE"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + ROLE_DESC_BOB_INTVE"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // invalid personal email"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + ROLE_DESC_BOB_INTVE"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                + INVALID_PERSONAL_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // invalid work email"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + ROLE_DESC_BOB_INTVE"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                + INVALID_NUS_WORK_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // invalid faculty - empty faculty"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + ROLE_DESC_BOB_INTVE"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                + INVALID_FACULTY_DESC, Faculty.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // invalid faculty - blank spaces"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + ROLE_DESC_BOB_INTVE"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                + (\" \" + PREFIX_FACULTY + \"    \"), Faculty.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // invalid year of study - alphabets"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + ROLE_DESC_BOB_INTVE"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                + INVALID_YEAR_OF_STUDY, MESSAGE_INVALID_YEAR_OF_STUDY);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // invalid year of study - greater than 2^31 - 1"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + ROLE_DESC_BOB_INTVE"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                + (\" \" + PREFIX_YEAR_OF_STUDY + \"999999999999999999\"), MESSAGE_INVALID_YEAR_OF_STUDY);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // invalid year of study - negative integer"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + ROLE_DESC_BOB_INTVE"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                + (\" \" + PREFIX_YEAR_OF_STUDY + \"-1\"), MESSAGE_INVALID_YEAR_OF_STUDY);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // invalid department - empty department"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + ROLE_DESC_BOB_INTVE"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                + INVALID_DEPARTMENT_DESC, Department.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // invalid department - blank spaces"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + ROLE_DESC_BOB_INTVE"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                + (\" \" + PREFIX_DEPARTMENT + \"    \"), Department.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // invalid slot - incorrect format"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + ROLE_DESC_BOB_INTVE"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                + INVALID_SLOT_DESC, Slot.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // invalid slot - start and ends at the same time"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + ROLE_DESC_BOB_INTVE"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                + (\" \" + PREFIX_SLOT + \"03/12/2019 00:00-00:00\"), Slot.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // valid input (phone) followed by invalid input (phone)"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + ROLE_DESC_BOB_INTVE"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // multiple valid slot input with one invalid input"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + ROLE_DESC_BOB_INTVE"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                + INVALID_SLOT_DESC + VALID_SLOT_BOB + VALID_SLOT_AMY, Slot.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Interviewer} being edited,"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + ROLE_DESC_BOB_INTVE"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + ROLE_DESC_BOB_INTVE"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                + TAG_EMPTY + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + ROLE_DESC_BOB_INTVE"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_EMPTY + TAG_DESC_FRIEND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // parsing {@code PREFIX_DEPARTMENT} alone will result in department parse error,"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // parsing it together with a valid department results in department parse error"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + ROLE_DESC_BOB_INTVE"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                + DEPARTMENT_EMPTY, Department.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + ROLE_DESC_BOB_INTVE"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                + DEPARTMENT_DESC_BOB + DEPARTMENT_EMPTY, Department.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + ROLE_DESC_BOB_INTVE"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                + DEPARTMENT_EMPTY + DEPARTMENT_DESC_BOB, Department.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // parsing an empty {@code PREFIX_SLOT} alone will result in slot parse error."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // Parsing it together with a valid slot will result in slot parse error."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + ROLE_DESC_BOB_INTVE"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                + SLOT_EMPTY, Slot.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + ROLE_DESC_BOB_INTVE"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                + SLOT_DESC_BOB + SLOT_EMPTY, Slot.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + ROLE_DESC_BOB_INTVE"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                + SLOT_DESC_BOB + SLOT_EMPTY + SLOT_DESC_AMY, Slot.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // multiple invalid values, but only first invalid value captured"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + ROLE_DESC_BOB_INTVE"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                + INVALID_PHONE_DESC + EMAIL_NUS_WORK_DESC_BOB, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public void parse_interviewerInvalidValue_failure() {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY + ROLE_DESC_AMY_INTVR"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY + ROLE_DESC_AMY_INTVR"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY + ROLE_DESC_AMY_INTVR"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // invalid slot - incorrect format"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY + ROLE_DESC_AMY_INTVR"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                + INVALID_SLOT_DESC, Slot.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // invalid slot - start and ends at the same time"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY + ROLE_DESC_AMY_INTVR"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                + (\" \" + PREFIX_SLOT + \"03/12/2019 00:00-00:00\"), Slot.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // invalid department - empty department"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY + ROLE_DESC_AMY_INTVR"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                + INVALID_DEPARTMENT_DESC, Department.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // invalid department - blank spaces"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY + ROLE_DESC_AMY_INTVR"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                + (\" \" + PREFIX_DEPARTMENT + \"    \"), Department.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // invalid work email"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY + ROLE_DESC_AMY_INTVR"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                + INVALID_NUS_WORK_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // valid input (phone) followed by invalid input (phone)"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY + ROLE_DESC_AMY_INTVR"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                + PHONE_DESC_AMY + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Interviewer} being edited,"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY + ROLE_DESC_AMY_INTVR"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY + ROLE_DESC_AMY_INTVR"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                + TAG_EMPTY + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY + ROLE_DESC_AMY_INTVR"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_EMPTY + TAG_DESC_FRIEND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // parsing an empty {@code PREFIX_SLOT} alone will result in slot parse error."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // Parsing it together with a valid slot will result in slot parse error."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY + ROLE_DESC_AMY_INTVR"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                + SLOT_EMPTY, Slot.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY + ROLE_DESC_AMY_INTVR"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                + SLOT_DESC_AMY + SLOT_EMPTY, Slot.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY + ROLE_DESC_AMY_INTVR"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                + SLOT_DESC_AMY + SLOT_EMPTY + SLOT_DESC_BOB, Slot.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // multiple invalid values, but only first value is captured"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY + ROLE_DESC_AMY_INTVR"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                + INVALID_PHONE_DESC + INVALID_NUS_WORK_EMAIL_DESC, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public void parse_intervieweeAllFieldsSpecified_success() {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        String userInput \u003d VALID_NAME_BOB + ROLE_DESC_BOB_INTVE + NAME_DESC_AMY + PHONE_DESC_AMY + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                + EMAIL_NUS_WORK_DESC_AMY + EMAIL_PERSONAL_DESC_AMY + FACULTY_DESC_AMY + YEAR_OF_STUDY_DESC_AMY"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                + DEPARTMENT_DESC_AMY + SLOT_DESC_AMY;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // TODO: possibly abstract out to a EditIntervieweeDescriptorBuilder"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Name name \u003d new Name(VALID_NAME_AMY);"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Phone phone \u003d new Phone(VALID_PHONE_AMY);"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e(List.of(new Tag(VALID_TAG_FRIEND)));"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Email workEmail \u003d new Email(VALID_NUS_WORK_EMAIL_AMY);"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Email personalEmail \u003d new Email(VALID_PERSONAL_EMAIL_AMY);"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Emails emails \u003d new Emails().addNusEmail(workEmail).addPersonalEmail(personalEmail);"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Faculty faculty \u003d new Faculty(VALID_FACULTY_AMY);"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Integer yearOfStudy \u003d Integer.valueOf(VALID_YEAR_OF_STUDY_AMY);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        List\u003cDepartment\u003e departmentList \u003d List.of(new Department(VALID_DEPARTMENT_AMY));"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        List\u003cSlot\u003e slotList \u003d List.of(Slot.fromString(VALID_SLOT_AMY));"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        EditIntervieweeDescriptor descriptor \u003d new EditIntervieweeDescriptor();"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        descriptor.setName(name);"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        descriptor.setPhone(phone);"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        descriptor.setEmails(emails);"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        descriptor.setFaculty(faculty);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        descriptor.setYearOfStudy(yearOfStudy);"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        descriptor.setDepartmentChoices(departmentList);"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        descriptor.setAvailableTimeslots(slotList);"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        EditCommand expectedCommand \u003d new EditIntervieweeCommand(new Name(VALID_NAME_BOB), descriptor);"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public void parse_interviewerAllFieldsSpecified_success() {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        String userInput \u003d VALID_NAME_AMY + ROLE_DESC_AMY_INTVR + NAME_DESC_BOB + PHONE_DESC_BOB + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                + EMAIL_NUS_WORK_DESC_BOB + EMAIL_PERSONAL_DESC_BOB + FACULTY_DESC_BOB + YEAR_OF_STUDY_DESC_BOB"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                + DEPARTMENT_DESC_BOB + SLOT_DESC_BOB;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Name name \u003d new Name(VALID_NAME_BOB);"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Phone phone \u003d new Phone(VALID_PHONE_BOB);"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e(List.of(new Tag(VALID_TAG_FRIEND)));"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Email workEmail \u003d new Email(VALID_NUS_WORK_EMAIL_BOB);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Department department \u003d new Department(VALID_DEPARTMENT_BOB);"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        List\u003cSlot\u003e slotList \u003d List.of(Slot.fromString(VALID_SLOT_BOB));"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        EditInterviewerDescriptor descriptor \u003d new EditInterviewerDescriptor();"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        descriptor.setName(name);"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        descriptor.setPhone(phone);"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        descriptor.setEmail(workEmail);"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        descriptor.setDepartment(department);"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        descriptor.setAvailabilities(slotList);"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        EditCommand expectedCommand \u003d new EditInterviewerCommand(new Name(VALID_NAME_AMY), descriptor);"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public void parse_intervieweeOneFieldSpecified_success() {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        String userInput \u003d VALID_NAME_BOB + ROLE_DESC_BOB_INTVE + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        EditIntervieweeDescriptor descriptor \u003d new EditIntervieweeDescriptor();"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Name targetName \u003d new Name(VALID_NAME_BOB);"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Name resultName \u003d new Name(VALID_NAME_AMY);"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        descriptor.setName(resultName);"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        EditCommand expectedCommand \u003d new EditIntervieweeCommand(targetName, descriptor);"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        userInput \u003d VALID_NAME_BOB + ROLE_DESC_BOB_INTVE + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        descriptor \u003d new EditIntervieweeDescriptor();"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Phone phone \u003d new Phone(VALID_PHONE_AMY);"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        descriptor.setPhone(phone);"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        expectedCommand \u003d new EditIntervieweeCommand(targetName, descriptor);"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        userInput \u003d VALID_NAME_BOB + ROLE_DESC_BOB_INTVE + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        descriptor \u003d new EditIntervieweeDescriptor();"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e(List.of(new Tag(VALID_TAG_HUSBAND)));"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        expectedCommand \u003d new EditIntervieweeCommand(targetName, descriptor);"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // emails"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        userInput \u003d VALID_NAME_BOB + ROLE_DESC_BOB_INTVE + EMAIL_NUS_WORK_DESC_AMY + EMAIL_PERSONAL_DESC_AMY;"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        descriptor \u003d new EditIntervieweeDescriptor();"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Email workEmail \u003d new Email(VALID_NUS_WORK_EMAIL_AMY);"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Email personalEmail \u003d new Email(VALID_PERSONAL_EMAIL_AMY);"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Emails emails \u003d new Emails().addPersonalEmail(personalEmail).addNusEmail(workEmail);"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        descriptor.setEmails(emails);"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        expectedCommand \u003d new EditIntervieweeCommand(targetName, descriptor);"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // departments"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        userInput \u003d VALID_NAME_BOB + ROLE_DESC_BOB_INTVE + DEPARTMENT_DESC_AMY;"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        descriptor \u003d new EditIntervieweeDescriptor();"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        List\u003cDepartment\u003e departmentList \u003d List.of(new Department(VALID_DEPARTMENT_AMY));"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        descriptor.setDepartmentChoices(departmentList);"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        expectedCommand \u003d new EditIntervieweeCommand(targetName, descriptor);"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // slots"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        userInput \u003d VALID_NAME_BOB + ROLE_DESC_BOB_INTVE + SLOT_DESC_AMY;"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        descriptor \u003d new EditIntervieweeDescriptor();"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        List\u003cSlot\u003e slotList \u003d List.of(Slot.fromString(VALID_SLOT_AMY));"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        descriptor.setAvailableTimeslots(slotList);"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        expectedCommand \u003d new EditIntervieweeCommand(targetName, descriptor);"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public void parse_interviewerOneFieldSpecified_success() {"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        String userInput \u003d VALID_NAME_AMY + ROLE_DESC_AMY_INTVR + NAME_DESC_BOB;"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        EditInterviewerDescriptor descriptor \u003d new EditInterviewerDescriptor();"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Name targetName \u003d new Name(VALID_NAME_AMY);"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Name resultName \u003d new Name(VALID_NAME_BOB);"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        descriptor.setName(resultName);"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        EditCommand expectedCommand \u003d new EditInterviewerCommand(targetName, descriptor);"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        userInput \u003d VALID_NAME_AMY + ROLE_DESC_AMY_INTVR + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        descriptor \u003d new EditInterviewerDescriptor();"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Phone phone \u003d new Phone(VALID_PHONE_BOB);"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        descriptor.setPhone(phone);"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        expectedCommand \u003d new EditInterviewerCommand(targetName, descriptor);"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        userInput \u003d VALID_NAME_AMY + ROLE_DESC_AMY_INTVR + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        descriptor \u003d new EditInterviewerDescriptor();"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e(List.of(new Tag(VALID_TAG_FRIEND)));"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        expectedCommand \u003d new EditInterviewerCommand(targetName, descriptor);"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // department"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        userInput \u003d VALID_NAME_AMY + ROLE_DESC_AMY_INTVR + DEPARTMENT_DESC_BOB;"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        descriptor \u003d new EditInterviewerDescriptor();"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Department department \u003d new Department(VALID_DEPARTMENT_BOB);"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        descriptor.setDepartment(department);"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        expectedCommand \u003d new EditInterviewerCommand(targetName, descriptor);"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // work email"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        userInput \u003d VALID_NAME_AMY + ROLE_DESC_AMY_INTVR + EMAIL_NUS_WORK_DESC_BOB;"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        descriptor \u003d new EditInterviewerDescriptor();"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Email email \u003d new Email(VALID_NUS_WORK_EMAIL_BOB);"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        descriptor.setEmail(email);"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        expectedCommand \u003d new EditInterviewerCommand(targetName, descriptor);"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // slots"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        userInput \u003d VALID_NAME_AMY + ROLE_DESC_AMY_INTVR + SLOT_DESC_BOB;"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        descriptor \u003d new EditInterviewerDescriptor();"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        List\u003cSlot\u003e slotList \u003d List.of(Slot.fromString(VALID_SLOT_BOB));"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        descriptor.setAvailabilities(slotList);"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        expectedCommand \u003d new EditInterviewerCommand(targetName, descriptor);"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public void parse_intervieweeMultipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        String userInput \u003d VALID_NAME_BOB + ROLE_DESC_BOB_INTVE"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                + FACULTY_DESC_AMY + TAG_DESC_FRIEND + FACULTY_DESC_AMY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Name targetName \u003d new Name(VALID_NAME_BOB);"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        EditIntervieweeDescriptor descriptor \u003d new EditIntervieweeDescriptor();"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        descriptor.setFaculty(new Faculty(VALID_FACULTY_AMY));"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        descriptor.setTags(new HashSet\u003c\u003e(List.of(new Tag(VALID_TAG_FRIEND), new Tag(VALID_TAG_HUSBAND))));"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        EditIntervieweeCommand expectedCommand \u003d new EditIntervieweeCommand(targetName, descriptor);"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public void parse_interviewerMultipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        String userInput \u003d VALID_NAME_AMY + ROLE_DESC_AMY_INTVR + EMAIL_NUS_WORK_DESC_AMY + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                + EMAIL_NUS_WORK_DESC_AMY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Name targetName \u003d new Name(VALID_NAME_AMY);"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        EditInterviewerDescriptor descriptor \u003d new EditInterviewerDescriptor();"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        descriptor.setEmail(new Email(VALID_NUS_WORK_EMAIL_AMY));"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        descriptor.setTags(new HashSet\u003c\u003e(List.of(new Tag(VALID_TAG_HUSBAND), new Tag(VALID_TAG_FRIEND))));"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        EditInterviewerCommand expectedCommand \u003d new EditInterviewerCommand(targetName, descriptor);"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public void parse_intervieweeInvalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        */"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        String userInput \u003d VALID_NAME_BOB + ROLE_DESC_BOB_INTVE + INVALID_PHONE_DESC + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Name targetname \u003d new Name(VALID_NAME_BOB);"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        EditIntervieweeDescriptor descriptor \u003d new EditIntervieweeDescriptor();"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        descriptor.setPhone(new Phone(VALID_PHONE_AMY));"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        EditIntervieweeCommand expectedCommand \u003d new EditIntervieweeCommand(targetname, descriptor);"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        userInput \u003d VALID_NAME_BOB + ROLE_DESC_BOB_INTVE"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                + FACULTY_DESC_AMY + INVALID_PHONE_DESC + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        descriptor \u003d new EditIntervieweeDescriptor();"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        descriptor.setPhone(new Phone(VALID_PHONE_AMY));"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        descriptor.setFaculty(new Faculty(VALID_FACULTY_AMY));"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        expectedCommand \u003d new EditIntervieweeCommand(targetname, descriptor);"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public void parse_interviewerInvalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        String userInput \u003d VALID_NAME_AMY + ROLE_DESC_AMY_INTVR + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Name targetname \u003d new Name(VALID_NAME_AMY);"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        EditInterviewerDescriptor descriptor \u003d new EditInterviewerDescriptor();"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        descriptor.setPhone(new Phone(VALID_PHONE_BOB));"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        EditInterviewerCommand expectedCommand \u003d new EditInterviewerCommand(targetname, descriptor);"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        userInput \u003d VALID_NAME_AMY + ROLE_DESC_AMY_INTVR + DEPARTMENT_DESC_BOB + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        descriptor \u003d new EditInterviewerDescriptor();"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        descriptor.setPhone(new Phone(VALID_PHONE_BOB));"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        descriptor.setDepartment(new Department(VALID_DEPARTMENT_BOB));"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        expectedCommand \u003d new EditInterviewerCommand(targetname, descriptor);"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public void parse_intervieweeResetTags_success() {"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // passing an empty tag prefix should reset all tags of an interviewee"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        String userInput \u003d VALID_NAME_BOB + ROLE_DESC_BOB_INTVE + TAG_EMPTY;"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Name targetName \u003d new Name(VALID_NAME_BOB);"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        EditIntervieweeDescriptor descriptor \u003d new EditIntervieweeDescriptor();"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        descriptor.setTags(new HashSet\u003c\u003e());"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        EditIntervieweeCommand expectedCommand \u003d new EditIntervieweeCommand(targetName, descriptor);"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public void parse_interviewerResetTags_success() {"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // passing an empty tag prefix should reset all tags of an interviewer"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        String userInput \u003d VALID_NAME_AMY + ROLE_DESC_AMY_INTVR + TAG_EMPTY;"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Name targetName \u003d new Name(VALID_NAME_AMY);"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        EditInterviewerDescriptor descriptor \u003d new EditInterviewerDescriptor();"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        descriptor.setTags(new HashSet\u003c\u003e());"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        EditInterviewerCommand expectedCommand \u003d new EditInterviewerCommand(targetName, descriptor);"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public void parse_intervieweeResetDepartments_failure() {"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // when editing an interviewee, empty departments cannot be passed (I.e Departments can never be empty)."
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        String userInput \u003d VALID_NAME_BOB + ROLE_DESC_BOB_INTVE + DEPARTMENT_EMPTY;"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseFailure(parser, userInput, Department.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public void parse_intervieweeResetSlots_failure() {"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // when editing an interviewee, slots must also never be empty."
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        String userInput \u003d VALID_NAME_BOB + ROLE_DESC_BOB_INTVE + SLOT_EMPTY;"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseFailure(parser, userInput, Slot.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public void parse_interviewerResetSlots_failure() {"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // when editing an interviewer, slots can also never be empty."
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        String userInput \u003d VALID_NAME_AMY + ROLE_DESC_AMY_INTVR + SLOT_EMPTY;"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseFailure(parser, userInput, Slot.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 1,
      "-": 77,
      "KendrickAng": 566
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/logic/parser/EmailCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.logic.commands.EmailCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "public class EmailCommandParserTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    private EmailCommandParser parser \u003d new EmailCommandParser();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                EmailCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 20
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/logic/parser/ExportCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mirozo"
        },
        "content": "package seedu.scheduler.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import static seedu.scheduler.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.FILE_PATH_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.INVALID_FILE_PATH_DESC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.VALID_FILE_PATH;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import static seedu.scheduler.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import static seedu.scheduler.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import seedu.scheduler.logic.commands.ExportCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import seedu.scheduler.model.FilePath;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mirozo"
        },
        "content": "public class ExportCommandParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    public static final String INVALID_FILE_PATH \u003d \"src/test/data/ImportsTest/InterviewerInvalidTestData.csv\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    private ExportCommandParser parser \u003d new ExportCommandParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                ExportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    public void parse_exportCommand_success() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        FilePath validFilePath \u003d new FilePath(VALID_FILE_PATH);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        assertParseSuccess(parser, FILE_PATH_DESC, new ExportCommand(validFilePath));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        FilePath invalidFilePath \u003d new FilePath(INVALID_FILE_PATH);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        assertParseSuccess(parser, INVALID_FILE_PATH_DESC, new ExportCommand(invalidFilePath));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mirozo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mirozo": 34
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/logic/parser/FindCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.PersonNameHasKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                new FindCommand(new PersonNameHasKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 6,
      "-": 27,
      "KendrickAng": 1
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/logic/parser/ImportCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.FILE_PATH_DESC;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.VALID_FILE_PATH;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.VALID_ROLE_AMY_INTVR;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import static seedu.scheduler.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.logic.commands.ImportCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import seedu.scheduler.model.FilePath;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import seedu.scheduler.model.person.Role;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mirozo"
        },
        "content": "public class ImportCommandParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    private ImportCommandParser parser \u003d new ImportCommandParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                ImportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    public void parse_importCommand_success() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        Role expectedRole \u003d new Role(VALID_ROLE_AMY_INTVR);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        FilePath expectedFilePath \u003d new FilePath(VALID_FILE_PATH);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        assertParseSuccess(parser, VALID_ROLE_AMY_INTVR + FILE_PATH_DESC,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                new ImportCommand(expectedRole, expectedFilePath));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mirozo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mirozo": 27,
      "dcshzj": 4
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/logic/parser/ParserUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Email;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Phone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"123456\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 9,
      "-": 161
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/logic/parser/ScheduleCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.logic.commands.ScheduleCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "public class ScheduleCommandParserTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private ScheduleCommandParser parser \u003d new ScheduleCommandParser();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public void parse_nonEmptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        assertParseFailure(parser, \"hello\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                ScheduleCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public void parse_emptyArgs_returnsScheduleCommand() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        // no trailing characters"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        ScheduleCommand expectedScheduleCommand \u003d new ScheduleCommand();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        assertParseSuccess(parser, \"  \", expectedScheduleCommand);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 21,
      "dcshzj": 5
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/model/FilePathTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mirozo"
        },
        "content": "package seedu.scheduler.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import static seedu.scheduler.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mirozo"
        },
        "content": "public class FilePathTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new FilePath(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    public void constructor_invalidFile_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        String invalidFile \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new FilePath(invalidFile));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    public void isValidFilePath() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        //Valid FilePaths"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        assertTrue(FilePath.isValidFilePath(\"storage.csv\")); // alphabets only"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        assertTrue(FilePath.isValidFilePath(\"12345.csv\")); // numbers only"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        assertTrue(FilePath.isValidFilePath(\"12345abc.csv\")); // numbers and letters only"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        assertTrue(FilePath.isValidFilePath(\"1.2.3.4.5.csv\")); // with dots"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        assertTrue(FilePath.isValidFilePath(\"1/2/3/4/5.csv\")); // with slashes"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        //Invalid FilePaths"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        assertFalse(FilePath.isValidFilePath(\"\")); // blank name"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        assertFalse(FilePath.isValidFilePath(\".csv\")); // blank name with .csv"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        assertFalse(FilePath.isValidFilePath(\"1/2/3/4/5/csv\")); // no .csv extension"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        assertFalse(FilePath.isValidFilePath(\"storage.xlsx\")); // no .csv extension"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        assertFalse(FilePath.isValidFilePath(\"abc.csv/abc.com\")); // no .csv extension"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e FilePath.isValidFilePath(null));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mirozo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mirozo": 41
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/model/IntervieweeListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "// TODO: implementation"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "class IntervieweeListTest {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 1,
      "KendrickAng": 4
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/model/InterviewerListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "// TODO: implementation"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "class InterviewerListTest {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 1,
      "KendrickAng": 4
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/model/ModelManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.testutil.TypicalPersons.ALICE_INTERVIEWEE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.testutil.TypicalPersons.BENSON_INTERVIEWER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.testutil.IntervieweeListBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.testutil.InterviewerListBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import seedu.scheduler.testutil.SampleInterviewer;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.testutil.SampleSchedules;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        assertEquals(new IntervieweeList(), new IntervieweeList(modelManager.getIntervieweeList()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        assertEquals(new InterviewerList(), new InterviewerList(modelManager.getInterviewerList()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public void constructorWithEmptyParametersExceptSchedule() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        List\u003cSchedule\u003e schedules \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        schedules.add(SampleSchedules.getSampleFilledSchedule());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        schedules.add(SampleSchedules.getSampleAvailabilityTable());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        ModelManager modelManagerWithData \u003d new ModelManager(new IntervieweeList(), new InterviewerList(),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                new UserPrefs(), schedules);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        List\u003cSchedule\u003e schedulesOfModelManager \u003d modelManagerWithData.getSchedulesList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        assertEquals(schedules, schedulesOfModelManager);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        userPrefs.setIntervieweeListFilePath(Paths.get(\"interviewee/list/file/path\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        userPrefs.setInterviewerListFilePath(Paths.get(\"interviewer/list/file/path\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        userPrefs.setIntervieweeListFilePath(Paths.get(\"new/interviewee/list/file/path\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        userPrefs.setInterviewerListFilePath(Paths.get(\"new/interviewer/list/file/path\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public void setIntervieweeListFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setIntervieweeListFilePath(null));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public void setInterviewerListFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setInterviewerListFilePath(null));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public void setIntervieweeListFilePath_validPath_setsIntervieweeListFilePath() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        Path path \u003d Paths.get(\"interviewee/list/file/path\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        modelManager.setIntervieweeListFilePath(path);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        assertEquals(path, modelManager.getIntervieweeListFilePath());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public void setInterviewerListFilePath_validPath_setsInterviewerListFilePath() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        Path path \u003d Paths.get(\"interviewer/list/file/path\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        modelManager.setInterviewerListFilePath(path);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        assertEquals(path, modelManager.getInterviewerListFilePath());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    public void generateEmptyScheduleList_success() throws ParseException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        ArrayList\u003cSchedule\u003e expectedList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        expectedList.add(SampleSchedules.getSampleAvailabilityTable2());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        modelManager.setInterviewerList(SampleInterviewer.getSampleListOfInterviewers());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        ArrayList\u003cSchedule\u003e testOutput \u003d modelManager.generateEmptyScheduleList();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        assertEquals(expectedList, testOutput);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // assertThrows(NullPointerException.class, () -\u003e modelManager.hasPerson(null));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        IntervieweeList intervieweeList \u003d new IntervieweeListBuilder().withInterviewee(ALICE_INTERVIEWEE).build();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        InterviewerList interviewerList \u003d new InterviewerListBuilder().withInterviewer(BENSON_INTERVIEWER).build();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        IntervieweeList differentIntervieweeList \u003d new IntervieweeList();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        InterviewerList differentInterviewerList \u003d new InterviewerList();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        modelManager \u003d new ModelManager(intervieweeList, interviewerList, userPrefs, new LinkedList\u003c\u003e());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(intervieweeList, interviewerList, userPrefs,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                new LinkedList\u003c\u003e());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        // different intervieweeList -\u003e returns false"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentIntervieweeList, interviewerList, userPrefs,"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                new LinkedList\u003c\u003e())));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        // different interviewerList -\u003e returns false"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(intervieweeList, differentInterviewerList, userPrefs,"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                new LinkedList\u003c\u003e())));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        // different intervieweeList and interviewerList -\u003e returns false"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentIntervieweeList, differentInterviewerList,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                userPrefs, new LinkedList\u003c\u003e())));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        differentUserPrefs.setInterviewerListFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(intervieweeList, interviewerList, differentUserPrefs,"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                new LinkedList\u003c\u003e())));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 13,
      "mirozo": 12,
      "dcshzj": 53,
      "-": 98,
      "KendrickAng": 8
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/model/ModelStub.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.commons.exceptions.ScheduleException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Interviewee;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Interviewer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Slot;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.ui.RefreshListener;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.ui.TabListener;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dcshzj"
        },
        "content": " * This is a Model stub that have all the methods failing."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dcshzj"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "public class ModelStub implements Model {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public void setScheduled(boolean scheduled) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public boolean isScheduled() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public List\u003cSchedule\u003e getEmptyScheduleList() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public void setIntervieweeList(List\u003cInterviewee\u003e interviewees) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public void setInterviewerList(List\u003cInterviewer\u003e interviewers) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public void setIntervieweeListFilePath(Path intervieweeListFilePath) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public void setInterviewerListFilePath(Path interviewerListFilePath) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public Path getIntervieweeListFilePath() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public Path getInterviewerListFilePath() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public ReadAndWriteList\u003cInterviewee\u003e getMutableIntervieweeList() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public ReadAndWriteList\u003cInterviewer\u003e getMutableInterviewerList() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public ObservableList\u003cInterviewee\u003e getFilteredIntervieweeList() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public ObservableList\u003cInterviewer\u003e getFilteredInterviewerList() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public ObservableList\u003cInterviewee\u003e getUnfilteredIntervieweeList() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public ObservableList\u003cInterviewer\u003e getUnfilteredInterviewerList() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public void updateFilteredIntervieweeList(Predicate\u003cInterviewee\u003e predicate) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public void updateFilteredInterviewerList(Predicate\u003cInterviewer\u003e predicate) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public void addInterviewer(Interviewer interviewer) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public void addInterviewee(Interviewee interviewee) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public boolean hasInterviewee(Interviewee interviewee) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public boolean hasInterviewee(Name name) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public boolean hasInterviewer(Interviewer interviewer) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public boolean hasInterviewer(Name name) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public Interviewee getInterviewee(String name) throws NoSuchElementException {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public Interviewer getInterviewer(String name) throws NoSuchElementException {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public void deleteInterviewee(Interviewee target) throws PersonNotFoundException {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public void deleteInterviewer(Interviewer target) throws PersonNotFoundException {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public void setInterviewee(Interviewee target, Interviewee editedTarget) throws PersonNotFoundException {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public void setInterviewer(Interviewer target, Interviewer editedTarget) throws PersonNotFoundException {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public void emailInterviewee(Interviewee interviewee) throws IOException {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public void addRefreshListener(RefreshListener listener) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public void addTabListener(TabListener tabListener) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public void intervieweeTabChange() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public void interviewerTabChange() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public void scheduleTabChange() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public void setEmptyScheduleList() throws ParseException {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public void setSchedulesList(List\u003cSchedule\u003e schedulesList) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public Optional\u003cSlot\u003e getAllocatedSlot(String intervieweeName) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public List\u003cObservableList\u003cObservableList\u003cString\u003e\u003e\u003e getObservableLists() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public List\u003cSchedule\u003e getSchedulesList() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public List\u003cList\u003cString\u003e\u003e getTitlesLists() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public void updateSchedulesAfterScheduling() throws ScheduleException {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public void resetDataBeforeScheduling() {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 261
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/model/ScheduleTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import java.util.Random;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import java.util.stream.IntStream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import seedu.scheduler.commons.exceptions.ScheduleException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import seedu.scheduler.model.person.Interviewee;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import seedu.scheduler.model.person.IntervieweeSlot;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Interviewer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Slot;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import seedu.scheduler.testutil.SampleInterviewee;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.testutil.SampleInterviewer;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.testutil.SampleSchedules;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "public class ScheduleTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public void getInterviewsSlot_existingInterviewee_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Schedule schedule \u003d SampleSchedules.getSampleFilledSchedule();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        List\u003cSlot\u003e johnSlots \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        johnSlots.add(new Slot(\"10/09/2019\", \"18:00\", \"18:30\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        johnSlots.add(new Slot(\"10/09/2019\", \"18:30\", \"19:00\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        List\u003cSlot\u003e selinaSlots \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        selinaSlots.add(new Slot(\"10/09/2019\", \"19:30\", \"20:00\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        selinaSlots.add(new Slot(\"10/09/2019\", \"20:00\", \"20:30\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        assertEquals(johnSlots, schedule.getInterviewSlots(\"John\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        assertEquals(selinaSlots, schedule.getInterviewSlots(\"Selina\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public void getInterviewsSlots_nonExistingInterviewee_emptyList() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Schedule schedule \u003d SampleSchedules.getSampleFilledSchedule();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        assertEquals(new LinkedList\u003c\u003e(), schedule.getInterviewSlots(\"ABC\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public void addAllocatedInterviewees_validAllocatedSlots_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Schedule expectedSchedule \u003d SampleSchedules.getSampleAvailabilityTable();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        expectedSchedule.getObservableList().get(1).set(2, \"Bernard\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        expectedSchedule.getObservableList().get(2).set(2, \"Jessie\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Schedule subjectSchedule \u003d SampleSchedules.getSampleAvailabilityTable();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Interviewer johnathan \u003d SampleInterviewer.getInterviewer(\"Johnathan\", \"Technical\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Interviewee interviewee1 \u003d SampleInterviewee.getSampleIntervieweesForGraph1().get(0);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Interviewee interviewee2 \u003d SampleInterviewee.getSampleIntervieweesForGraph1().get(1);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        // The slots and the interviewer falls in the schedule, and the slot is available for interview,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        // i.e. the slot is \"1\"."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        johnathan.addAllocatedSlot(new IntervieweeSlot(interviewee1, Slot.fromString(\"10/09/2019 18:30-19:00\")));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        johnathan.addAllocatedSlot(new IntervieweeSlot(interviewee2, Slot.fromString(\"10/09/2019 19:00-19:30\")));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        assertDoesNotThrow(() -\u003e subjectSchedule.addAllocatedInterviewees(johnathan, johnathan.getAllocatedSlots()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        assertEquals(subjectSchedule, expectedSchedule);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public void addAllocatedSlot_slotNotInSchedule_notAdded() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Schedule expectedSchedule \u003d SampleSchedules.getSampleAvailabilityTable();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Schedule subjectSchedule \u003d SampleSchedules.getSampleAvailabilityTable();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        List\u003cInterviewee\u003e interviewees \u003d SampleInterviewee.getSampleIntervieweesForGraph1();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        // Interviewer not in schedule"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Interviewer ben \u003d SampleInterviewer.getInterviewer(\"Ben\", \"Presidential\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        ben.addAllocatedSlot(new IntervieweeSlot(interviewees.get(0), Slot.fromString(\"10/09/2019 18:30-19:00\")));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        assertDoesNotThrow(() -\u003e subjectSchedule.addAllocatedInterviewees(ben, ben.getAllocatedSlots()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        assertEquals(subjectSchedule, expectedSchedule);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        // Slot\u0027s date is not the same as schedule"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Interviewer johnathan \u003d SampleInterviewer.getInterviewer(\"Johnathan\", \"Technical\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        johnathan.addAllocatedSlot(new IntervieweeSlot(interviewees.get(0),"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                Slot.fromString(\"25/10/2019 18:30-19:00\")));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        assertDoesNotThrow(() -\u003e subjectSchedule.addAllocatedInterviewees(johnathan, johnathan.getAllocatedSlots()));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        assertEquals(subjectSchedule, expectedSchedule);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        // Slot\u0027s timing is not in the schedule"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Interviewer james \u003d SampleInterviewer.getInterviewer(\"James\", \"Logistics\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        james.addAllocatedSlot(new IntervieweeSlot(interviewees.get(0),"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                Slot.fromString(\"10/09/2019 01:00-02:00\")));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        assertDoesNotThrow(() -\u003e subjectSchedule.addAllocatedInterviewees(james, james.getAllocatedSlots()));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        assertEquals(subjectSchedule, expectedSchedule);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public void addAllocatedSlot_invalidAllocatedSlots_throwScheduleException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Schedule subjectSchedule \u003d SampleSchedules.getSampleAvailabilityTable();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Interviewer johnathan \u003d SampleInterviewer.getInterviewer(\"Johnathan\", \"Technical\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Interviewee interviewee1 \u003d SampleInterviewee.getSampleIntervieweesForGraph1().get(0);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        // The slot in which the interviewee to be added is not available for interview, i.e. is \"0\" instead of \"1\"."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        johnathan.addAllocatedSlot(new IntervieweeSlot(interviewee1, Slot.fromString(\"10/09/2019 20:30-21:00\")));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        assertThrows(ScheduleException.class, () -\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                subjectSchedule.addAllocatedInterviewees(johnathan, johnathan.getAllocatedSlots()));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public void hasInterviewer_existingInterviewer_true() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Schedule schedule \u003d SampleSchedules.getSampleAvailabilityTable();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Interviewer hazel \u003d SampleInterviewer.getHazel();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        assertTrue(schedule.hasInterviewer(hazel));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public void hasInterviewer_nonExistingInterviewer_false() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Schedule schedule \u003d SampleSchedules.getSampleAvailabilityTable();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Interviewer bernard \u003d SampleInterviewer.getBernard();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        assertFalse(schedule.hasInterviewer(bernard));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public void equals_differentSchedules_notEqual() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Schedule filledSchedule \u003d SampleSchedules.getSampleFilledSchedule();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Schedule availabilityTable \u003d SampleSchedules.getSampleAvailabilityTable();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        assertNotEquals(filledSchedule, availabilityTable);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public void cloneSchedule_equalTest_equal() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Schedule schedule \u003d SampleSchedules.getSampleFilledSchedule();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Schedule cloneSchedule \u003d Schedule.cloneSchedule(schedule);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        assertEquals(schedule, cloneSchedule);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public void cloneSchedule_independentTest_notEqual() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Schedule schedule \u003d SampleSchedules.getSampleFilledSchedule();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Schedule cloneSchedule \u003d Schedule.cloneSchedule(schedule);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        String newTitle \u003d \"Technical - Alice Pauline\";"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        String[] newColumn \u003d new String[]{\"0\", \"0\", \"1\", \"0\", \"1\", \"0\"};"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        addColumn(schedule, newTitle, newColumn);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        assertNotEquals(schedule, cloneSchedule);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        assertNotEquals(schedule.getObservableList(), cloneSchedule.getObservableList());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        assertNotEquals(schedule.getTitles(), cloneSchedule.getTitles());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Add a column into the schedule."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private void addColumn(Schedule schedule, String newTitle, String[] newColumn) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        ObservableList\u003cString\u003e titles \u003d schedule.getTitles();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        titles.add(newTitle);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        ObservableList\u003cObservableList\u003cString\u003e\u003e data \u003d schedule.getObservableList();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        int numRows \u003d data.size();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        IntStream.range(0, numRows).forEach(i -\u003e {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            ObservableList\u003cString\u003e row \u003d data.get(i);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            row.add(newColumn[i]);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        });"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public void toTwoDimensionalObservableList_twoDimensionalLinkedList_success() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        LinkedList\u003cLinkedList\u003cString\u003e\u003e list \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        IntStream.range(0, 3).forEach(i -\u003e list.add(getRandomList(5)));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        ObservableList\u003cObservableList\u003cString\u003e\u003e clone \u003d Schedule.toTwoDimensionalObservableList(list);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        assertEquals(list, clone);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private LinkedList\u003cString\u003e getRandomList(int n) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        LinkedList\u003cString\u003e list \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Random rand \u003d new Random();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        IntStream.range(0, n).forEach(i -\u003e list.add(String.valueOf(rand.nextInt(1000))));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 171,
      "dcshzj": 5,
      "KendrickAng": 4
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/model/UserPrefsTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public void setIntervieweeListFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setIntervieweeListFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public void setInterviewerListFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setInterviewerListFilePath(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 10,
      "-": 17
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/model/person/DepartmentTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "class DepartmentTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Department(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public void constructor_invalidDepartment_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Department(\"\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Department(\" Logistics\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public void isValidDepartment() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // null string"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Department.isValidDepartment(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // invalid string -\u003e return false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertFalse(Department.isValidDepartment(\" \"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertFalse(Department.isValidDepartment(\" Marketing\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // valid string -\u003e return true"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertTrue(Department.isValidDepartment(\"Marking\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertTrue(Department.isValidDepartment(\"LoGiStIcs\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertTrue(Department.isValidDepartment(\"Log1i5t1cs!@!\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 2,
      "KendrickAng": 34
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/model/person/EmailTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class EmailTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Email(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidEmail_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidEmail \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Email(invalidEmail));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidEmail() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null email"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Email.isValidEmail(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // blank email"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing parts"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"@example.com\")); // missing local part"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjackexample.com\")); // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@\")); // missing domain name"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid parts"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-\")); // invalid domain name"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam_ple.com\")); // underscore in domain name"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter jack@example.com\")); // spaces in local part"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam ple.com\")); // spaces in domain name"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\" peterjack@example.com\")); // leading space"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com \")); // trailing space"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@@example.com\")); // double \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter@jack@example.com\")); // \u0027@\u0027 symbol in local part"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example@com\")); // \u0027@\u0027 symbol in domain name"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@.example.com\")); // domain name starts with a period"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com.\")); // domain name ends with a period"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-example.com\")); // domain name starts with a hyphen"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com-\")); // domain name ends with a hyphen"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid email"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"PeterJack_1190@example.com\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a@bc\")); // minimal"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"test@localhost\")); // alphabets only"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"!#$%\u0026\u0027*+/\u003d?`{|}~^.-@example.org\")); // special characters local part"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"123@145\")); // numeric local part and domain name"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a1+be!@example1.com\")); // mixture of alphanumeric and special characters"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"peter_jack@very-very-very-long-example.com\")); // long domain name"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"if.you.dream.it_you.can.do.it@example.com\")); // long local part"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 2,
      "-": 59
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/model/person/EmailsTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertIterableEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertSame;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "class EmailsTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Emails(null));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public void constructor_validInput_returnsInstance() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertSame(new Emails(new HashMap\u003c\u003e()).getClass(), Emails.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public void getEmailsOfType() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Email nusEmail \u003d new Email(\"alice@u.nus.edu\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Email personalEmail \u003d new Email(\"alice@gmail.com\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Emails emails \u003d new Emails().addNusEmail(nusEmail).addPersonalEmail(personalEmail);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertIterableEquals(emails.getEmailsOfType(EmailType.NUS), Arrays.asList(nusEmail));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertIterableEquals(emails.getEmailsOfType(EmailType.PERSONAL), Arrays.asList(personalEmail));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 2,
      "KendrickAng": 31
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/model/person/IntervieweeTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.VALID_DEPARTMENT_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.VALID_FACULTY_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.VALID_NUS_WORK_EMAIL_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.VALID_PERSONAL_EMAIL_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.VALID_SLOT_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.VALID_YEAR_OF_STUDY_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.scheduler.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.scheduler.testutil.TypicalPersons.ALICE_INTERVIEWEE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.scheduler.testutil.TypicalPersons.BENSON_INTERVIEWEE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import seedu.scheduler.testutil.IntervieweeBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "class IntervieweeTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public void getTags_modifyUnderlyingTagSet_failure() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // The underlying tag set is unmodifiable, and will throw an exception if we try to change it."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Interviewee interviewee \u003d new IntervieweeBuilder(ALICE_INTERVIEWEE)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e interviewee.getTags().remove(0));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public void isSamePerson() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // same object -\u003e true"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertTrue(ALICE_INTERVIEWEE.isSamePerson(ALICE_INTERVIEWEE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertFalse(ALICE_INTERVIEWEE.isSamePerson(null));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Interviewee editedAlice \u003d new IntervieweeBuilder(ALICE_INTERVIEWEE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertFalse(ALICE_INTERVIEWEE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // same name, different attributes (faculty and email) -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        editedAlice \u003d new IntervieweeBuilder(ALICE_INTERVIEWEE).withFaculty(VALID_FACULTY_BOB)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .withPersonalEmail(VALID_PERSONAL_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertTrue(ALICE_INTERVIEWEE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Interviewee aliceCopy \u003d new IntervieweeBuilder(ALICE_INTERVIEWEE).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertTrue(ALICE_INTERVIEWEE.equals(aliceCopy));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertTrue(ALICE_INTERVIEWEE.equals(ALICE_INTERVIEWEE));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertFalse(ALICE_INTERVIEWEE.equals(null));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertFalse(ALICE_INTERVIEWEE.equals(5));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertFalse(ALICE_INTERVIEWEE.equals(BENSON_INTERVIEWEE));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Interviewee editedAlice \u003d new IntervieweeBuilder(ALICE_INTERVIEWEE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertFalse(ALICE_INTERVIEWEE.equals(editedAlice));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        editedAlice \u003d new IntervieweeBuilder(ALICE_INTERVIEWEE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertFalse(ALICE_INTERVIEWEE.equals(editedAlice));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // different personal email -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        editedAlice \u003d new IntervieweeBuilder(ALICE_INTERVIEWEE).withPersonalEmail(VALID_PERSONAL_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertFalse(ALICE_INTERVIEWEE.equals(editedAlice));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // different work email -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        editedAlice \u003d new IntervieweeBuilder(ALICE_INTERVIEWEE).withNusWorkEmail(VALID_NUS_WORK_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertFalse(ALICE_INTERVIEWEE.equals(editedAlice));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        editedAlice \u003d new IntervieweeBuilder(ALICE_INTERVIEWEE).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertFalse(ALICE_INTERVIEWEE.equals(editedAlice));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // different faculty -\u003e returns false"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        editedAlice \u003d new IntervieweeBuilder(ALICE_INTERVIEWEE).withFaculty(VALID_FACULTY_BOB).build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertFalse(ALICE_INTERVIEWEE.equals(editedAlice));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // different year of study -\u003e returns false"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        editedAlice \u003d new IntervieweeBuilder(ALICE_INTERVIEWEE).withYearOfStudy(VALID_YEAR_OF_STUDY_BOB).build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertFalse(ALICE_INTERVIEWEE.equals(editedAlice));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // different departments -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        editedAlice \u003d new IntervieweeBuilder(ALICE_INTERVIEWEE).withDepartmentChoices(VALID_DEPARTMENT_BOB).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertFalse(ALICE_INTERVIEWEE.equals(editedAlice));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // different slots -\u003e returns false"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        editedAlice \u003d new IntervieweeBuilder(ALICE_INTERVIEWEE).withTimeslots(VALID_SLOT_BOB).build();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertFalse(ALICE_INTERVIEWEE.equals(editedAlice));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 1,
      "KendrickAng": 104
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/model/person/InterviewerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.VALID_DEPARTMENT_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.VALID_SLOT_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.scheduler.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.scheduler.testutil.TypicalPersons.ALICE_INTERVIEWER;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.scheduler.testutil.TypicalPersons.BENSON_INTERVIEWER;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import seedu.scheduler.testutil.InterviewerBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "class InterviewerTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public void getTags_modifyUnderlyingTagSet_failure() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // The underlying tag set is unmodifiable, and will throw an exception if we try to change it."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Interviewer interviewer \u003d new InterviewerBuilder(ALICE_INTERVIEWER)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e interviewer.getTags().remove(0));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public void isSamePerson() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // same object -\u003e true"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertTrue(ALICE_INTERVIEWER.isSamePerson(ALICE_INTERVIEWER));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertFalse(ALICE_INTERVIEWER.isSamePerson(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Interviewer editedAlice \u003d new InterviewerBuilder(ALICE_INTERVIEWER).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertFalse(ALICE_INTERVIEWER.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // same name, different attributes (department) -\u003e returns true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        editedAlice \u003d new InterviewerBuilder(ALICE_INTERVIEWER).withDepartment(VALID_DEPARTMENT_BOB).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertTrue(ALICE_INTERVIEWER.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Interviewer aliceCopy \u003d new InterviewerBuilder(ALICE_INTERVIEWER).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertTrue(ALICE_INTERVIEWER.equals(aliceCopy));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertTrue(ALICE_INTERVIEWER.equals(ALICE_INTERVIEWER));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertFalse(ALICE_INTERVIEWER.equals(null));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertFalse(ALICE_INTERVIEWER.equals(5));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertFalse(ALICE_INTERVIEWER.equals(BENSON_INTERVIEWER));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Interviewer editedAlice \u003d new InterviewerBuilder(ALICE_INTERVIEWER).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertFalse(ALICE_INTERVIEWER.equals(editedAlice));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        editedAlice \u003d new InterviewerBuilder(ALICE_INTERVIEWER).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertFalse(ALICE_INTERVIEWER.equals(editedAlice));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        editedAlice \u003d new InterviewerBuilder(ALICE_INTERVIEWER).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertFalse(ALICE_INTERVIEWER.equals(editedAlice));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // different department -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        editedAlice \u003d new InterviewerBuilder(ALICE_INTERVIEWER).withDepartment(VALID_DEPARTMENT_BOB).build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertFalse(ALICE_INTERVIEWER.equals(editedAlice));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // different slots -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        editedAlice \u003d new InterviewerBuilder(ALICE_INTERVIEWER).withAvailabilities(VALID_SLOT_BOB).build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertFalse(ALICE_INTERVIEWER.equals(editedAlice));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 1,
      "KendrickAng": 83
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/model/person/NameTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 2,
      "-": 38
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/model/person/PersonNameHasKeywordsPredicateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "public class PersonNameHasKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        PersonNameHasKeywordsPredicate firstPredicate \u003d new PersonNameHasKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        PersonNameHasKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                new PersonNameHasKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        PersonNameHasKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                new PersonNameHasKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        PersonNameHasKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                new PersonNameHasKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        predicate \u003d new PersonNameHasKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        predicate \u003d new PersonNameHasKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        predicate \u003d new PersonNameHasKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        PersonNameHasKeywordsPredicate predicate \u003d new PersonNameHasKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        predicate \u003d new PersonNameHasKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // Keywords match phone, but does not match name"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        predicate \u003d new PersonNameHasKeywordsPredicate(Arrays.asList(\"12345\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withPhone(\"12345\").build()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 2,
      "-": 59,
      "KendrickAng": 16
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/model/person/PersonTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.testutil.TypicalPersons.BOB_PERSON_MANUAL;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e person.getTags().remove(0));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isSamePerson() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(ALICE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Person aliceCopy \u003d new PersonBuilder(ALICE).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertFalse(ALICE.equals(BOB_PERSON_MANUAL));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 8,
      "-": 64,
      "KendrickAng": 4
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/model/person/PhoneTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class PhoneTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Phone(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidPhone_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidPhone \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Phone(invalidPhone));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPhone() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null phone number"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Phone.isValidPhone(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone numbers"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"91\")); // less than 3 numbers"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"phone\")); // non-numeric"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone numbers"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"911\")); // exactly 3 numbers"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"93121534\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"124293842033123\")); // long phone numbers"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 2,
      "-": 38
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/model/person/RoleTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "class RoleTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Role(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public void constructor_invalidRole_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        String invalidRole \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Role(invalidRole));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public void isValidRole() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // null role"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Role.isValidRole(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // invalid role"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertFalse(Role.isValidRole(\"\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertFalse(Role.isValidRole(\"Interviewer\")); // no capitalised roles"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertFalse(Role.isValidRole(\"Interviewee\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertFalse(Role.isValidRole(\"teacher\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertFalse(Role.isValidRole(\"interviewwee\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // valid role"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertTrue(Role.isValidRole(\"interviewee\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertTrue(Role.isValidRole(\"interviewer\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Test public void getRole() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // interviewee role"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertEquals(RoleType.INTERVIEWEE, new Role(\"interviewee\").getRole());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // interviewer role"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertEquals(RoleType.INTERVIEWER, new Role(\"interviewer\").getRole());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // invalid role"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Role(\"Interviewer\").getRole());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 2,
      "KendrickAng": 48
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/model/person/SlotTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "class SlotTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public void constructor_null_throwsNUllPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Slot.fromString(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public void constructor_invalidSlot_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e Slot.fromString(\" \"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e Slot.fromString(\"1234\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e Slot.fromString(\"12/34/2019 12:34-12:34\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public void constructorThreeArgs_validInput_noExceptionThrows() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        new Slot(\"16/10/2019\", \"00:00\", \"23:59\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public void isValidSlot() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // null slot"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Slot.fromString(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // invalid slot"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertFalse(Slot.isValidSlot(\"\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertFalse(Slot.isValidSlot(\"16-10-2019 00:00-00:01\")); // incorrect date separator"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertFalse(Slot.isValidSlot(\"16/10/2019 0000-0001\")); // incorrect time format"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertFalse(Slot.isValidSlot(\"16/10/2019 00:00 - 00:01\")); // incorrect spacing"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertFalse(Slot.isValidSlot(\"00/10/2019 00:00-00:01\")); // incorrect date format"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertFalse(Slot.isValidSlot(\"01/10/2019 24:59-24:60\")); // incorrect time format"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // valid slot"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertTrue(Slot.isValidSlot(String.format(Slot.STRING_FORMAT, \"16/10/2019\", \"00:00\", \"23:59\")));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertTrue(Slot.isValidSlot(\"01/01/1997 10:00-10:10\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertTrue(Slot.isValidSlot(\"01/01/0001 00:00-00:01\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertTrue(Slot.isValidSlot(\"11/01/0001 00:00-00:01\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertTrue(Slot.isValidSlot(\"01/11/0001 00:00-00:01\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertTrue(Slot.isValidSlot(\"01/01/1997 00:00-00:01\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertTrue(Slot.isValidSlot(\"30/12/9999 00:00-23:59\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertTrue(Slot.isValidSlot(\"16/10/2019 03:01-20:01\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertTrue(Slot.isValidSlot(\"03/12/1997 10:00-13:00\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public void compareTo_equalDate_returnZero() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Slot subjectSlot \u003d new Slot(\"28/10/2019\", \"10:00\", \"10:30\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Slot testSlot \u003d new Slot(\"28/10/2019\", \"10:00\", \"10:30\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        String errMessage \u003d \"T%d: %d\\n\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        int comp \u003d subjectSlot.compareTo(testSlot);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        assert comp \u003d\u003d 0 : fail(String.format(errMessage, 1, comp));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public void compareTo_laterDate_returnLesserThanZero() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Slot subjectSlot \u003d new Slot(\"28/10/2019\", \"12:00\", \"13:00\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Slot testSlot1 \u003d new Slot(\"01/11/2019\", \"12:00\", \"13:00\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Slot testSlot2 \u003d new Slot(\"01/11/2020\", \"09:00\", \"10:00\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Slot testSlot3 \u003d new Slot(\"01/11/2019\", \"18:00\", \"19:00\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Slot testSlot4 \u003d new Slot(\"28/10/2019\", \"12:30\", \"13:00\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Slot testSlot5 \u003d new Slot(\"28/10/2019\", \"12:01\", \"13:00\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Slot testSlot6 \u003d new Slot(\"28/10/2019\", \"12:00\", \"13:01\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        assertTrue(subjectSlot.compareTo(testSlot1) \u003c 0);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        assertTrue(subjectSlot.compareTo(testSlot2) \u003c 0);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        assertTrue(subjectSlot.compareTo(testSlot3) \u003c 0);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        assertTrue(subjectSlot.compareTo(testSlot4) \u003c 0);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        assertTrue(subjectSlot.compareTo(testSlot5) \u003c 0);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        assertTrue(subjectSlot.compareTo(testSlot6) \u003c 0);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public void compareTo_earlierDate_returnGreaterThanZero() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Slot subjectSlot \u003d new Slot(\"09/08/2019\", \"08:00\", \"10:00\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Slot testSlot1 \u003d new Slot(\"01/01/2019\", \"08:00\", \"10:00\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Slot testSlot2 \u003d new Slot(\"01/01/2010\", \"10:00\", \"12:00\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Slot testSlot3 \u003d new Slot(\"01/01/2019\", \"07:00\", \"08:00\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Slot testSlot4 \u003d new Slot(\"09/08/2019\", \"07:00\", \"08:00\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Slot testSlot5 \u003d new Slot(\"09/08/2019\", \"07:59\", \"08:01\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Slot testSlot6 \u003d new Slot(\"09/08/2019\", \"08:00\", \"08:30\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        assertTrue(subjectSlot.compareTo(testSlot1) \u003e 0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        assertTrue(subjectSlot.compareTo(testSlot2) \u003e 0);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        assertTrue(subjectSlot.compareTo(testSlot3) \u003e 0);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        assertTrue(subjectSlot.compareTo(testSlot4) \u003e 0);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        assertTrue(subjectSlot.compareTo(testSlot5) \u003e 0);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        assertTrue(subjectSlot.compareTo(testSlot6) \u003e 0);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 48,
      "dcshzj": 2,
      "KendrickAng": 50
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/model/person/UniquePersonListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.testutil.TypicalPersons.BOB_PERSON_MANUAL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonListTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    private final UniquePersonList\u003cPerson\u003e uniquePersonList \u003d new UniquePersonList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.contains(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(uniquePersonList.contains(ALICE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personInList_returnsTrue() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(uniquePersonList.contains(ALICE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(uniquePersonList.contains(editedAlice));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.add(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_duplicatePerson_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.add(ALICE));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullTargetPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(null, ALICE));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullEditedPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(ALICE, null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_targetPersonNotInList_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.setPerson(ALICE, ALICE));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonIsSamePerson_success() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, ALICE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        UniquePersonList\u003cPerson\u003e expectedUniquePersonList \u003d new UniquePersonList\u003c\u003e();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasSameIdentity_success() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, editedAlice);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        UniquePersonList\u003cPerson\u003e expectedUniquePersonList \u003d new UniquePersonList\u003c\u003e();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(editedAlice);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        uniquePersonList.setPerson(ALICE, BOB_PERSON_MANUAL);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        UniquePersonList\u003cPerson\u003e expectedUniquePersonList \u003d new UniquePersonList\u003c\u003e();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        expectedUniquePersonList.add(BOB_PERSON_MANUAL);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        uniquePersonList.add(BOB_PERSON_MANUAL);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPerson(ALICE, BOB_PERSON_MANUAL));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.remove(null));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_personDoesNotExist_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.remove(ALICE));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_existingPerson_removesPerson() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.remove(ALICE);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        UniquePersonList\u003cPerson\u003e expectedUniquePersonList \u003d new UniquePersonList\u003c\u003e();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullUniquePersonList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((UniquePersonList\u003cPerson\u003e) null));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        UniquePersonList\u003cPerson\u003e expectedUniquePersonList \u003d new UniquePersonList\u003c\u003e();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        expectedUniquePersonList.add(BOB_PERSON_MANUAL);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons(expectedUniquePersonList);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((List\u003cPerson\u003e) null));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        List\u003cPerson\u003e personList \u003d Collections.singletonList(BOB_PERSON_MANUAL);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons(personList);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        UniquePersonList\u003cPerson\u003e expectedUniquePersonList \u003d new UniquePersonList\u003c\u003e();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        expectedUniquePersonList.add(BOB_PERSON_MANUAL);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e listWithDuplicatePersons \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPersons(listWithDuplicatePersons));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e uniquePersonList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 16,
      "-": 144,
      "KendrickAng": 9
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/model/tag/TagTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class TagTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Tag(null));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidTagName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidTagName \u003d \"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Tag(invalidTagName));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidTagName() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null tag name"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Tag.isValidTagName(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 2,
      "-": 24
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/model/util/CsvReaderTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mirozo"
        },
        "content": "package seedu.scheduler.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import seedu.scheduler.model.person.DefaultValues;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import seedu.scheduler.model.person.Department;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import seedu.scheduler.model.person.Email;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import seedu.scheduler.model.person.Emails;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import seedu.scheduler.model.person.Faculty;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import seedu.scheduler.model.person.Interviewee;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import seedu.scheduler.model.person.Interviewer;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import seedu.scheduler.model.person.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import seedu.scheduler.model.person.Phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import seedu.scheduler.model.person.Slot;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mirozo"
        },
        "content": "public class CsvReaderTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    private static final String INTERVIEWER_FILEPATH_SUCCESS \u003d \"src/test/data/ImportsTest/InterviewerTestData.csv\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    private static final String INTERVIEWEE_FILEPATH_SUCCESS \u003d \"src/test/data/ImportsTest/IntervieweeTestData.csv\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    private static final String SAMPLE_CORRECT_HEADER \u003d \"11/10/2019,Department A - Person A,Department B - Person B,\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            + \"Department C - Person C,Department D - Person D,Department E - Person E,Department F - Person F\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    private static final String[] ALPHABETS \u003d {\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\"};"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    private static final String ROW_OF_INTERVIEWEE_DATA \u003d \"John Doe,john@u.nus.edu,john@hotmail.com,99999999,NUS,1,\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            + \"publicity,\\\"09/10/2019 18:30-19:00, 10/10/2019 19:00-19:30, 11/10/2019 20:00-20:30\\\"\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Interviewers \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    public void getInterviewersFromHeader_success() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        ArrayList\u003cInterviewer\u003e interviewersFromCorrectSample \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                CsvReader.getInterviewersFromHeader(SAMPLE_CORRECT_HEADER.split(\",\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        ArrayList\u003cInterviewer\u003e expectedInterviewers \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        for (int i \u003d 0; i \u003c 6; i++) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            Name interviewerName \u003d new Name(\"Person \" + ALPHABETS[i]);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            Department interviewerDepartment \u003d new Department(\"Department \" + ALPHABETS[i]);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            Interviewer.InterviewerBuilder interviewerBuilder \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                    new Interviewer.InterviewerBuilder(interviewerName,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                            DefaultValues.DEFAULT_PHONE, DefaultValues.DEFAULT_TAGS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            interviewerBuilder.department(interviewerDepartment);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            interviewerBuilder.availabilities(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            expectedInterviewers.add(interviewerBuilder.build());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        assertEquals(expectedInterviewers, interviewersFromCorrectSample);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    public void readInterviewers_success() throws IOException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        CsvReader reader \u003d new CsvReader(INTERVIEWER_FILEPATH_SUCCESS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        ArrayList\u003cInterviewer\u003e testOutput \u003d reader.readInterviewers();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        ArrayList\u003cInterviewer\u003e expectedInterviewers \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        for (int i \u003d 0; i \u003c 10; i++) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            Name interviewerName \u003d new Name(\"Person \" + ALPHABETS[i]);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            Department interviewerDepartment \u003d new Department(\"Department \" + ALPHABETS[i]);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            Interviewer.InterviewerBuilder interviewerBuilder \u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                    new Interviewer.InterviewerBuilder(interviewerName,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                            DefaultValues.DEFAULT_PHONE, DefaultValues.DEFAULT_TAGS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            interviewerBuilder.department(interviewerDepartment);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            if (i \u003d\u003d 0) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                ArrayList\u003cSlot\u003e slots \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                slots.add(Slot.fromString(\"10/10/2019 18:00-18:30\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                interviewerBuilder.availabilities(slots);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                interviewerBuilder.availabilities(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            expectedInterviewers.add(interviewerBuilder.build());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        assertEquals(expectedInterviewers, testOutput);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Interviewees \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    public void readInterviewee_success() throws IOException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        CsvReader reader \u003d new CsvReader(INTERVIEWEE_FILEPATH_SUCCESS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        ArrayList\u003cInterviewee\u003e testOutput \u003d reader.readInterviewees();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        ArrayList\u003cInterviewee\u003e expectedInterviewees \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        for (int i \u003d 0; i \u003c 5; i++) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            Name name \u003d new Name(\"John \" + ALPHABETS[i]);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            Emails emails \u003d new Emails(new HashMap\u003c\u003e());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            emails.addNusEmail(new Email(\"john\" + ALPHABETS[i] + \"@u.nus.edu\"));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            emails.addPersonalEmail(new Email(\"john\" + ALPHABETS[i] + \"@hotmail.com\"));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            Phone phone \u003d new Phone(\"9999999\" + i);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            Faculty faculty \u003d new Faculty(\"NUS\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            Integer yearOfStudy \u003d 1;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            ArrayList\u003cDepartment\u003e choiceOfDepartments \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            choiceOfDepartments.add(new Department(\"publicity\"));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            List\u003cSlot\u003e availableTimeSlots \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            availableTimeSlots.add(Slot.fromString(\"09/10/2019 18:30-19:00\"));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            availableTimeSlots.add(Slot.fromString(\"10/10/2019 19:00-19:30\"));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            availableTimeSlots.add(Slot.fromString(\"11/10/2019 20:00-20:30\"));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            Interviewee interviewee \u003d new Interviewee.IntervieweeBuilder(name, phone, DefaultValues.DEFAULT_TAGS)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                    .availableTimeslots(availableTimeSlots)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                    .departmentChoices(choiceOfDepartments)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                    .emails(emails)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                    .yearOfStudy(yearOfStudy)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                    .faculty(faculty)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                    .build();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            expectedInterviewees.add(interviewee);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        assertEquals(expectedInterviewees, testOutput);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    public void getAllSlots_success() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        List\u003cSlot\u003e testOutput \u003d CsvReader.getAllSlots(ROW_OF_INTERVIEWEE_DATA.split(\",\"));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        List\u003cSlot\u003e expectedSlots \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        expectedSlots.add(Slot.fromString(\"09/10/2019 18:30-19:00\"));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        expectedSlots.add(Slot.fromString(\"10/10/2019 19:00-19:30\"));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        expectedSlots.add(Slot.fromString(\"11/10/2019 20:00-20:30\"));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        assertEquals(expectedSlots, testOutput);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "mirozo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mirozo": 122
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/model/util/CsvWriterTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mirozo"
        },
        "content": "package seedu.scheduler.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.VALID_FILE_PATH;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.getExpectedExportedData;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import seedu.scheduler.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import seedu.scheduler.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import seedu.scheduler.model.Schedule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import seedu.scheduler.testutil.SampleSchedules;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mirozo"
        },
        "content": "public class CsvWriterTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    private static Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    public void writeSchedulesToFile_success() throws IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        ArrayList\u003cString\u003e expectedResult \u003d getExpectedExportedData();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        ArrayList\u003cSchedule\u003e modelData \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        modelData.add(SampleSchedules.getSampleFilledSchedule());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        model.setSchedulesList(modelData);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        CsvWriter writer \u003d new CsvWriter(VALID_FILE_PATH, model);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        ArrayList\u003cString\u003e testResult \u003d writer.writeSchedulesToFile();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        assertEquals(expectedResult, testResult);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mirozo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mirozo": 32
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/storage/JsonAdaptedDepartmentTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.VALID_DEPARTMENT_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import seedu.scheduler.model.person.Department;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "class JsonAdaptedDepartmentTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public void toModelType_validSlotDetails_success() throws Exception {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        JsonAdaptedDepartment department \u003d new JsonAdaptedDepartment(VALID_DEPARTMENT_AMY);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertEquals(new Department(VALID_DEPARTMENT_AMY), department.toModelType());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 1,
      "KendrickAng": 16
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/storage/JsonAdaptedIntervieweeTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.testutil.TypicalPersons.ALICE_INTERVIEWEE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "class JsonAdaptedIntervieweeTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public void toModelType_validIntervieweeDetails_returnsInterviewee() throws Exception {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        JsonAdaptedInterviewee interviewee \u003d new JsonAdaptedInterviewee(ALICE_INTERVIEWEE);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertEquals(ALICE_INTERVIEWEE, interviewee.toModelType());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 2,
      "KendrickAng": 13
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/storage/JsonAdaptedPersonTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.storage.JsonAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Phone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAdaptedPersonTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(BENSON);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BENSON, person.toModelType());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                new JsonAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_TAGS);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(null, VALID_PHONE, VALID_TAGS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_TAGS);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, null, VALID_TAGS);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, invalidTags);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 7,
      "-": 62,
      "KendrickAng": 5
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/storage/JsonAdaptedSlotTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.VALID_SLOT_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import seedu.scheduler.model.person.Slot;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "class JsonAdaptedSlotTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public void toModelType_validSlotDetails_success() throws Exception {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        JsonAdaptedSlot slot \u003d new JsonAdaptedSlot(VALID_SLOT_AMY);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertEquals(Slot.fromString(VALID_SLOT_AMY), slot.toModelType());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 1,
      "KendrickAng": 16
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/storage/JsonUserPrefsStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        userPrefs.setIntervieweeListFilePath(Paths.get(\"interviewees.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        userPrefs.setInterviewerListFilePath(Paths.get(\"interviewers.json\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 13,
      "-": 114
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/storage/StorageManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.testutil.TypicalPersons.getTypicalIntervieweeList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.testutil.TypicalPersons.getTypicalInterviewerList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.IntervieweeList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.InterviewerList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.ReadOnlyList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Interviewee;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Interviewer;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        JsonIntervieweeListStorage intervieweeListStorage \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                new JsonIntervieweeListStorage(getTempFilePath(\"intervieweeList\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        JsonInterviewerListStorage interviewerListStorage \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                new JsonInterviewerListStorage(getTempFilePath(\"interviewerList\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        storageManager \u003d new StorageManager(intervieweeListStorage, interviewerListStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public void intervieweeListReadSave() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "         * {@link JsonIntervieweeListStorage} class."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonIntervieweeListStorageTest} class."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        IntervieweeList original \u003d getTypicalIntervieweeList();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        storageManager.saveIntervieweeList(original);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        ReadOnlyList\u003cInterviewee\u003e retrieved \u003d storageManager.readIntervieweeList().get();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        assertEquals(original, new IntervieweeList(retrieved));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public void interviewerListReadSave() throws Exception {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "         * {@link JsonInterviewerListStorage} class."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonInterviewerListStorageTest} class."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "         */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        InterviewerList original \u003d getTypicalInterviewerList();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        storageManager.saveInterviewerList(original);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        ReadOnlyList\u003cInterviewer\u003e retrieved \u003d storageManager.readInterviewerList().get();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        assertEquals(original, new InterviewerList(retrieved));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public void getIntervieweeListFilePath() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        assertNotNull(storageManager.getIntervieweeListFilePath());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public void getInterviewerListFilePath() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        assertNotNull(storageManager.getInterviewerListFilePath());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 41,
      "-": 51,
      "KendrickAng": 2
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/testutil/Assert.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.function.Executable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing tests."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Assert {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is a wrapper method that invokes {@link Assertions#assertThrows(Class, Executable)}, to maintain consistency"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * with our custom {@link #assertThrows(Class, String, Executable)} method."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * To standardize API calls in this project, users should use this method instead of"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Assertions#assertThrows(Class, Executable)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, Executable executable) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception with the {@code expectedMessage}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * If there\u0027s no need for the verification of the exception\u0027s error message, call"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link #assertThrows(Class, Executable)} instead."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertThrows(Class, Executable)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, String expectedMessage,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            Executable executable) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Throwable thrownException \u003d Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertEquals(expectedMessage, thrownException.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 1,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/testutil/IntervieweeBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Department;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Email;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Emails;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Faculty;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Interviewee;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Slot;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " * A utility class to help with building Interviewee objects from string input."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "public class IntervieweeBuilder extends PersonBuilder {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private static final String DEFAULT_FACULTY \u003d \"School of Computing\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private static final String DEFAULT_YEAR_OF_STUDY \u003d \"2019\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private Faculty faculty;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private Integer yearOfStudy;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private List\u003cDepartment\u003e departmentChoices;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private List\u003cSlot\u003e allocatedTimeslots;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private Emails emails;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Partially initializes the IntervieweeBuilder with {@code p}\u0027s data. Faculty will be {@code DEFAULT_FACULTY} and"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * year of study will be {@code DEFAULT_YEAR_OF_STUDY}, with all other fields empty but not null."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @param p the person to copy."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public IntervieweeBuilder(Person p) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        super(p);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        this.faculty \u003d new Faculty(DEFAULT_FACULTY);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        this.yearOfStudy \u003d Integer.parseInt(DEFAULT_YEAR_OF_STUDY);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        this.departmentChoices \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        this.allocatedTimeslots \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        this.emails \u003d new Emails();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Initializes the IntervieweeBuilder with the data of {@code toCopy}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public IntervieweeBuilder(Interviewee i) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        super(i.getName().fullName,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                i.getPhone().value,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                i.getTags().stream().map(x -\u003e x.tagName).toArray(String[]::new));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        faculty \u003d i.getFaculty();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        yearOfStudy \u003d i.getYearOfStudy();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        departmentChoices \u003d i.getDepartmentChoices();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        allocatedTimeslots \u003d i.getAvailableTimeslots();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        emails \u003d TestUtil.deepCopyEmails(i.getEmails());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Sets the {@code Name} of the {@code Interviewee} that we are building."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public IntervieweeBuilder withName(String name) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        super.withName(name);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Sets the {@code Phone} of the {@code Interviewee} that we are building."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public IntervieweeBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        super.withPhone(phone);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Sets the {@code Faculty} of the {@code Interviewee} that we are building."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public IntervieweeBuilder withFaculty(String faculty) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            this.faculty \u003d ParserUtil.parseFaculty(faculty);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            throw new AssertionError(Messages.MESSAGE_CRITICAL_ERROR, e);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Sets the stud year of the {@code Interviewee} that we are building."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @throws ParseException if input is invalid."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public IntervieweeBuilder withYearOfStudy(String yearOfStudy) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            this.yearOfStudy \u003d ParserUtil.parseYearOfStudy(yearOfStudy);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            throw new AssertionError(Messages.MESSAGE_CRITICAL_ERROR, e);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Sets the {@code Department}s of the {@code Interviewee} that we are building."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @throws ParseException if input is invalid."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public IntervieweeBuilder withDepartmentChoices(String... departments) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            this.departmentChoices \u003d ParserUtil.parseDepartments(Arrays.asList(departments));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            throw new AssertionError(Messages.MESSAGE_CRITICAL_ERROR, e);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Sets the {@code Slot}s of the {@code Interviewee} that we are building."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public IntervieweeBuilder withTimeslots(String... timeslots) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            this.allocatedTimeslots \u003d ParserUtil.parseSlots(Arrays.asList(timeslots));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            throw new AssertionError(Messages.MESSAGE_CRITICAL_ERROR, e);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Sets the personal email of the {@code Interviewee} that we are building."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public IntervieweeBuilder withPersonalEmail(String email) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            Email toAdd \u003d ParserUtil.parseEmail(email);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            if (emails !\u003d null) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                this.emails.addPersonalEmail(toAdd);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                this.emails \u003d new Emails().addPersonalEmail(toAdd);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            throw new AssertionError(Messages.MESSAGE_CRITICAL_ERROR, e);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Sets the Nus work email of the {@code Interviewee} that we are building."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public IntervieweeBuilder withNusWorkEmail(String email) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            Email toAdd \u003d ParserUtil.parseEmail(email);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            if (emails !\u003d null) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                this.emails.addNusEmail(toAdd);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                this.emails \u003d new Emails().addNusEmail(toAdd);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            throw new AssertionError(Messages.MESSAGE_CRITICAL_ERROR, e);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Clears all tags from the parent class and replaces it with the supplied tags."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public IntervieweeBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            super.getTags().clear();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            super.getTags().addAll(ParserUtil.parseTags(Arrays.asList(tags)));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            throw new AssertionError(Messages.MESSAGE_CRITICAL_ERROR, e);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Builds the Interviewee."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public Interviewee build() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return new Interviewee.IntervieweeBuilder(getName(), getPhone(), getTags())"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                    .faculty(faculty)"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                    .yearOfStudy(yearOfStudy)"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                    .departmentChoices(departmentChoices)"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                    .availableTimeslots(allocatedTimeslots)"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                    .emails(emails)"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                    .build();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 11,
      "KendrickAng": 177
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/testutil/IntervieweeListBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.IntervieweeList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Interviewee;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dcshzj"
        },
        "content": " * A utility class to help with building IntervieweeList objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dcshzj"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dcshzj"
        },
        "content": " *     {@code IntervieweeList iveelist \u003d new IntervieweeListBuilder().withInterviewee(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dcshzj"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "public class IntervieweeListBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    private IntervieweeList intervieweeList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public IntervieweeListBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        this.intervieweeList \u003d new IntervieweeList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public IntervieweeListBuilder(IntervieweeList intervieweeList) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        this.intervieweeList \u003d intervieweeList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * Adds a new {@code Interviewee} to the {@code IntervieweeList} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public IntervieweeListBuilder withInterviewee(Interviewee interviewee) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        this.intervieweeList.addEntity(interviewee);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public IntervieweeList build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        return this.intervieweeList;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 33,
      "KendrickAng": 1
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/testutil/IntervieweeUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.parser.CliSyntax.PREFIX_DEPARTMENT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.parser.CliSyntax.PREFIX_FACULTY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.parser.CliSyntax.PREFIX_NUS_WORK_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.parser.CliSyntax.PREFIX_PERSONAL_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.parser.CliSyntax.PREFIX_ROLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.parser.CliSyntax.PREFIX_SLOT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.parser.CliSyntax.PREFIX_YEAR_OF_STUDY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.model.person.EmailType.NUS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.model.person.EmailType.PERSONAL;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Interviewee;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " * A utility class for Interviewee."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "public class IntervieweeUtil extends PersonUtil {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Returns an add command string for the {@code interviewee}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static String getAddCommand(Interviewee interviewee) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getIntervieweeDetails(interviewee);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Returns the part of the command string for the given {@code interviewee}\u0027s details."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static String getIntervieweeDetails(Interviewee interviewee) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        sb.append(PREFIX_ROLE + \"interviewee\" + \" \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        sb.append(getPersonDetails(interviewee));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        sb.append(PREFIX_FACULTY + interviewee.getFaculty().faculty + \" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        sb.append(PREFIX_YEAR_OF_STUDY + interviewee.getYearOfStudy().toString() + \" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        interviewee.getEmails().getEmailsOfType(PERSONAL).stream().forEach("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            e -\u003e sb.append(PREFIX_PERSONAL_EMAIL + e.toString() + \" \")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        );"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        interviewee.getEmails().getEmailsOfType(NUS).stream().forEach("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            e -\u003e sb.append(PREFIX_NUS_WORK_EMAIL + e.toString() + \" \")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        );"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        interviewee.getDepartmentChoices().stream().forEach("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            d -\u003e sb.append(PREFIX_DEPARTMENT + d.department + \" \")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        );"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        interviewee.getAvailableTimeslots().stream().forEach("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            s -\u003e sb.append(PREFIX_SLOT + s.toString() + \" \")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        );"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    // TODO: getEditIntervieweeDetails"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 12,
      "KendrickAng": 41
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/testutil/InterviewerBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Department;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Email;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Interviewer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Slot;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " * A utility class to help with building Interviewer objects from string input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dcshzj"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "public class InterviewerBuilder extends PersonBuilder {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private static final String DEFAULT_DEPARTMENT \u003d \"Logistics\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private static final String DEFAULT_EMAIL \u003d \"default_interviewee@gmail.com\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private List\u003cSlot\u003e availabilities;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    private Department department;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Partially initializes the InterviewerBuilder with {@code p}\u0027s data. Faculty will be {@code DEFAULT_DEPARTMENT}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * and year of study will be {@code DEFAULT_EMAIL}, with all other fields empty but not null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public InterviewerBuilder(Person p) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        super(p);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        this.department \u003d new Department(DEFAULT_DEPARTMENT);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        this.email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        this.availabilities \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Initializes the InterviewerBuilder with the data of {@code i}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public InterviewerBuilder(Interviewer i) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        super(i.getName().fullName,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                i.getPhone().value,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                i.getTags().stream().map(x -\u003e x.tagName).toArray(String[]::new));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        department \u003d i.getDepartment();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        email \u003d i.getEmail();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        availabilities \u003d i.getAvailabilities();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Sets the {@code Name} of the {@code Interviewer} that we are building."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public InterviewerBuilder withName(String name) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        super.withName(name);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Sets the {@code Phone} of the {@code Interviewer} that we are building."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public InterviewerBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        super.withPhone(phone);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * Sets the {@code Department} of the {@code Interviewer} that we are building."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public InterviewerBuilder withDepartment(String department) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            this.department \u003d ParserUtil.parseDepartment(department);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            throw new AssertionError(Messages.MESSAGE_CRITICAL_ERROR, e);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * Sets the {@code Email} of the {@code Interviewer} that we are building."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public InterviewerBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            this.email \u003d ParserUtil.parseEmail(email);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            throw new AssertionError(Messages.MESSAGE_CRITICAL_ERROR, e);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * Sets the {@code Slot}s of the {@code Interviewer} that we are building."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public InterviewerBuilder withAvailabilities(String... availabilities) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            this.availabilities \u003d ParserUtil.parseSlots(Arrays.asList(availabilities));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            throw new AssertionError(Messages.MESSAGE_CRITICAL_ERROR, e);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * Clears all tags from the parent class and replaces it with the supplied tags."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public InterviewerBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            super.getTags().clear();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            super.getTags().addAll(ParserUtil.parseTags(Arrays.asList(tags)));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            throw new AssertionError(Messages.MESSAGE_CRITICAL_ERROR, e);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * Builds the Interviewer."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public Interviewer build() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        return new Interviewer.InterviewerBuilder(getName(), getPhone(), getTags())"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                .department(department)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                .email(email)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .availabilities(availabilities)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 79,
      "KendrickAng": 48
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/testutil/InterviewerListBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.InterviewerList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Interviewer;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dcshzj"
        },
        "content": " * A utility class to help with building InterviewerList objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dcshzj"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dcshzj"
        },
        "content": " *     {@code InterviewerList iverlist \u003d new InterviewerListBuilder().withInterviewer(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dcshzj"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "public class InterviewerListBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    private InterviewerList interviewerList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public InterviewerListBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        this.interviewerList \u003d new InterviewerList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public InterviewerListBuilder(InterviewerList interviewerList) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        this.interviewerList \u003d interviewerList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * Adds a new {@code Interviewer} to the {@code InterviewerList} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public InterviewerListBuilder withInterviewer(Interviewer interviewer) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        this.interviewerList.addEntity(interviewer);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public InterviewerList build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        return this.interviewerList;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 33,
      "KendrickAng": 1
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/testutil/PersonBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Phone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Person objects."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonBuilder {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder(Person personToCopy) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d personToCopy.getName();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d personToCopy.getPhone();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public PersonBuilder(String name, String phone, String... tags) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        this.tags \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withName(String name) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            this.name \u003d ParserUtil.parseName(name);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            throw new AssertionError(Messages.MESSAGE_CRITICAL_ERROR, e);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            this.tags \u003d ParserUtil.parseTags(Arrays.asList(tags));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            throw new AssertionError(Messages.MESSAGE_CRITICAL_ERROR, e);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            this.phone \u003d ParserUtil.parsePhone(phone);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            throw new AssertionError(Messages.MESSAGE_CRITICAL_ERROR, e);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public Person build() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return new Person(name, phone, tags);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return tags;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 8,
      "-": 58,
      "KendrickAng": 35
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/testutil/PersonUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.parser.CliSyntax.PREFIX_DEPARTMENT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.parser.CliSyntax.PREFIX_FACULTY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.parser.CliSyntax.PREFIX_NUS_WORK_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.parser.CliSyntax.PREFIX_PERSONAL_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.parser.CliSyntax.PREFIX_SLOT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.parser.CliSyntax.PREFIX_YEAR_OF_STUDY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.model.person.EmailType.NUS;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.model.person.EmailType.PERSONAL;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.logic.commands.EditIntervieweeCommand.EditIntervieweeDescriptor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Department;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Email;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.EmailType;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Emails;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Interviewee;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Slot;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.tag.Tag;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for Person."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonUtil {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an add command string for adding the {@code person}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getAddCommand(Person person) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code person}\u0027s details."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getPersonDetails(Person person) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().stream().forEach("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Returns the part of the command string the given {@code interviewee}\u0027s details."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static String getIntervieweeDetails(Interviewee interviewee) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        sb.append(PREFIX_NAME + interviewee.getName().fullName + \" \");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        sb.append(PREFIX_PHONE + interviewee.getPhone().value + \" \");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        interviewee.getTags().stream().forEach("
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        );"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        sb.append(PREFIX_FACULTY + interviewee.getFaculty().faculty + \" \");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        sb.append(PREFIX_YEAR_OF_STUDY + interviewee.getYearOfStudy().toString() + \" \");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        interviewee.getEmails().getEmailsOfType(PERSONAL).stream().forEach("
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            s -\u003e sb.append(PREFIX_PERSONAL_EMAIL + s.value + \" \")"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        );"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        interviewee.getEmails().getEmailsOfType(EmailType.NUS).stream().forEach("
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            s -\u003e sb.append(PREFIX_NUS_WORK_EMAIL + s.value + \" \")"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        );"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        interviewee.getDepartmentChoices().stream().forEach("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            s -\u003e sb.append(PREFIX_DEPARTMENT + s.department + \" \")"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        );"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        interviewee.getAvailableTimeslots().stream().forEach("
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            s -\u003e sb.append(PREFIX_SLOT + s.toString() + \" \")"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        );"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Returns the part of command string for the given {@code EditIntervieweeDescriptor}\u0027s details."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static String getEditIntervieweeDescriptorDetails(EditIntervieweeDescriptor descriptor) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        descriptor.getFaculty().ifPresent(faculty -\u003e sb.append(PREFIX_FACULTY).append(faculty.faculty).append(\" \"));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        descriptor.getYearOfStudy().ifPresent(year -\u003e sb.append(PREFIX_YEAR_OF_STUDY)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .append(year.toString()).append(\" \"));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        if (descriptor.getEmails().isPresent()) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            Emails emails \u003d descriptor.getEmails().get();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            List\u003cEmail\u003e personalEmails \u003d emails.getEmailsOfType(PERSONAL);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            List\u003cEmail\u003e nusWorkEmails \u003d emails.getEmailsOfType(NUS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            if (personalEmails.isEmpty()) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                sb.append(PREFIX_PERSONAL_EMAIL);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                personalEmails.forEach(s -\u003e sb.append(PREFIX_PERSONAL_EMAIL).append(s.value).append(\" \"));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            if (nusWorkEmails.isEmpty()) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                sb.append(PREFIX_NUS_WORK_EMAIL);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                nusWorkEmails.forEach(s -\u003e sb.append(PREFIX_NUS_WORK_EMAIL).append(s.value).append(\" \"));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        if (descriptor.getDepartmentChoices().isPresent()) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            List\u003cDepartment\u003e departments \u003d descriptor.getDepartmentChoices().get();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            if (departments.isEmpty()) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                sb.append(PREFIX_DEPARTMENT);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                departments.forEach(s -\u003e sb.append(PREFIX_DEPARTMENT).append(s.department).append(\" \"));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        if (descriptor.getAvailableTimeslots().isPresent()) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            List\u003cSlot\u003e slots \u003d descriptor.getAvailableTimeslots().get();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            if (slots.isEmpty()) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                sb.append(PREFIX_SLOT);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                slots.forEach(s -\u003e sb.append(PREFIX_SLOT).append(s.toString()).append(\" \"));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 22,
      "-": 48,
      "KendrickAng": 83
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/testutil/SampleGraph.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.commons.util.Pair;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.logic.graph.BipartiteGraph;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.logic.graph.IntervieweeVertex;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import seedu.scheduler.logic.graph.InterviewerSlotVertex;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Interviewee;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": " * Provides sample bipartite graphs of interviewees and interview tine slots."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "public class SampleGraph {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public static BipartiteGraph getSampleGraphOne() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        List\u003cInterviewee\u003e interviewees \u003d SampleInterviewee.getSampleIntervieweesForGraph1();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        List\u003cInterviewerSlotVertex\u003e sampleSlotsVertices \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                SampleInterviewSlotVertex.getSampleInterviewSlotVerticesGraph1();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        LinkedList\u003cInterviewerSlotVertex\u003e list0 \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        list0.add(sampleSlotsVertices.get(0));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        IntervieweeVertex interviewee0 \u003d new IntervieweeVertex(interviewees.get(0), 0);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Pair\u003cIntervieweeVertex, List\u003cInterviewerSlotVertex\u003e\u003e vertex0 \u003d new Pair\u003c\u003e(interviewee0, list0);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        LinkedList\u003cInterviewerSlotVertex\u003e list1 \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        list1.add(sampleSlotsVertices.get(0));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        list1.add(sampleSlotsVertices.get(1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        list1.add(sampleSlotsVertices.get(2));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        IntervieweeVertex interviewee1 \u003d new IntervieweeVertex(interviewees.get(1), 1);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Pair\u003cIntervieweeVertex, List\u003cInterviewerSlotVertex\u003e\u003e vertex1 \u003d new Pair\u003c\u003e(interviewee1, list1);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        LinkedList\u003cInterviewerSlotVertex\u003e list2 \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        list2.add(sampleSlotsVertices.get(0));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        list2.add(sampleSlotsVertices.get(3));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        IntervieweeVertex interviewee2 \u003d new IntervieweeVertex(interviewees.get(2), 2);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Pair\u003cIntervieweeVertex, List\u003cInterviewerSlotVertex\u003e\u003e vertex2 \u003d new Pair\u003c\u003e(interviewee2, list2);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        LinkedList\u003cInterviewerSlotVertex\u003e list3 \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        list3.add(sampleSlotsVertices.get(1));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        list3.add(sampleSlotsVertices.get(4));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        IntervieweeVertex interviewee3 \u003d new IntervieweeVertex(interviewees.get(3), 3);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Pair\u003cIntervieweeVertex, List\u003cInterviewerSlotVertex\u003e\u003e vertex3 \u003d new Pair\u003c\u003e(interviewee3, list3);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        LinkedList\u003cInterviewerSlotVertex\u003e list4 \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        list4.add(sampleSlotsVertices.get(2));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        list4.add(sampleSlotsVertices.get(3));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        IntervieweeVertex interviewee4 \u003d new IntervieweeVertex(interviewees.get(4), 4);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Pair\u003cIntervieweeVertex, List\u003cInterviewerSlotVertex\u003e\u003e vertex4 \u003d new Pair\u003c\u003e(interviewee4, list4);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        List\u003cPair\u003cIntervieweeVertex, List\u003cInterviewerSlotVertex\u003e\u003e\u003e graph \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        graph.add(vertex0);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        graph.add(vertex1);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        graph.add(vertex2);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        graph.add(vertex3);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        graph.add(vertex4);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return new BipartiteGraph(graph, interviewees.size(), 5);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 56,
      "dcshzj": 5
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/testutil/SampleInterviewSlotVertex.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import seedu.scheduler.logic.graph.InterviewerSlot;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import seedu.scheduler.logic.graph.InterviewerSlotVertex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Interviewer;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import seedu.scheduler.model.person.Slot;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": " * Provides sample interview slot vertices."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "public class SampleInterviewSlotVertex {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public static List\u003cInterviewerSlotVertex\u003e getSampleInterviewSlotVerticesGraph1() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        List\u003cInterviewer\u003e interviewers \u003d SampleInterviewer.getSampleInterviewersForGraph1();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        InterviewerSlot interviewerSlot0 \u003d new InterviewerSlot(new Slot(\"26/10/2019\", \"18:00\", \"18:30\"),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                interviewers.get(0));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        InterviewerSlot interviewerSlot1 \u003d new InterviewerSlot(new Slot(\"26/10/2019\", \"18:30\", \"19:00\"),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                interviewers.get(0));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        InterviewerSlot interviewerSlot2 \u003d new InterviewerSlot(new Slot(\"27/10/2019\", \"20:00\", \"20:30\"),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                interviewers.get(1));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        InterviewerSlot interviewerSlot3 \u003d new InterviewerSlot(new Slot(\"27/10/2019\", \"20:30\", \"21:00\"),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                interviewers.get(1));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        InterviewerSlot interviewerSlot4 \u003d new InterviewerSlot(new Slot(\"28/10/2019\", \"19:00\", \"19:30\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                interviewers.get(2));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        InterviewerSlotVertex interviewerSlotVertex0 \u003d new InterviewerSlotVertex(interviewerSlot0, 0);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        InterviewerSlotVertex interviewerSlotVertex1 \u003d new InterviewerSlotVertex(interviewerSlot1, 1);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        InterviewerSlotVertex interviewerSlotVertex2 \u003d new InterviewerSlotVertex(interviewerSlot2, 2);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        InterviewerSlotVertex interviewerSlotVertex3 \u003d new InterviewerSlotVertex(interviewerSlot3, 3);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        InterviewerSlotVertex interviewerSlotVertex4 \u003d new InterviewerSlotVertex(interviewerSlot4, 4);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        List\u003cInterviewerSlotVertex\u003e interviewSlotsVertices \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        interviewSlotsVertices.add(interviewerSlotVertex0);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        interviewSlotsVertices.add(interviewerSlotVertex1);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        interviewSlotsVertices.add(interviewerSlotVertex2);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        interviewSlotsVertices.add(interviewerSlotVertex3);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        interviewSlotsVertices.add(interviewerSlotVertex4);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return interviewSlotsVertices;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 42,
      "dcshzj": 2
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/testutil/SampleInterviewee.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import seedu.scheduler.model.person.DefaultValues;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Department;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import seedu.scheduler.model.person.Email;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import seedu.scheduler.model.person.Emails;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import seedu.scheduler.model.person.Faculty;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Interviewee;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Phone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Slot;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": " * Provides sample interviewees."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "public class SampleInterviewee {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    private static final String[] ALPHABETS \u003d {\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\"};"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Returns sample interviewees for the graph 1 in the sample graph data."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public static List\u003cInterviewee\u003e getSampleIntervieweesForGraph1() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        List\u003cSlot\u003e slots \u003d SampleSlot.getSampleSlotsForGraph1();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        List\u003cSlot\u003e slots1 \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        slots1.add(slots.get(0));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        List\u003cSlot\u003e slots2 \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        slots2.add(slots.get(0));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        slots2.add(slots.get(1));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        slots2.add(slots.get(2));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        List\u003cSlot\u003e slots3 \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        slots3.add(slots.get(0));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        slots3.add(slots.get(3));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        List\u003cSlot\u003e slots4 \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        slots4.add(slots.get(1));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        slots4.add(slots.get(4));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        List\u003cSlot\u003e slots5 \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        slots5.add(slots.get(2));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        slots5.add(slots.get(3));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        List\u003cDepartment\u003e technical \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        technical.add(new Department(\"Technical\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Interviewee interviewee1 \u003d new Interviewee.IntervieweeBuilder(new Name(\"Bernard\"), new Phone(\"11112222\"),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                new HashSet\u003c\u003e()).availableTimeslots(slots1).departmentChoices(technical).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Interviewee interviewee2 \u003d new Interviewee.IntervieweeBuilder(new Name(\"Jessie\"), new Phone(\"11112222\"),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                new HashSet\u003c\u003e()).availableTimeslots(slots2).departmentChoices(technical).build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Interviewee interviewee3 \u003d new Interviewee.IntervieweeBuilder(new Name(\"Charlie\"), new Phone(\"11112222\"),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                new HashSet\u003c\u003e()).availableTimeslots(slots3).departmentChoices(technical).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Interviewee interviewee4 \u003d new Interviewee.IntervieweeBuilder(new Name(\"Bane\"), new Phone(\"11112222\"),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                new HashSet\u003c\u003e()).availableTimeslots(slots4).departmentChoices(technical).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Interviewee interviewee5 \u003d new Interviewee.IntervieweeBuilder(new Name(\"HemsWorth\"), new Phone(\"11112222\"),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                new HashSet\u003c\u003e()).availableTimeslots(slots5).departmentChoices(technical).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        List\u003cInterviewee\u003e interviewees \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        interviewees.add(interviewee1);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        interviewees.add(interviewee2);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        interviewees.add(interviewee3);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        interviewees.add(interviewee4);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        interviewees.add(interviewee5);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return interviewees;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     * Generates a sample interviewee list."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     * @return a sample interviewee list."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    public static ArrayList\u003cInterviewee\u003e getSampleIntervieweeList() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        ArrayList\u003cInterviewee\u003e expectedInterviewees \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        for (int i \u003d 0; i \u003c 5; i++) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            Name name \u003d new Name(\"John \" + ALPHABETS[i]);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            Emails emails \u003d new Emails(new HashMap\u003c\u003e());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            emails.addNusEmail(new Email(\"john\" + ALPHABETS[i] + \"@u.nus.edu\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            emails.addPersonalEmail(new Email(\"john\" + ALPHABETS[i] + \"@hotmail.com\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            Phone phone \u003d new Phone(\"9999999\" + i);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            Faculty faculty \u003d new Faculty(\"NUS\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            Integer yearOfStudy \u003d 1;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            ArrayList\u003cDepartment\u003e choiceOfDepartments \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            choiceOfDepartments.add(new Department(\"publicity\"));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            List\u003cSlot\u003e availableTimeSlots \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            availableTimeSlots.add(Slot.fromString(\"09/10/2019 18:30-19:00\"));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            availableTimeSlots.add(Slot.fromString(\"10/10/2019 19:00-19:30\"));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            availableTimeSlots.add(Slot.fromString(\"11/10/2019 20:00-20:30\"));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            Interviewee interviewee \u003d new Interviewee.IntervieweeBuilder(name, phone, DefaultValues.DEFAULT_TAGS)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                    .availableTimeslots(availableTimeSlots)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                    .departmentChoices(choiceOfDepartments)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                    .emails(emails)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                    .yearOfStudy(yearOfStudy)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                    .faculty(faculty)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                    .build();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            expectedInterviewees.add(interviewee);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        return expectedInterviewees;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 60,
      "mirozo": 40,
      "dcshzj": 6
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/testutil/SampleInterviewer.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.DefaultValues;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Department;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Email;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Interviewer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Phone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Slot;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": " * A class which gives sample interviewers."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "public class SampleInterviewer {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    private static String[] alphabets \u003d {\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\"};"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public static Interviewer getInterviewerOneValidAvailability() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        String[] availabilities \u003d new String[]{\"10/09/2019 18:00-18:30\"};"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return getAlicePauline(availabilities);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public static Interviewer getInterviewerMultipleValidAvailabilities() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        String[] availabilities \u003d new String[]{\"10/09/2019 18:30-19:00\", \"10/09/2019 19:00-19:30\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            \"10/09/2019 20:00-20:30\"};"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return getAlicePauline(availabilities);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Invalid date and invalid time."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public static Interviewer getInterviewerMultipleInvalidAvailabilities() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        String[] availabilities \u003d new String[]{\"20/09/2019 18:30-19:00\", \"10/09/2019 22:00-23:30\"};"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return getAlicePauline(availabilities);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public static Interviewer getInterviewerMultipleAvailabilitiesSomeInvalid() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        String[] availabilities \u003d new String[]{\"08/09/2019 18:30-19:00\", \"10/09/2019 19:00-19:30\","
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            \"10/09/2019 20:00-20:30\", \"10/09/2019 23:00-23:30\"};"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return getAlicePauline(availabilities);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private static Interviewer getAlicePauline(String[] availabilities) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Person alice \u003d TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Department department \u003d new Department(\"Technical\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Name name \u003d alice.getName();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Phone phone \u003d alice.getPhone();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Email email \u003d DefaultValues.DEFAULT_PERSONAL_EMAIL;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Set\u003cTag\u003e tags \u003d alice.getTags();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Interviewer alicePauline \u003d new Interviewer.InterviewerBuilder(name, phone, tags)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .email(email)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .department(department)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        alicePauline.setAvailabilities("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                Arrays.stream(availabilities).map(Slot::fromString).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return alicePauline;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public static Interviewer getHazel() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Interviewer hazel \u003d getInterviewer(\"Hazel\", \"Welfare\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        String[] availabilitiesAsArray \u003d new String[]{\"10/09/2019 18:30-19:00\", \"10/09/2019 19:00-19:30\","
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            \"10/09/2019 20:00-20:30\", \"10/09/2019 20:30-21:00\"};"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        List\u003cString\u003e availabilities \u003d Arrays.asList(availabilitiesAsArray);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        hazel.setAvailabilities(availabilities.stream().map(Slot::fromString).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return hazel;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public static Interviewer getBernard() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Interviewer bernard \u003d getInterviewer(\"Bernard\", \"Presidential\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return bernard;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public static Interviewer getInterviewer(String nameString, String departmentString) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Person alice \u003d TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Department department \u003d new Department(departmentString);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Name name \u003d new Name(nameString);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Phone phone \u003d alice.getPhone();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Email email \u003d DefaultValues.DEFAULT_PERSONAL_EMAIL;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Set\u003cTag\u003e tags \u003d alice.getTags();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return new Interviewer.InterviewerBuilder(name, phone, tags)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .department(department)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .email(email)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Returns sample slots for the sample graph 1 in the sample graph data."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public static List\u003cInterviewer\u003e getSampleInterviewersForGraph1() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        List\u003cSlot\u003e slots \u003d SampleSlot.getSampleSlotsForGraph1();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        List\u003cSlot\u003e slots1 \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        slots1.add(slots.get(0));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        slots1.add(slots.get(1));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        List\u003cSlot\u003e slots2 \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        slots2.add(slots.get(2));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        slots2.add(slots.get(3));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        List\u003cSlot\u003e slots3 \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        slots3.add(slots.get(4));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Interviewer interviewer1 \u003d new Interviewer.InterviewerBuilder(new Name(\"Chris\"), new Phone(\"12345678\"),"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                new HashSet\u003c\u003e()).department(new Department(\"Technical\")).availabilities(slots1).build();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Interviewer interviewer2 \u003d new Interviewer.InterviewerBuilder(new Name(\"John\"), new Phone(\"12345678\"),"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                new HashSet\u003c\u003e()).department(new Department(\"Technical\")).availabilities(slots2).build();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Interviewer interviewer3 \u003d new Interviewer.InterviewerBuilder(new Name(\"Barry\"), new Phone(\"12345678\"),"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                new HashSet\u003c\u003e()).department(new Department(\"Technical\")).availabilities(slots3).build();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Interviewer[] interviewersArr \u003d new Interviewer[]{interviewer1, interviewer2, interviewer3};"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return Arrays.asList(interviewersArr);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     * Helper method to get expected list of interviewers for testing."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     * @return expected list of interviewers"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    public static List\u003cInterviewer\u003e getSampleListOfInterviewers() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        ArrayList\u003cInterviewer\u003e expectedInterviewers \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        for (int i \u003d 0; i \u003c 10; i++) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            Name interviewerName \u003d new Name(\"Person \" + alphabets[i]);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            Department interviewerDepartment \u003d new Department(\"Department \" + alphabets[i]);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            Interviewer.InterviewerBuilder interviewerBuilder \u003d"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                    new Interviewer.InterviewerBuilder(interviewerName,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                            DefaultValues.DEFAULT_PHONE, DefaultValues.DEFAULT_TAGS);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            interviewerBuilder.department(interviewerDepartment);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            if (i \u003d\u003d 0) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                ArrayList\u003cSlot\u003e slots \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                slots.add(Slot.fromString(\"10/10/2019 18:00-18:30\"));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                interviewerBuilder.availabilities(slots);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                interviewerBuilder.availabilities(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            expectedInterviewers.add(interviewerBuilder.build());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        return expectedInterviewers;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 91,
      "mirozo": 28,
      "dcshzj": 10,
      "KendrickAng": 22
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/testutil/SampleSchedules.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.Schedule;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": " * A class which gives sample Schedule data."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "public class SampleSchedules {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private static String[][] sampleFilledTable \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        new String[][]{"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                {\"10/09/2019\", \"Welfare - Hazel\", \"Technical - Johnathan\", \"Publicity - Lucia\"},"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                {\"18:00-18:30\", \"John\", \"Steven\", \"0\"},"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                {\"18:30-19:00\", \"Alex\", \"Clark\", \"John\"},"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                {\"19:00-19:30\", \"Alicia\", \"0\", \"charlie\"},"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                {\"19:30-20:00\", \"Charlie\", \"0\", \"Selina\"},"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                {\"20:00-20:30\", \"Selina\", \"0\", \"0\"},"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                {\"20:30-21:00\", \"Natal\", \"0\", \"0\"}};"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private static String[][] sampleAvailabilityTable \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        new String[][]{"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                {\"10/09/2019\", \"Welfare - Hazel\", \"Technical - Johnathan\", \"Publicity - Lucia\"},"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                {\"18:00-18:30\", \"0\", \"0\", \"1\"},"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                {\"18:30-19:00\", \"1\", \"1\", \"0\"},"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                {\"19:00-19:30\", \"1\", \"1\", \"0\"},"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                {\"19:30-20:00\", \"0\", \"0\", \"1\"},"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                {\"20:00-20:30\", \"1\", \"0\", \"1\"},"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                {\"20:30-21:00\", \"1\", \"0\", \"0\"}};"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    private static String[][] sampleAvailabilityTable2 \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            new String[][]{"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                    {\"10/10/2019\", \"Department A - Person A\", \"Department B - Person B\", \"Department C - Person C\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                     \"Department D - Person D\", \"Department E - Person E\", \"Department F - Person F\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                     \"Department G - Person G\", \"Department H - Person H\", \"Department I - Person I\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                     \"Department J - Person J\"},"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                    {\"10:00-10:30\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\"},"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                    {\"10:30-11:00\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\"},"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                    {\"11:00-11:30\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\"},"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                    {\"11:30-12:00\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\"},"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                    {\"12:00-12:30\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\"},"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                    {\"12:30-13:00\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\"},"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                    {\"13:00-13:30\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\"},"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                    {\"13:30-14:00\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\"},"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                    {\"14:00-14:30\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\"},"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                    {\"14:30-15:00\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\"},"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                    {\"15:00-15:30\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\"},"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                    {\"15:30-16:00\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\"},"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                    {\"16:00-16:30\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\"},"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                    {\"16:30-17:00\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\"},"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                    {\"17:00-17:30\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\"},"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                    {\"17:30-18:00\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\"},"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                    {\"18:00-18:30\", \"1\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\"},"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                    {\"18:30-19:00\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\"},"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                    {\"19:00-19:30\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\"},"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                    {\"19:30-20:00\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\"},"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                    {\"20:00-20:30\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\"},"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                    {\"20:30-21:00\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\"}};"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public static Schedule getSampleFilledSchedule() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        String date \u003d sampleFilledTable[0][0];"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        LinkedList\u003cLinkedList\u003cString\u003e\u003e sampleData \u003d TestUtil.toTwoDimensionalLinkedList(sampleFilledTable);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return new Schedule(date, sampleData);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public static Schedule getSampleAvailabilityTable() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        LinkedList\u003cLinkedList\u003cString\u003e\u003e table \u003d TestUtil.toTwoDimensionalLinkedList(sampleAvailabilityTable);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        ObservableList\u003cObservableList\u003cString\u003e\u003e tableObservable \u003d Schedule.toTwoDimensionalObservableList(table);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        ObservableList\u003cString\u003e columnTitles \u003d tableObservable.get(0);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        String date \u003d columnTitles.get(0);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return new Schedule(date, table);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    public static Schedule getSampleAvailabilityTable2() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        LinkedList\u003cLinkedList\u003cString\u003e\u003e table \u003d TestUtil.toTwoDimensionalLinkedList(sampleAvailabilityTable2);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        ObservableList\u003cObservableList\u003cString\u003e\u003e tableObservable \u003d Schedule.toTwoDimensionalObservableList(table);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        ObservableList\u003cString\u003e columnTitles \u003d tableObservable.get(0);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        String date \u003d columnTitles.get(0);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        return new Schedule(date, table);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 42,
      "mirozo": 38,
      "dcshzj": 2,
      "KendrickAng": 2
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/testutil/SampleSlot.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Slot;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": " * Provides sample slot."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "public class SampleSlot {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Returns sample slots for the sample graph one."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public static List\u003cSlot\u003e getSampleSlotsForGraph1() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Slot slot1 \u003d new Slot(\"26/10/2019\", \"18:00\", \"18:30\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Slot slot2 \u003d new Slot(\"26/10/2019\", \"18:30\", \"19:00\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Slot slot3 \u003d new Slot(\"27/10/2019\", \"20:00\", \"20:30\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Slot slot4 \u003d new Slot(\"27/10/2019\", \"20:30\", \"21:00\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Slot slot5 \u003d new Slot(\"28/10/2019\", \"19:00\", \"19:30\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        List\u003cSlot\u003e slots \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        slots.add(slot1);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        slots.add(slot2);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        slots.add(slot3);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        slots.add(slot4);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        slots.add(slot5);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return slots;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 29,
      "dcshzj": 2
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/testutil/SerializableTestClass.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A class used to test serialization and deserialization"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class SerializableTestClass {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"listOfLocalDateTimes\\\" : \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\\"0001-01-01T01:01:00\\\" ],%n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"mapOfIntegerToString\\\" : {%n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"1\\\" : \\\"One\\\",%n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"2\\\" : \\\"Two\\\",%n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"3\\\" : \\\"Three\\\"%n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  }%n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"}\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getNameTestValue() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return NAME_TEST_VALUE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cLocalDateTime\u003e getListTestValues() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MIN);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MAX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(1, \"One\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(2, \"Two\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(3, \"Three\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTestValues() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d getNameTestValue();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes \u003d getListTestValues();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString \u003d getHashMapTestValues();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 1,
      "-": 71
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/testutil/TestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import seedu.scheduler.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.logic.commands.EditIntervieweeCommand.EditIntervieweeDescriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.logic.commands.EditInterviewerCommand.EditInterviewerDescriptor;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.logic.graph.IntervieweeVertex;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import seedu.scheduler.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import seedu.scheduler.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import seedu.scheduler.model.person.Email;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import seedu.scheduler.model.person.EmailType;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import seedu.scheduler.model.person.Emails;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Interviewee;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Interviewer;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Returns the interviewee descriptor with details from the Interviewee {@code i}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static EditIntervieweeDescriptor getDescriptorFromInterviewee(Interviewee i) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        EditIntervieweeDescriptor e \u003d new EditIntervieweeDescriptor();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        e.setName(i.getName());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        e.setPhone(i.getPhone());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        e.setTags(i.getTags());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        e.setFaculty(i.getFaculty());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        e.setYearOfStudy(i.getYearOfStudy());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        e.setDepartmentChoices(i.getDepartmentChoices());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        e.setAvailableTimeslots(i.getAvailableTimeslots());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        e.setEmails(i.getEmails());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return e;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Returns the interviewer descriptor with details from the Interviewer {@code i}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static EditInterviewerDescriptor getDescriptorFromInterviewer(Interviewer i) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        EditInterviewerDescriptor e \u003d new EditInterviewerDescriptor();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        e.setName(i.getName());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        e.setPhone(i.getPhone());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        e.setTags(i.getTags());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        e.setDepartment(i.getDepartment());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        e.setAvailabilities(i.getAvailabilities());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        e.setEmail(i.getEmail());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return e;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Returns a deep copy of the given {@code emails}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static Emails deepCopyEmails(Emails emails) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        HashMap\u003cEmailType, List\u003cEmail\u003e\u003e map \u003d emails.getAllEmails();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        HashMap\u003cEmailType, List\u003cEmail\u003e\u003e deepCopy \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            for (Map.Entry\u003cEmailType, List\u003cEmail\u003e\u003e entry: map.entrySet()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                EmailType type \u003d entry.getKey();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                List\u003cEmail\u003e newList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                for (Email e: entry.getValue()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                    newList.add(ParserUtil.parseEmail(e.value));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                deepCopy.put(type, newList);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            throw new AssertionError(Messages.MESSAGE_CRITICAL_ERROR);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return new Emails(deepCopy);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Returns the given two dimensional array of strings as a two dimensional LinkedList of strings."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public static LinkedList\u003cLinkedList\u003cString\u003e\u003e toTwoDimensionalLinkedList(String[][] table) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        LinkedList\u003cLinkedList\u003cString\u003e\u003e tableCopy \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        for (String[] row : table) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            LinkedList\u003cString\u003e rowCopy \u003d new LinkedList\u003c\u003e(Arrays.asList(row));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            tableCopy.add(rowCopy);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return tableCopy;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Fills up each item in the list given with a sublist."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public static void fillWithSubLists(List\u003cList\u003cIntervieweeVertex\u003e\u003e list, int size) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        for (int i \u003d 0; i \u003c size; i++) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            list.add(new LinkedList\u003c\u003e());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 24,
      "dcshzj": 6,
      "-": 36,
      "KendrickAng": 54
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/testutil/TypicalIndexes.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_FIRST_PERSON \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_SECOND_PERSON \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_THIRD_PERSON \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 2,
      "-": 10
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/testutil/TypicalPersons.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.VALID_DEPARTMENT_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.VALID_DEPARTMENT_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.VALID_FACULTY_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.VALID_NUS_WORK_EMAIL_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.VALID_NUS_WORK_EMAIL_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.VALID_PERSONAL_EMAIL_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.VALID_SLOT_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.VALID_SLOT_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.logic.commands.CommandTestUtil.VALID_YEAR_OF_STUDY_BOB;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.IntervieweeList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.InterviewerList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Interviewee;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Interviewer;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.model.person.Person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalPersons {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    // Persons"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            .withPhone(\"94351253\").withTags(\"friends\").build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            .withPhone(\"98765432\").withTags(\"owesMoney\", \"friends\").build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\").build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\").build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\").build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\").build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    // Typical Interviewees"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final Interviewee ALICE_INTERVIEWEE \u003d new IntervieweeBuilder(ALICE).withFaculty(\"Engineering\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            .withYearOfStudy(\"2019\").withDepartmentChoices(\"Logistics\").withPersonalEmail(\"HeyThere@gmail.com\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            .withNusWorkEmail(\"Heyo@u.nus.edu\").withTimeslots(\"03/03/2019 16:00-17:00\").build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final Interviewee BENSON_INTERVIEWEE \u003d new IntervieweeBuilder(BENSON).withFaculty(\"Engineering\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            .withYearOfStudy(\"2019\").withDepartmentChoices(\"Logistics\").withPersonalEmail(\"HiThere@gmail.com\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            .withNusWorkEmail(\"Heyo@u.nus.edu\").withTimeslots(\"03/03/2019 16:00-17:00\").build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final Interviewee CARL_INTERVIEWEE \u003d new IntervieweeBuilder(CARL).withFaculty(\"Engineering\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            .withYearOfStudy(\"2019\").withDepartmentChoices(\"Logistics\").withPersonalEmail(\"HiThere@gmail.com\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            .withNusWorkEmail(\"Heyo@u.nus.edu\").withTimeslots(\"03/03/2019 16:00-17:00\").build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final Interviewee DANIEL_INTERVIEWEE \u003d new IntervieweeBuilder(DANIEL).withFaculty(\"Engineering\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            .withYearOfStudy(\"2019\").withDepartmentChoices(\"Logistics\").withPersonalEmail(\"HiThere@gmail.com\")"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            .withNusWorkEmail(\"Heyo@u.nus.edu\").withTimeslots(\"03/03/2019 16:00-17:00\").build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final Interviewee ELLE_INTERVIEWEE \u003d new IntervieweeBuilder(ELLE).withFaculty(\"Engineering\")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            .withYearOfStudy(\"2019\").withDepartmentChoices(\"Logistics\").withPersonalEmail(\"HiThere@gmail.com\")"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            .withNusWorkEmail(\"Heyo@u.nus.edu\").withTimeslots(\"03/03/2019 16:00-17:00\").build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final Interviewee FIONA_INTERVIEWEE \u003d new IntervieweeBuilder(FIONA).withFaculty(\"Engineering\")"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            .withYearOfStudy(\"2019\").withDepartmentChoices(\"Logistics\").withPersonalEmail(\"HiThere@gmail.com\")"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            .withNusWorkEmail(\"Heyo@u.nus.edu\").withTimeslots(\"03/03/2019 16:00-17:00\").build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final Interviewee GEORGE_INTERVIEWEE \u003d new IntervieweeBuilder(GEORGE).withFaculty(\"Engineering\")"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            .withYearOfStudy(\"2019\").withDepartmentChoices(\"Logistics\").withPersonalEmail(\"HiThere@gmail.com\")"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            .withNusWorkEmail(\"Heyo@u.nus.edu\").withTimeslots(\"03/03/2019 16:00-17:00\").build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    // Typical Interviewers"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final Interviewer ALICE_INTERVIEWER \u003d new InterviewerBuilder(ALICE).withDepartment(\"Logistics\")"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            .withEmail(\"interviewer@gmail.com\").withAvailabilities(\"05/05/2019 16:00-17:00\").build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final Interviewer BENSON_INTERVIEWER \u003d new InterviewerBuilder(BENSON).withDepartment(\"Logistics\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            .withEmail(\"interviewer@gmail.com\").withAvailabilities(\"05/05/2019 16:00-17:00\").build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final Interviewer CARL_INTERVIEWER \u003d new InterviewerBuilder(CARL).withDepartment(\"Logistics\")"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            .withEmail(\"interviewer@gmail.com\").withAvailabilities(\"05/05/2019 16:00-17:00\").build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final Interviewer DANIEL_INTERVIEWER \u003d new InterviewerBuilder(DANIEL).withDepartment(\"Logistics\")"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            .withEmail(\"interviewer@gmail.com\").withAvailabilities(\"05/05/2019 16:00-17:00\").build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final Interviewer ELLE_INTERVIEWER \u003d new InterviewerBuilder(ELLE).withDepartment(\"Logistics\")"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            .withEmail(\"interviewer@gmail.com\").withAvailabilities(\"05/05/2019 16:00-17:00\").build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final Interviewer FIONA_INTERVIEWER \u003d new InterviewerBuilder(FIONA).withDepartment(\"Logistics\")"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            .withEmail(\"interviewer@gmail.com\").withAvailabilities(\"05/05/2019 16:00-17:00\").build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final Interviewer GEORGE_INTERVIEWER \u003d new InterviewerBuilder(GEORGE).withDepartment(\"Logistics\")"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            .withEmail(\"interviewer@gmail.com\").withAvailabilities(\"05/05/2019 16:00-17:00\").build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final Person AMY_PERSON_MANUAL \u003d new PersonBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            .withPhone(VALID_PHONE_AMY).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final Interviewer AMY_INTERVIEWER_MANUAL \u003d new InterviewerBuilder(AMY_PERSON_MANUAL)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            .withDepartment(VALID_DEPARTMENT_AMY).withAvailabilities(VALID_SLOT_AMY)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            .withEmail(VALID_NUS_WORK_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final Person BOB_PERSON_MANUAL \u003d new PersonBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final Interviewee BOB_INTERVIEWEE_MANUAL \u003d new IntervieweeBuilder(BOB_PERSON_MANUAL)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            .withFaculty(VALID_FACULTY_BOB).withYearOfStudy(VALID_YEAR_OF_STUDY_BOB)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            .withDepartmentChoices(VALID_DEPARTMENT_BOB).withTimeslots(VALID_SLOT_BOB)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            .withPersonalEmail(VALID_PERSONAL_EMAIL_BOB).withNusWorkEmail(VALID_NUS_WORK_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private TypicalPersons() {} // prevents instantiation"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Returns an {@code IntervieweeList} with all the typical interviewees."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public static IntervieweeList getTypicalIntervieweeList() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        IntervieweeList ib \u003d new IntervieweeList();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        for (Interviewee i: getTypicalInterviewees()) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            ib.addEntity(i);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return ib;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static List\u003cInterviewee\u003e getTypicalInterviewees() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE_INTERVIEWEE, BENSON_INTERVIEWEE, CARL_INTERVIEWEE,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                DANIEL_INTERVIEWEE, ELLE_INTERVIEWEE, FIONA_INTERVIEWEE, GEORGE_INTERVIEWEE));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static InterviewerList getTypicalInterviewerList() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        InterviewerList ib \u003d new InterviewerList();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        for (Interviewer i: getTypicalInterviewers()) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            ib.addEntity(i);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return ib;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public static List\u003cInterviewer\u003e getTypicalInterviewers() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE_INTERVIEWER, BENSON_INTERVIEWER, CARL_INTERVIEWER,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                DANIEL_INTERVIEWER, ELLE_INTERVIEWER, FIONA_INTERVIEWER, GEORGE_INTERVIEWER));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 30,
      "-": 25,
      "KendrickAng": 74
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/ui/TestFxmlObject.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.DefaultProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A test object which can be constructed via an FXML file."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "@DefaultProperty(\"text\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestFxmlObject {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private String text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject() {}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject(String text) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        setText(text);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setText(String text) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.text \u003d text;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof TestFxmlObject // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 1,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/scheduler/ui/UiPartTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.scheduler.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.scheduler.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.scheduler.MainApp;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileUrl_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        URL missingFileUrl \u003d new URL(testFolder.toUri().toURL(), MISSING_FILE_PATH);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileUrl_throwsAssertionError() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileUrl_loadsFile() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileWithFxRootUrl_loadsFile() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        TestFxmlObject root \u003d new TestFxmlObject();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileName_throwsAssertionError() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private URL getTestFileUrl(String testFilePath) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        String testFilePathInView \u003d \"/view/\" + testFilePath;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(testFileUrl, testFilePathInView + \" does not exist.\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFileUrl;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * UiPart used for testing."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * It should only be used with invalid FXML files or the valid file located at {@link VALID_FILE_PATH}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        @FXML"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        private TestFxmlObject validFileRoot; // Check that @FXML annotations work"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName, root);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 3,
      "-": 111,
      "KendrickAng": 1
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFile.fxml",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "\u003c?import seedu.scheduler.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 1,
      "-": 3
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "\u003cfx:root type\u003d\"seedu.scheduler.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 1,
      "-": 5
    }
  },
  {
    "path": "test.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "testing"
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 1
    }
  }
]
