[
  {
    "path": "README.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "\u003d Scheduler"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "https://travis-ci.org/AY1920S1-CS2103-F09-1/main[image:https://travis-ci.org/se-edu/addressbook-level3.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "https://ci.appveyor.com/project/ChrisKheng/main/branch/master[image:https://ci.appveyor.com/api/projects/status/7xipch56f5hpgwqw/branch/master?svg\u003dtrue[Build status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "https://coveralls.io/github/AY1920S1-CS2103-F09-1/main?branch\u003dmaster[image:https://coveralls.io/repos/github/AY1920S1-CS2103-F09-1/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "https://gitter.im/se-edu/Lobby[image:https://badges.gitter.im/se-edu/Lobby.svg[Gitter chat]]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "*Scheduler* is a desktop application for scheduling interviews. It matches interviewees with interviewers automatically through our robust algorithm so you don\u0027t have to."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "If you are a secretary facing a headache on organising interview slots for your team, we offer just the solution for you. Simply import or input the available timings of both your interviewers and interviewees, and start scheduling those interviews right away!"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "For more information, please refer to our \u003c\u003cUserGuide#, User Guide\u003e\u003e. Developers, please refer to our \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "This application was developed by a team of students from the National University of Singapore (NUS) as part of the CS2103 Software Engineering module. \u003c\u003cAboutUs#, Read more about us\u003e\u003e or \u003c\u003cContactUs#, contact us\u003e\u003e directly."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "This project was built on the AddressBook-Level3 project developed as part of the SE-EDU initiative: https://se-education.org"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 3,
      "dcshzj": 7,
      "-": 19
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    compile \"org.apache.poi:poi:3.17\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    compile \"org.apache.poi:poi-ooxml:3.17\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    archiveName \u003d \u0027scheduler.jar\u0027"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        \u0027site-name\u0027: \u0027Scheduler\u0027,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/AY1920S1-CS2103-F09-1/main\u0027,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 3,
      "mirozo": 2,
      "-": 152
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Scheduler was developed by https://github.com/AY1920S1-CS2103-F09-1[Team AY1920S1-CS2103-F09-1] +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "\u003d\u003d\u003d Prof. Damith C.Rajapakse"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "image::damithc.jpg[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "{empty}[http://www.comp.nus.edu.sg/~damithch[homepage]] [https://github.com/damithc[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Project Advisor"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "\u003d\u003d\u003d Kheng Yau Dong"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "image::chriskheng.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "{empty}[https://github.com/ChrisKheng[github]] [\u003c\u003cKheng-Yau-Dong#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Role: Team lead, developer +"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Responsibilities: Scheduling component"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "\u003d\u003d\u003d Hsu Zhong Jun"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "image::dcshzj.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "{empty}[https://github.com/dcshzj[github]] [\u003c\u003cHsu-Zhong-Jun#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Role: Developer, testing +"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Responsibilities: Emailing component"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "\u003d\u003d\u003d Ang Wei Heng Kendrick"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "image::kendrickang.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "{empty}[https://github.com/KendrickAng[github]] [\u003c\u003cAng-Wei-Heng-Kendrick#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Role: Developer, integration +"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Responsibilities: Model"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "\u003d\u003d\u003d Kwan Chen Sheng"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "image::mrchensheng21.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "{empty}[https://github.com/mrchensheng21[github]] [\u003c\u003cKwan-Chen-Sheng#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Role: Developer, documentation +"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "Responsibilities: UI"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "\u003d\u003d\u003d Goh Rui Zhi"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "image::mirozo.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "{empty}[https://github.com/mirozo[github]] [\u003c\u003cGoh-Rui-Zhi#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Role: Developer, documentation +"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Responsibilities: Storage"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 30,
      "-": 34
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/AY1920S1-CS2103-F09-1/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "* *Email us* : You can also reach us at xan8887@gmail.com"
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 2,
      "-": 5
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d AddressBook Level 3 - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level3/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "By: `Team SE-EDU`      Since: `Jun 2016`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cSettingUp#, here\u003e\u003e."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureDiagram.png[]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "The `.puml` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the \u003c\u003cUsingPlantUml#, Using PlantUML guide\u003e\u003e to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has two classes called link:{repoURL}/src/main/java/seedu/address/Main.java[`Main`] and link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureSequenceDiagram.png[]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "\u003d\u003d\u003d\u003d Schedule View"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "The display schedule feature extends Scheduler to display multiple tables of schedule per day. It is a component in the \"MainWindow\" class"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "stored in a \"ScheduleViewPanel\" class. Within the \"ScheduleViewPanel\" class, objects of \"ScheduleView\" class are stored into the panel."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "ScheduleViewPanel implements the following function:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "*`fillPanel()` -- Fill the ScheduleView component with the schedule tables for each day."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Given below is an example scenario of what will be displayed to the user."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Step 1. The user launches the application. The Ui will start and the MainWindow will be displayed first."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Step 2. MainWindow will call all the children such as the HelpWindow, CommandBox, Result Display, StatusBarFooter and ScheduleViewPanel."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Step 3. Once ScheduleViewPanel is called, it will take in a list of titles and ObservableList data from the Logic class. The list of titles"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "consist of the title column for each schedule table and the ObservableList data consists of the time slots allocated to each interviewee."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Step 4. ScheduleViewPanel will call the ScheduleView class to fill each table and populate each table with the data given by the Logic class."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Step 5. ScheduleView will have a .fxml file of a table and it will first be filled with the column titles, followed by the time slots and the"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "interviewee allocated to each time slots. The slot that has no interviewee will be displayed as \"0\"."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Step 6. Once the data is populated, the MainWindow will display the schedules of each day arranged in a table format."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Step 7. Once User imports a new .csv file, it will call the RefreshListener Interface. RefreshListenerManager will then take in the new titles and"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "list of ObservableList of interviewee."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Step 8. The RefreshListenerManager will call the MainWindow to refresh the ScheduleViewPanel."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Step 9. ScheduleViewPanel will firstly clear all the data and input the updated data from the .csv file."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "image::LogicClassDiagram1_2.png[]"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Users should be able to manually key in input (i.e add interviewers and interviewees). We therefore changed the Logic"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "package accordingly to suit our needs."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ".  `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeleteSequenceDiagram.png[]"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[]"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "* stores a list of `Schedule`. Each `Schedule` represents a schedule timetable."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "* exposes a list of `ObservableList\u003cObservableList\u003cString\u003e\u003e` that can be \u0027observed\u0027 by the UI. Each of the"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "  `ObservableList\u003cObservableList\u003cString\u003e\u003e` represents the data of a `Schedule` object."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "  The `ObservableList\u003cObservableList\u003cString\u003e\u003e` objects are bound to the UI so that the UI automatically updates  when the data of the `Schedule` objects changes."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "* exposes a list of `ObservableList\u003cInterviewee\u003e` that can be \u0027observed\u0027 by the UI."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "\u003d\u003d\u003d\u003d Schedule"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "The `Schedule` objects are filled up and created by the imported interviewer\u0027s availability. The inner data of a `Schedule` object is the same as the corresponding availability"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "table in the imported interviewer\u0027s availability. The data of the `Schedule` can be changed after running the scheduling algorithm."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[]"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the Address Book data in json format and read it back."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "\u003d\u003d\u003d Add Interviewee/Interviewer feature"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "The add command is facilitated by the `AddCommandParser` class. It extends `AddCommandParser` by allowing it to parse"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "prefixes specific to our Scheduler app, namely:"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "* r/ROLE"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "* f/FACULTY"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "* ep/PERSONAL_EMAIL and ew/NUS_WORK_EMAIL"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "* y/YEAR_OF_STUDY"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "* d/DEPARTMENT"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "* s/SLOT"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "This command also requires access to the Model package, where the AddressBook implementation lives, as well as the"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "Storage package, where the `JsonSerializableAddressBook` implementation lives. Consequently, the following json-friendly"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "classes were added:"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "* JsonAdaptedInterviewee, JsonAdaptedInterviewer, JsonAdaptedDepartment, JsonAdaptedSlot"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "The following *sequence diagram* describes how the add command works when adding an interviewee:"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "image::AddSequenceDiagram_1_2.png[]"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "The following activity diagram shows the steps needed to add a new interviewee:"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "image::AddActivityDiagram_1_2.png[]"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "\u003d\u003d\u003d [Coming soon in v1.3] Scheduling Algorithm"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "The scheduling of interviews is essentially a https://www.geeksforgeeks.org/maximum-bipartite-matching/[maximum bipartite matching problem]."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "The application is trying to find the **maximum number of matching** between available interview slots"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "and interviewees."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "In this application, the selected algorithm is https://www.geeksforgeeks.org/hopcroft-karp-algorithm-for-maximum-matching-set-1-introduction/[hopcroft-karp algorithm]."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "The complexity of the algorithm is o(√v x e), which is reasonably fast. The relevant details of the algorithm are as below:"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "**Vertex**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "**Edge**"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "**Matching Criteria** +"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "An interviewee matches an interview slot if **all** the criteria below are fulfilled:"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ". The timing of the slot matches one of the available timings of the interviewee."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ". The department of the time slot matches the department of choice of the interviewee."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "**Brief Explanation of the Algorithm** +"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Include an **activity diagram** here to summarise the algorithm."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "The proposed implementation of this algorithm is to encapsulate the logic of the algorithm into a `Command` class under"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "`Logic` component, possibly with the help of some auxiliary classes. The command is then invoked when the user key in the relevant"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "command keyword (refer user guide)."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "When the scheduling algorithm has finished running, it will update the data in the `Schedule` objects to reflect the"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "allocated time slots to the interviewees, which the changes will then be reflected automatically in the UI."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "mirozo"
        },
        "content": "\u003d\u003d\u003d Import"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "mirozo"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "mirozo"
        },
        "content": "The import feature uses `CsvReader` in the Model to read the given .csv file and stores the data into the model."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "mirozo"
        },
        "content": "* `import interviewer \u003ccsv file\u003e` stores the read data as a list of `Schedule` objects in the model."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "mirozo"
        },
        "content": "* `import interviewee \u003ccsv file\u003e` stores the read data as a list of `Interviewee` objects in the model."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "mirozo"
        },
        "content": "* `CsvReader` makes use of `BufferedReader` to read data from the given file."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "mirozo"
        },
        "content": "image::ImportSequenceDiagram.png[]"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "mirozo"
        },
        "content": "Given above is an example of a sequence diagram for importing interviewer\u0027s schedules. It applies to both importing interviewee\u0027s and interviewer\u0027s data."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "mirozo"
        },
        "content": "As seen in the above sequence diagram, the execution of the import feature consists of these steps:"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "mirozo"
        },
        "content": "* Step 1: `LogicManager` will start executing the command by parsing it over to `AddressBookParser`."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "mirozo"
        },
        "content": "* Step 2: `AddressBookParser` will then look and initialise an `ImportCommand` instance and return it to `LogicManager`."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "mirozo"
        },
        "content": "* Step 3: `LogicManager` will then call execute() on the returned `ImportCommand`  object."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "mirozo"
        },
        "content": "* Step 4: During the execute() method, the method will initialise a `CsvReader` object to `read()` data from the the given .csv file."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "mirozo"
        },
        "content": "* Step 5: The read data will then be stored as either `scheduleList` or `intervieweeList` in the model."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "mirozo"
        },
        "content": "image::ImportActivityDiagram.png[]"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "mirozo"
        },
        "content": "\u003d\u003d\u003d [Coming soon in v1.3] Export"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "mirozo"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation [Proposed]"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "mirozo"
        },
        "content": "The Export command gets the scheduled time slots from the Model and writes them in the specified .csv file."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "mirozo"
        },
        "content": "CsvWriter facilitates the writing to the specified file."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "mirozo"
        },
        "content": "* CsvWriter makes use of `BufferedWriter` to write data into the specified file."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "mirozo"
        },
        "content": "Below shows the sequence diagram of an example export command."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "mirozo"
        },
        "content": "image::ExportSequenceDiagram.png[]"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "mirozo"
        },
        "content": "The implementation is very similar to the Import feature. The only differences are in the Model where CsvWriter gets"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "mirozo"
        },
        "content": "the scheduled time slots from the Model and proceeds to write it into the specified file using a `BufferedWriter`."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "mirozo"
        },
        "content": "The Activity Diagram below summarises the execution of the export command."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "mirozo"
        },
        "content": "image::ExportActivityDiagram.png[]"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "\u003d\u003d\u003d [Coming soon in v1.3] Email"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "The Email feature makes use of the `java.awt.Desktop` package to activate the default Mail client of the user."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "* The `To:` field is automatically populated with all the emails that are tagged to a particular Interviewee."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "* The `Cc:` field is configurable by the user via an optional configuration file."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "* The subject and message body are also automatically populated with details that are relevant to the Interviewee, depending on the context of the command used."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "image::EmailSequenceDiagram.png[]"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Example: Interview timeslot"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "This is for sending the email to the Interviewee of his/her allocated interview timeslot. Details that vary according to the Interviewee include:"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "* Date and time of allocated timeslot"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "* Interviewer allocated"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "Additional details that can be configured by the user include:"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "* Location to report"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "* Dress code"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "* Any other additional information"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "The message content can also be configured by the user. However, a default template will be used when no such configuration file exists or is provided."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "mirozo"
        },
        "content": "[Implementation-Configuration]"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDocumentation#, here\u003e\u003e."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cTesting#, here\u003e\u003e."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDevOps#, here\u003e\u003e."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "mirozo"
        },
        "content": "* has a need to manage and schedule many interviews with multiple interviewers involved."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "mirozo"
        },
        "content": "*Value proposition*: manage the scheduling of interviews faster with CLI than mouse/GUI driven apps."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |new user |see usage instructions |refer to instructions when I forget how to use the App"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "mirozo"
        },
        "content": "|`* * *` |secretary of NUS CCA  |manually add new interviewees and their availabilities| make changes without having to edit the .csv file and doing another import."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "mirozo"
        },
        "content": "|`* * *` |secretary of NUS CCA  |delete an interview |remove interviews that have been taken out."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "mirozo"
        },
        "content": "|`* * *` |secretary of NUS CCA  |find a interviewee by name|locate details of person and their interview without having to go through the entire list"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "mirozo"
        },
        "content": "|`* * *` |secretary of NUS CCA |automate the process of scheduling interviews |lighten my workload"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "mirozo"
        },
        "content": "|`* * *` |secretary of NUS CCA |import the available timeslots of interviewees from a .csv template |schedule the interviews for them"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "mirozo"
        },
        "content": "|`* * *` |secretary of NUS CCA |export the scheduled interviews as a .csv file |I can view and manage them in Excel"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "mirozo"
        },
        "content": "|`* * *` |secretary of NUS CCA |add details of interviewee e.g. email/phone number |easily view the details of the interviewees"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "mirozo"
        },
        "content": "|`* * *` |secretary of NUS CCA |view a timetable of the finalized interview slots |show the interviewers which timeslots they will be taking at a glance"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "mirozo"
        },
        "content": "|`* * *` |secretary of NUS CCA |email blast the generated interview schedule to all interviewees |inform the interviewees of their interview"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "mirozo"
        },
        "content": "|`* * *` |secretary of NUS CCA |be informed if interview allocation of a certain interviewee has failed |manually fix conflicts or get the interviewee to give another available timeslot"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "mirozo"
        },
        "content": "|`* * *` |very busy secretary of NUS CCA |automate the process of scheduling interviews |lighten my workload"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "mirozo"
        },
        "content": "|`* * *` |forgetful secretary of NUS CCA |mark an interviewee as \u0027completed interview\u0027 |track and manage uncompleted interviews"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "mirozo"
        },
        "content": "|`* * *` |secretary of NUS CCA |add multiple tags to an interviewee in a single command |I can be efficient"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "mirozo"
        },
        "content": "|`* * *` |fast-typer |use CLI for the app instead of mouse/GUI |access the commands in the fastest possible way"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "mirozo"
        },
        "content": "|`* *` |developer |CLI and GUI to be separated |isolate either one for testing and debugging purposes"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "mirozo"
        },
        "content": "|`* *` |secretary of NUS CCA |track the attendance of my interviewees |"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "mirozo"
        },
        "content": "|`* *` |secretary of NUS CCA |rank my interviewees by potential |I would be able to evaluate them better"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "mirozo"
        },
        "content": "|`* *` |secretary of NUS CCA |be able to sort interviewees by ranking |I can easily record down the shortlisted ones"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "mirozo"
        },
        "content": "|`* *` |secretary of NUS CCA |schedule group interviews |I can use less manpower on days that I do not have enough interviewers"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "mirozo"
        },
        "content": "|`* *` |busy secretary of NUS CCA |share the current scheduled timeslots with another secretary |give them access to help with the scheduling of interviews as well"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "mirozo"
        },
        "content": "|`* *` |secretary of NUS CCA |email the interview results to interviewees |inform them of the outcomes of the interview"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "mirozo"
        },
        "content": "|`*` |secretary of NUS CCA |hide \u003c\u003cprivate-contact-detail,private contact details\u003e\u003e by default |minimize chance of someone else seeing them by accident"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "mirozo"
        },
        "content": "|`*` |secretary of NUS CCA with many interviewees |sort persons by name |locate an interviewee easily"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "mirozo"
        },
        "content": "(For all use cases below, the *System* is the `Scheduler` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "mirozo"
        },
        "content": "\u003d\u003d\u003d Use case: (UC-1) Delete interview slot"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "mirozo"
        },
        "content": "1.  User requests to list interview slots"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "mirozo"
        },
        "content": "2.  Scheduler shows a list interview slots"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "mirozo"
        },
        "content": "3.  User requests to delete a specific interview slot in the list"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "mirozo"
        },
        "content": "4.  Scheduler deletes the interview slot"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "mirozo"
        },
        "content": "** 3a1. Scheduler shows an error message."
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "mirozo"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "mirozo"
        },
        "content": "\u003d\u003d\u003d Use case: (UC-2) Import interviewee\u0027s time slots"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "mirozo"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "mirozo"
        },
        "content": "1.  User requests to import interviewee\u0027s time slots and specify file location"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "mirozo"
        },
        "content": "2.  Scheduler imports interviewee\u0027s time slots from specified file"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "mirozo"
        },
        "content": "+"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "mirozo"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "mirozo"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "mirozo"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "mirozo"
        },
        "content": "* 1a. Specified file doesn\u0027t exist"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "mirozo"
        },
        "content": "** 1a1. Scheduler shows error message"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "mirozo"
        },
        "content": "+"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "mirozo"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "mirozo"
        },
        "content": "* 1b. Specified file doesn\u0027t follow correct format"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "mirozo"
        },
        "content": "** 1b1. Scheduler shows error message"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "mirozo"
        },
        "content": "+"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "mirozo"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "mirozo"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "mirozo"
        },
        "content": "\u003d\u003d\u003d Use case: (UC-3) Import interviewer\u0027s time slots"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "mirozo"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "mirozo"
        },
        "content": "1.  User requests to import interviewer\u0027s time slots and specify file location"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "mirozo"
        },
        "content": "2.  Scheduler imports interviewer\u0027s time slots from specified file"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "mirozo"
        },
        "content": "+"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "mirozo"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "mirozo"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "mirozo"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "mirozo"
        },
        "content": "* 1a. Specified file doesn\u0027t exist"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "mirozo"
        },
        "content": "** 1a1. Scheduler shows error message"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "mirozo"
        },
        "content": "+"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "mirozo"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "mirozo"
        },
        "content": "* 1b. Specified file doesn\u0027t follow correct format"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "mirozo"
        },
        "content": "** 1b1. Scheduler shows error message"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "mirozo"
        },
        "content": "+"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "mirozo"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "mirozo"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "mirozo"
        },
        "content": "\u003d\u003d\u003d Use case: (UC-4) Schedule interview slots"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "mirozo"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "mirozo"
        },
        "content": "1. User __imports interviewee\u0027s availability (UC-2)__"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "mirozo"
        },
        "content": "2. User __imports interviewer\u0027s availability (UC-3)__"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "mirozo"
        },
        "content": "3.  User requests to generate timetable of all available interview time slots based on the availability of *interviewers*."
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "mirozo"
        },
        "content": "4.  Scheduler generates timetable"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "mirozo"
        },
        "content": "5.  User requests schedule interviewees based on the available timetable"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "mirozo"
        },
        "content": "6.  Scheduler allocates interviewees into the time slots in the generated timetable"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "mirozo"
        },
        "content": "+"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "mirozo"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "mirozo"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "mirozo"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "mirozo"
        },
        "content": "* 5a. Unable to fit all interviewees into timetable."
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "mirozo"
        },
        "content": "** 5a1. Scheduler shows an error message with the names of interviewees that are not allocated a slot."
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "mirozo"
        },
        "content": "+"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "mirozo"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ".  The software should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ".  Should be able to hold up to 1000 interviewers and interviewees without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ".  The software should be simple enough to use without much manual intervention by the user."
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ".  The software should respond to the user actions within 5 seconds."
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ".  The source code should be open-source."
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "[[availabilities]] Availabilities::"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "A list of date and times that either an interviewer or interviewee is available for an interview."
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "[[email-blast]] Email blast::"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "A process of sending an email to multiple recipients, which may or may not be tailored to the recipient."
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "[[interview]] Interview::"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "A particular time and date in which an interviewee meets an interviewer."
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "[[interviewee]] Interviewee::"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "A person that is attending an interview and is required to meet at least one interviewer."
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "[[interviewer]] Interviewer::"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "A person that is conducting interviews and is required to meet multiple interviewees."
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": "[[private-contact-detail]] Private contact detail::"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": "A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "[[secretary-of-NUS-CCA]] Secretary of NUS CCA::"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "A hypothetical person that refers to the user of the software and is tasked to assign interviewees to interviewers."
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "[[timeslot]] Timeslot::"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "A date and time in which either the interviewer or interviewee is available for an interview."
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": "*Product Name*"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": "Author: ..."
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a person"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": ". Deleting a person while all persons are listed"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": ".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 62,
      "mirozo": 153,
      "dcshzj": 47,
      "-": 345,
      "KendrickAng": 16
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "\u003d Scheduler - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level3"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "By: `Team AY1920S1-CS2103-F09-1`      Since: `Oct 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Scheduler is an app that can automate the scheduling of interviews for secretaries in NUS CCAs. It is optimised for"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "people who **prefer typing in a Command Line Interface (CLI)** to quickly access the functionalities of an app. +"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Click on \u003c\u003cQuick Start, Quick Start\u003e\u003e to get started!"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "This guide shows you how to import your interview schedules into Scheduler to begin managing your interview schedule."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "It also shows you basic tips on how to add or delete and edit interviewers/interviewees based on your changing needs."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "\u003d\u003d\u003d Import your csv file into the application `[Coming in v2.0]`"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "TIP: Converting your Excel file into .csv format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "1) Open Excel and click *File -\u003e Open*."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "image::quickstart/1_excel.png[width\u003d\"500\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "2) In the dialog box, find the Excel file on your computer and click *Open*."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "image::quickstart/2_excel.png[width\u003d\"500\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "3) On the Excel toolbar, select *File \u003e Save As*."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "image::quickstart/3_excel.png[width\u003d\"500\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "4) In the dialog box, type a new name for your file in the *File Name* field."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "5) In the \"Save as Type\" drop-down menu, scroll down to locate and select *CSV (comma delimited)*."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "image::quickstart/4_excel.png[width\u003d\"500\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "6) Click *Save*."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "image::quickstart/5_excel.png[width\u003d\"500\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user, e.g. in `add interviewee name:\"NAME\" slot:\"SLOT\"`,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "`NAME` and `slot` are parameters that need to be provided by the user, e.g. \"John Doe\" and \"20/09/2019 1800 - 20/09/2019 21:00\"."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "\u003d\u003d\u003d Viewing help"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "Shows helpful information on using this software."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "\u003d\u003d\u003d Importing existing availabilities `import`"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "\u003d\u003d\u003d\u003d Importing interviewers’ availability"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "Imports interviewers’ availability from a comma separated values (CSV) file. +"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "Format: `import interviewer PATH_TO_FILE` +"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    - PATH_TO_FILE is the absolute path to the file. +"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    - E.g C:\\\\Users\\Bob\\file.csv"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": " import interviewer C:\\Users\\johndoe\\Interviewers.csv"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "\u003d\u003d\u003d\u003d Importing interviewees’ availability"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "Imports interviewees’ availability from a comma separated values (CSV) file. +"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "Format: `import interviewee PATH_TO_FILE` +"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    - PATH_TO_FILE is the absolute path to the file. +"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    - E.g C:\\\\Users\\Bob\\file.csv"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": " import interviewer C:\\Users\\johndoe\\Interviewees.csv"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\u003d\u003d\u003d Add interviewers/interviewees `add`"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "Manually add a new interviewer to the database. +"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "Format: `add interviewer name:\"NAME\" slot:SLOT...` +"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " add interviewee name:\"John Doe\" slot:\"20/09/2019 18:00 - 20/09/2019 21:00\""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " add interviewee name:\"Mary Jane\" slot:\"20/09/2019 18:00 - 20/09/2019 19:00\" slot:\"20/09/2019 20:00 - 20/09/2019 21:00\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "Notes:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "- An interviewee can have multiple slots (given by multiple “slot:” arguments)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "- Slots should be given in the format: `DD/MM/YYYY HH:MM - DD/MM/YYYY HH:MM`, where the first date and time is the starting time and the second date and time is the ending time of availability."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "- The starting date should be a date and time that is earlier than the ending date"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "\u003d\u003d\u003d UI Display"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "\u003d\u003d\u003d\u003d Viewing Schedules"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "When the Scheduler starts, interview schedules will be displayed for you. The data will be displayed in a table format,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "with each table representing the schedule for each day. In the first column, the date of that interview schedule will be"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "displayed, the rest of the columns are the departments and the name of their respective person in charge. Subsequent rows"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "will be be displayed by showing the time slot first, with the person allocated to that time slot. If there are no interviewee"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "occupying that time slot, it will be displayed as \"0\"."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "A sample output of the Schedule UI is shown below:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "image::Ui/Schedule.png[width\u003d\"500\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "\u003d\u003d\u003d\u003d Viewing details of interviewees"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "You can to view the list of interviewees and the following information:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "1. Name"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "2. NUS Email"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "3. Personal Email"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "4. Mobile Number"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "5. Faculty/School"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "6. Academic Year"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "7. Choice of Department 1"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "8. Choice of Department 2"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "9. Preferred Time Slots"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "The interviewee list can be viewed by typing the following command +"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "Format: `display interviewees`"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "image::Ui/Interviewee.png[width\u003d\"500\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "In this screen, you can edit, add or delete interviewees accordingly by using the other features explained in"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "this User Guide."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "\u003d\u003d\u003d\u003d Differentiating the importance of timetable slots through colours `[Coming in v2.0]`"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "As you can see from the timetable above, there are 2 different colours of time slots. This is implemented so you"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "are able to differentiate which interviews are important by using the colour code as shown in the timetable."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "By default, the slots will be green in colour. However, you are able to change the colours based on importance using"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "the following command +"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "Format: `change DATE TIME IMPORTANCE`"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\u003d\u003d\u003d Get interview schedule `get` `[Coming in v2.0]`"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "Find an interviewer/interviewee and display his/her interview schedule. +"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "Format: `get NAME` +"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " get \"John Doe\""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "\u003d\u003d\u003d Changing availabilities `edit` `[Coming in v2.0]`"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "\u003d\u003d\u003d\u003d Changing availabilities of existing interviewer (interview slot)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "Change the specified interviewer from the database +"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "Format: `edit interviewer NAME`"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "\u003d\u003d\u003d\u003d Changing availabilities of existing interviewee"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "Change the specified interviewee from the database. +"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "Format: `edit interviewee NAME`"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\u003d\u003d\u003d Delete interviewer/interviewee `delete`"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\u003d\u003d\u003d\u003d Delete existing interviewer (interview slot)"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "Deletes the specified interviewer from the database +"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "Format: `delete interviewer NAME` +"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\u003d\u003d\u003d\u003d Delete existing interviewee"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "Deletes the specified interviewee from the database. +"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "Format: `delete interviewee NAME`"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "\u003d\u003d\u003d Tag interview slot `tag` `[Coming in v2.0]`"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "Tags an interview slot with a name. +"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "Format: `tag TAG_NAME` +"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "User will also be able to filter by tags. +"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "Format: `filter tag TAG_NAME` +"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "\u003d\u003d\u003d Scheduling `generate`"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "\u003d\u003d\u003d\u003d Generating timetable of all available time slots"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "Generate the timetable of all available interview time slots based on the availability of interviewers. +"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "Format: `generate timetable` +"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "\u003d\u003d\u003d\u003d Generating full interview schedule"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "Schedule and allocate interviewees to the available interview slots based on the availability of interviewees and"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "the timetable of all available interview time slots. +"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "Format: `generate schedule` +"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "**Note:** This command requires the timetable of all available time slots to be generated first!"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "mirozo"
        },
        "content": "\u003d\u003d\u003d Exporting of interview schedule `export`"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "mirozo"
        },
        "content": "Exports the allocated interview schedule timetable to a comma separated values (CSV) file. +"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "mirozo"
        },
        "content": "Format: `export` +"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "mirozo"
        },
        "content": "Note: This command requires the interview schedule to be generated first!"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "\u003d\u003d\u003d Sending of email `email`"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "\u003d\u003d\u003d\u003d Sending of interview time slot to interviewees"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "Sends an email containing the interviewee’s allocated interview time slot to every interviewee, including other details such as the interviewer, time, date and location."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "Format: `email timeslots`"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "**Note:** The email will only be sent if the interviewee’s email is present in the database and that the interview schedule has already been generated."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "\u003d\u003d\u003d\u003d Sending of interview results to interviewees `[Coming in v2.0]`"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "Sends an email containing the interviewee’s result/interview outcome and other details that you might want to include."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "Format: `email results`"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "**Note:** This email will only be sent if the interviewee’s email is present in the database and that the interview schedule has already been generated."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "\u003d\u003d\u003d\u003d Checking of email sending queue status `[Coming in v2.0]`"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "Checks the status of the mail sending queue."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "Format: `email status`"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "\u003d\u003d\u003d Recording of additional statuses: `record` `[Coming in v2.0]`"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "\u003d\u003d\u003d\u003d Recording of interviewee’s attendance"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Bring up the window to record the attendance of interviewees. You can navigate through the table in the window (GUI)"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "using the directions key to record the attendance of the interviewees. Hit Enter at the target cell to record the"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "attendance. +"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Format: `record attendance`"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "\u003d\u003d\u003d\u003d  Recording of interview result"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Bring up the window to record the interview result. The way to record the result is the same as 2.12.1. +"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Format: `record result`"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "\u003d\u003d\u003d\u003d Ranking of interviewees"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Bring up the window to rank the interviewees. The way to record the result is the same as 2.12.1. +"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Format: `record rank`"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ".Table Command Summary"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "|Command Description |Command Syntax"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "|Help"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "|`help` +"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "|Import existing availabilities"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "|`import interviewer PATH_TO_FILE` +"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "  `import interviewee PATH_TO_FILE`"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "|Add interviewers/interviewees"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "|`add interviewer name:\"NAME\" slot:SLOT...` +"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": " `add interviewee name:\"NAME\" slot:SLOT...`"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "|Display list of interviewers/interviewees"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "|`display interviewees`"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "|Get interview schedule for interviewer/interviewee"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "|`get NAME` +"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "|Edit availability of interveiwer/interviewee"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "|`edit interviewer NAME` +"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": " `edit interviewee NAME`"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "|Delete interviewer/interviewee"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "|`delete interviewer NAME` +"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": " `delete interviewee NAME`"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "|Tag interview slot"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "|`tag TAG_NAME` +"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "|Filter"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "|`filter tag TAG_NAME` +"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "|Schedule"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "|`generate timetable` +"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": " `generate schedule`"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "|Export"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "|`export` +"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "|Email blast"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "|`email timeslots` +"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": " `email results` +"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": " `email status` +"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "|Record"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "|`record attendance` +"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": " `record result` +"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": " `record rank` +"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "|\u003d\u003d\u003d"
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 55,
      "mrchensheng21": 81,
      "mirozo": 4,
      "dcshzj": 19,
      "-": 83,
      "KendrickAng": 45
    }
  },
  {
    "path": "docs/diagrams/AddActivityDiagram_1_2.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ":input add command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "while () is ([incorrect format])"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    :Show add command \\nformat response;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "endwhile ([valid syntax])"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ":Parse prefixes and retrieve arguments;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ":Create interviewee/interviewer based on \"role\" prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ":Add created person to model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ":Update storage to write to file;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "if () then ([successful])"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    :Display command result text to UI;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "else ([failure])"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    :Display error message to UI;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "endif"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "stop"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "KendrickAng": 22
    }
  },
  {
    "path": "docs/diagrams/AddSequenceDiagram_1_2.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "title Adding an Interviewee"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\u0027Logic"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "participant \":AddCommandParser\" as AddCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "participant \":AddCommand\" as AddCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "end box"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\u0027Model"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "participant \":ModelManager\" as ModelManager MODEL_COLOR"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "participant \":IntervieweeBuilder\" as IntervieweeBuilder MODEL_COLOR"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "end box"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\u0027Storage"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "box Storage STORAGE_COLOR_T1"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "participant \":StorageManager\" as StorageManager STORAGE_COLOR"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "end box"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\u0027calls and arrows. Each paragraph represents one arrow."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "[-\u003e LogicManager: execute(add)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "LogicManager -\u003e AddressBookParser: parseCommand(add)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "activate AddressBookParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "create AddCommandParser"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "AddressBookParser -\u003e AddCommandParser"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "activate AddCommandParser"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "AddCommandParser --\u003e AddressBookParser"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "deactivate AddCommandParser"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "AddressBookParser -\u003e AddCommandParser: parse(add)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "activate AddCommandParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "create IntervieweeBuilder"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "AddCommandParser -\u003e IntervieweeBuilder"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "activate IntervieweeBuilder"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "IntervieweeBuilder --\u003e AddCommandParser: interviewee"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "deactivate IntervieweeBuilder"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "create AddCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "AddCommandParser -\u003e AddCommand: AddCommand(interviewee)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "activate AddCommand"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "AddCommand --\u003e AddCommandParser: command"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "deactivate AddCommand"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "AddCommandParser --\u003e AddressBookParser: command"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "deactivate AddCommandParser"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "AddressBookParser --\u003e LogicManager: command"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "deactivate AddressBookParser"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "destroy AddCommandParser"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "LogicManager -\u003e AddCommand: execute(model)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "activate AddCommand"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "AddCommand -\u003e ModelManager"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "activate ModelManager"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "ModelManager --\u003e AddCommand"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "deactivate ModelManager"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "AddCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "CommandResult --\u003e AddCommand"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "AddCommand --\u003e LogicManager: commandResult"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "deactivate AddCommand"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "LogicManager -\u003e ModelManager: getAddressBook()"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "activate ModelManager"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "ModelManager --\u003e LogicManager: addressBook"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "deactivate ModelManager"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "destroy AddCommand"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "LogicManager -\u003e StorageManager: saveAddressBook(addressBook)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "activate StorageManager"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "StorageManager --\u003e LogicManager"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "deactivate StorageManager"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "[\u003c-- LogicManager"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "destroy CommandResult"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "KendrickAng": 99
    }
  },
  {
    "path": "docs/diagrams/EmailSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "participant \":EmailCommandParser\" as EmailCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "participant \"e:EmailCommand\" as EmailCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "box ParserUtil MODEL_COLOR_T2"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "participant \":ParserUtil\" as ParserUtil MODEL_COLOR"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "end box"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "box Interviewee MODEL_COLOR_T3"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "participant \":Interviewee\" as Interviewee MODEL_COLOR"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "end box"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "[-\u003e LogicManager : execute(\"email timeslot Alice\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "LogicManager -\u003e AddressBookParser : parseCommand(\"email timeslot Alice\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "activate AddressBookParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "create EmailCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "AddressBookParser -\u003e EmailCommandParser"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "activate EmailCommandParser"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "EmailCommandParser --\u003e AddressBookParser"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "deactivate EmailCommandParser"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "AddressBookParser -\u003e EmailCommandParser : parse(\"timeslot Alice\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "activate EmailCommandParser"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "EmailCommandParser -\u003e EmailCommandParser : parseTimeslotCommand(\"timeslot Alice\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "activate EmailCommandParser"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "EmailCommandParser -\u003e ParserUtil : \u003c\u003cstatic\u003e\u003e \\n parseName(\"Alice\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "activate ParserUtil"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "ParserUtil --\u003e EmailCommandParser : name"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "deactivate ParserUtil"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "create EmailCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "EmailCommandParser -\u003e EmailCommand : intervieweeName"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "activate EmailCommand"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "EmailCommand --\u003e EmailCommandParser : e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "deactivate EmailCommand"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "EmailCommandParser --\u003e EmailCommandParser : e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "deactivate EmailCommandParser"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "EmailCommandParser --\u003e AddressBookParser : e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "deactivate EmailCommandParser"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "EmailCommandParser -[hidden]-\u003e AddressBookParser"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "destroy EmailCommandParser"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "AddressBookParser --\u003e LogicManager : e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "deactivate AddressBookParser"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "LogicManager -\u003e EmailCommand : execute()"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "activate EmailCommand"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "EmailCommand -\u003e Model : getFilteredPersonList()"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "Model --\u003e EmailCommand : lastShownList"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "loop person in lastShownList"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    EmailCommand -\u003e Interviewee : getName()"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    activate Interviewee"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    Interviewee --\u003e EmailCommand : name"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    deactivate Interviewee"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    EmailCommand -\u003e Interviewee : name.equals(intervieweeName)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    activate Interviewee"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    Interviewee --\u003e EmailCommand : equality"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    deactivate Interviewee"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    break equality"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        EmailCommand --\u003e EmailCommand : intervieweeToEmail"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    end"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "end"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "EmailCommand -\u003e Model : emailInterviewee(intervieweeToEmail)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "Model --\u003e EmailCommand"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "EmailCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "CommandResult --\u003e EmailCommand"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "EmailCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "deactivate EmailCommand"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 113
    }
  },
  {
    "path": "docs/diagrams/ExportActivityDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mirozo"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mirozo"
        },
        "content": "scale 3/4"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mirozo"
        },
        "content": "start"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mirozo"
        },
        "content": ":User executes export command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mirozo"
        },
        "content": "\u0027Since the beta syntax does not support placing the condition outside the"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mirozo"
        },
        "content": "\u0027diamond we place it as the true branch instead."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mirozo"
        },
        "content": "if () then ([input file exists])"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    :Clear file;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mirozo"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    :Create new file;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mirozo"
        },
        "content": "endif"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mirozo"
        },
        "content": ":Get schedules from model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mirozo"
        },
        "content": "if () then ([data !\u003d null])"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    :Write to file;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mirozo"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mirozo"
        },
        "content": "endif"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mirozo"
        },
        "content": "stop"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mirozo"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "mirozo": 22
    }
  },
  {
    "path": "docs/diagrams/ExportSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mirozo"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mirozo"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mirozo"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mirozo"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mirozo"
        },
        "content": "participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mirozo"
        },
        "content": "participant \":ExportCommandParser\" as ExportCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mirozo"
        },
        "content": "participant \"e:ExportCommand\" as ExportCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mirozo"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mirozo"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mirozo"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mirozo"
        },
        "content": "participant \":CsvWriter\" as CsvWriter MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mirozo"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mirozo"
        },
        "content": "end box"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mirozo"
        },
        "content": "[-\u003e LogicManager : execute(\"export \u003c\u003ccsv filepath\u003e\u003e\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mirozo"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mirozo"
        },
        "content": "LogicManager -\u003e AddressBookParser : parseCommand(\"export \u003c\u003ccsv filepath\u003e\u003e\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mirozo"
        },
        "content": "activate AddressBookParser"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mirozo"
        },
        "content": "create ExportCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mirozo"
        },
        "content": "AddressBookParser -\u003e ExportCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mirozo"
        },
        "content": "activate ExportCommandParser"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mirozo"
        },
        "content": "ExportCommandParser --\u003e AddressBookParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mirozo"
        },
        "content": "deactivate ExportCommandParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mirozo"
        },
        "content": "AddressBookParser -\u003e ExportCommandParser : parse(\"\u003c\u003ccsv filepath\u003e\u003e\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mirozo"
        },
        "content": "activate ExportCommandParser"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mirozo"
        },
        "content": "create ExportCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mirozo"
        },
        "content": "ExportCommandParser -\u003e ExportCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mirozo"
        },
        "content": "activate ExportCommand"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mirozo"
        },
        "content": "ExportCommand --\u003e ExportCommandParser : e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mirozo"
        },
        "content": "deactivate ExportCommand"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mirozo"
        },
        "content": "ExportCommandParser --\u003e AddressBookParser : e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mirozo"
        },
        "content": "deactivate ExportCommandParser"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mirozo"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mirozo"
        },
        "content": "ExportCommandParser -[hidden]-\u003e AddressBookParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mirozo"
        },
        "content": "destroy ExportCommandParser"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mirozo"
        },
        "content": "AddressBookParser --\u003e LogicManager : e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mirozo"
        },
        "content": "deactivate AddressBookParser"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mirozo"
        },
        "content": "LogicManager -\u003e ExportCommand : execute()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mirozo"
        },
        "content": "activate ExportCommand"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mirozo"
        },
        "content": "create CsvWriter"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mirozo"
        },
        "content": "ExportCommand -\u003e CsvWriter"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mirozo"
        },
        "content": "activate CsvWriter"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mirozo"
        },
        "content": "CsvWriter -\u003e Model : getSchedules()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mirozo"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mirozo"
        },
        "content": "Model --\u003e CsvWriter : schedules"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mirozo"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mirozo"
        },
        "content": "CsvWriter --\u003e ExportCommand"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mirozo"
        },
        "content": "deactivate CsvWriter"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mirozo"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mirozo"
        },
        "content": "ExportCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mirozo"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mirozo"
        },
        "content": "CommandResult --\u003e ExportCommand"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mirozo"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mirozo"
        },
        "content": "ExportCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mirozo"
        },
        "content": "deactivate ExportCommand"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mirozo"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mirozo"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mirozo"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "mirozo": 77
    }
  },
  {
    "path": "docs/diagrams/ImportActivityDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mirozo"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mirozo"
        },
        "content": "scale 3/4"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mirozo"
        },
        "content": "start"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mirozo"
        },
        "content": ":User executes import command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mirozo"
        },
        "content": "if () then ([input file exists])"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    if () then ([is in correct format])"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        :Read data from specified file;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        :Update data in Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    else ([else])"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    endif"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mirozo"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mirozo"
        },
        "content": "endif"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mirozo"
        },
        "content": "stop"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mirozo"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "mirozo": 15
    }
  },
  {
    "path": "docs/diagrams/ImportSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mirozo"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mirozo"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mirozo"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mirozo"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mirozo"
        },
        "content": "participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mirozo"
        },
        "content": "participant \":ImportCommandParser\" as ImportCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mirozo"
        },
        "content": "participant \"i:ImportCommand\" as ImportCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mirozo"
        },
        "content": "participant \"result:CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mirozo"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mirozo"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mirozo"
        },
        "content": "participant \":CsvReader\" as CsvReader MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mirozo"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mirozo"
        },
        "content": "end box"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mirozo"
        },
        "content": "[-\u003e LogicManager : execute(\"import interviewer \u003c\u003ccsv filepath\u003e\u003e\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mirozo"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mirozo"
        },
        "content": "LogicManager -\u003e AddressBookParser : parseCommand(\"import interviewer \u003c\u003ccsv filepath\u003e\u003e\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mirozo"
        },
        "content": "activate AddressBookParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mirozo"
        },
        "content": "create ImportCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mirozo"
        },
        "content": "AddressBookParser -\u003e ImportCommandParser"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mirozo"
        },
        "content": "activate ImportCommandParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mirozo"
        },
        "content": "ImportCommandParser --\u003e AddressBookParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mirozo"
        },
        "content": "deactivate ImportCommandParser"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mirozo"
        },
        "content": "AddressBookParser -\u003e ImportCommandParser : parse(\"interviewer \u003c\u003ccsv filepath\u003e\u003e\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mirozo"
        },
        "content": "activate ImportCommandParser"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mirozo"
        },
        "content": "create ImportCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mirozo"
        },
        "content": "ImportCommandParser -\u003e ImportCommand"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mirozo"
        },
        "content": "activate ImportCommand"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mirozo"
        },
        "content": "ImportCommand --\u003e ImportCommandParser : i"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mirozo"
        },
        "content": "deactivate ImportCommand"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mirozo"
        },
        "content": "ImportCommandParser --\u003e AddressBookParser : i"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mirozo"
        },
        "content": "deactivate ImportCommandParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mirozo"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mirozo"
        },
        "content": "ImportCommandParser -[hidden]-\u003e AddressBookParser"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mirozo"
        },
        "content": "destroy ImportCommandParser"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mirozo"
        },
        "content": "AddressBookParser --\u003e LogicManager : i"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mirozo"
        },
        "content": "deactivate AddressBookParser"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mirozo"
        },
        "content": "LogicManager -\u003e ImportCommand : execute()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mirozo"
        },
        "content": "activate ImportCommand"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mirozo"
        },
        "content": "create CsvReader"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mirozo"
        },
        "content": "ImportCommand -\u003e CsvReader : read()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mirozo"
        },
        "content": "activate CsvReader"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mirozo"
        },
        "content": "CsvReader --\u003e ImportCommand : schedules"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mirozo"
        },
        "content": "deactivate CsvReader"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mirozo"
        },
        "content": "ImportCommand -\u003e Model : setScheduleList(schedules)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mirozo"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mirozo"
        },
        "content": "Model --\u003e ImportCommand"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mirozo"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mirozo"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mirozo"
        },
        "content": "ImportCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mirozo"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mirozo"
        },
        "content": "CommandResult --\u003e ImportCommand : result"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mirozo"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mirozo"
        },
        "content": "ImportCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mirozo"
        },
        "content": "deactivate ImportCommand"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mirozo"
        },
        "content": "ImportCommand -[hidden]-\u003e LogicManager : result"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mirozo"
        },
        "content": "destroy ImportCommand"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mirozo"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mirozo"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mirozo"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "mirozo": 81
    }
  },
  {
    "path": "docs/diagrams/LogicClassDiagram1_2.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "skinparam arrowColor LOGIC_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "skinparam classBackgroundColor LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\u0027hacky workaround to allow arrow going into Logic pkg"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\u0027classes and interfaces used in Logic"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "package Logic {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    Interface Logic \u003c\u003cinterface\u003e\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    Class LogicManager"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    package Parser {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Interface Parser \u003c\u003cinterface\u003e\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Class AddressBookParser"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Class XYZCommandParser"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Class CliSyntax"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Class ParserUtil"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Class ArgumentMultimap"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Class ArgumentTokenizer"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Class Prefix"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        package \"exceptions (Parser)\" {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            Class ParseException"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    package Commands {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Class XYZCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Class CommandResult"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Class \"{abstract}\\nCommand\" as Command"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        package \"exceptions (Commands)\" {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            Class CommandException"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "package Model {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\u0027mapping and arrows"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "HiddenOutside .down.\u003e Logic"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\u0027mapping and arrows for Parser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "LogicManager .up.|\u003e Logic"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "LogicManager -down-\u003e AddressBookParser"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "AddressBookParser .down.\u003e XYZCommandParser: creates \u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "XYZCommandParser .right.\u003e ParseException"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "XYZCommandParser -up-|\u003e Parser"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "XYZCommandParser .down.\u003e ArgumentMultimap"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "XYZCommandParser .down.\u003e ArgumentTokenizer"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "XYZCommandParser .down.\u003e CliSyntax"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "XYZCommandParser .down.\u003e ParserUtil"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "ArgumentTokenizer .left.\u003e ArgumentMultimap"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "ArgumentTokenizer .down.\u003e Prefix"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "CliSyntax .down.\u003e Prefix"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "ParserUtil .down.\u003e Prefix"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "note left of XYZCommandParser: XYZ can be Add, Edit, Email, Find or Import"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\u0027mapping and arrows for Commands"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "Logic .down.\u003e CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "LogicManager .down.\u003eCommandResult: executes \u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "Command .up.\u003e CommandResult"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "XYZCommand -up-|\u003e Command"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "XYZCommand .right.\u003e CommandException: throws \u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "CommandResult ..\u003e Model"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "note right of XYZCommand: XYZ can be Import, Email, Add, Edit, Delete, Find, List, Exit or Help"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\u0027mapping and arrows from Parser to Commands"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "XYZCommandParser ..\u003e XYZCommand: creates \u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "KendrickAng": 70
    }
  },
  {
    "path": "docs/diagrams/ModelClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Package Model \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Model \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Interface ObservableList \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Class Schedule"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class Model"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class ModelManager"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class UserPrefs"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Package Person {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Class Interviewee"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "Class Address"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Class Emails"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "Class Name"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Class Phone"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Class Faculty"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Class YearOfStudy"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Class Department"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Class Slot"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Package Tag {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "Class Tag"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Model"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager .up.|\u003e Model"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "Model .right.\u003e ObservableList"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "ModelManager o--\u003e \"*\" Interviewee"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager o-left-\u003e \"1\" UserPrefs"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "ModelManager o-right-\u003e \"1..*\" Schedule"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "UserPrefs .up.|\u003e ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Interviewee *---\u003e Name"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Interviewee *---\u003e Phone"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Interviewee *---\u003e Emails"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Interviewee *---\u003e Address"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Interviewee *---\u003e \"*\" Tag"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Interviewee *---\u003e Faculty"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Interviewee *---\u003e YearOfStudy"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Interviewee *---\u003e \"*\" Department"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Interviewee *---\u003e \"*\" Slot"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Name -[hidden]right-\u003e Phone"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "Phone -[hidden]right-\u003e Address"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Address -[hidden]right-\u003e Emails"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 19,
      "-": 39
    }
  },
  {
    "path": "docs/diagrams/UiClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor UI_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "package UI \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Ui \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "Interface RefreshListener \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"{abstract}\\nUiPart\" as UiPart"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "Class RefreshListenerManager"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class UiManager"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class MainWindow"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class HelpWindow"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class ResultDisplay"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "Class ScheduleViewPanel"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "Class ScheduleView"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "Class StatusBarFooter"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommandBox"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenLogic #FFFFFF"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Ui"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "HiddenOutside ..\u003e RefreshListener"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "RefreshListenerManager .right.|\u003e RefreshListener"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager .left.|\u003e Ui"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "UiManager -down---\u003e MainWindow"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow --\u003e HelpWindow"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e CommandBox"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e ResultDisplay"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "MainWindow *-down-\u003e ScheduleViewPanel"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e StatusBarFooter"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "RefreshListenerManager *-down--\u003e ScheduleViewPanel"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -left-|\u003e UiPart"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "ResultDisplay --|\u003e UiPart"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox --|\u003e UiPart"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "ScheduleView --|\u003e UiPart"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "ScheduleViewPanel --|\u003e UiPart"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "StatusBarFooter --|\u003e UiPart"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "HelpWindow -down-|\u003e UiPart"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -right-\u003e Logic"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -left-\u003e Logic"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "RefreshListenerManager -\u003e Logic"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "ScheduleViewPanel-[hidden]left- HelpWindow"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "HelpWindow -[hidden]left- CommandBox"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox -[hidden]left- ResultDisplay"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "ResultDisplay -[hidden]left- StatusBarFooter"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -[hidden]-|\u003e UiPart"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "mrchensheng21": 13,
      "-": 45
    }
  },
  {
    "path": "docs/team/Ang-Wei-Heng-Kendrick.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "\u003d Ang Wei Heng Kendrick - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "\u003d\u003d PROJECT: Scheduler"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Scheduler is a desktop application which is used to automate the process of scheduling interviews."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Its main feature is matching interviewees with interview time slots to generate an interview timetable."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "* *Major enhancement*:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "** What it does:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "** Justification:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "** Highlights:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "** Credits:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "* *Minor enhancement*:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "*** Managed releases"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "include::"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "include::"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 55
    }
  },
  {
    "path": "docs/team/Goh-Rui-Zhi.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "\u003d Goh Rui Zhi - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d PROJECT: AddressBook - Level 3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddelete]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 1,
      "-": 71
    }
  },
  {
    "path": "docs/team/Hsu-Zhong-Jun.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "\u003d Hsu Zhong Jun - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "\u003d\u003d PROJECT: Scheduler"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Scheduler is a desktop application which is used to automate the process of scheduling interviews."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Its main feature is matching interviewees with interview time slots to generate an interview timetable."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "* *Major enhancement*:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "** What it does:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "** Justification:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "** Highlights:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "** Credits:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "* *Minor enhancement*:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "*** Managed releases"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "include::"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "include::"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 55
    }
  },
  {
    "path": "docs/team/Kheng-Yau-Dong.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "\u003d Kheng Yau Dong - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "\u003d\u003d PROJECT: Scheduler"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Scheduler is a desktop application which is used to automate the process of scheduling interviews."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Its main feature is matching interviewees with interview time slots to generate an interview timetable."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "* *Major enhancement*:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "** What it does:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "** Justification:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "** Highlights:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "** Credits:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "* *Minor enhancement*:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "*** Managed releases"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "include::"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "include::"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 55
    }
  },
  {
    "path": "docs/team/Kwan-Chen-Sheng.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "\u003d Kwan Chen Sheng - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "\u003d\u003d PROJECT: Scheduler"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Scheduler is a desktop application which is used to automate the process of scheduling interviews."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Its main feature is matching interviewees with interview time slots to generate an interview timetable."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "* *Major enhancement*:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "** What it does:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "** Justification:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "** Highlights:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "** Credits:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "* *Minor enhancement*:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "*** Managed releases"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "include::"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "include::"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.address.model.IntervieweeList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.address.model.InterviewerList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.address.model.ReadOnlyIntervieweeList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.address.model.ReadOnlyInterviewerList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "import seedu.address.model.Schedule;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.address.storage.IntervieweeListStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.address.storage.InterviewerListStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.address.storage.JsonIntervieweeListStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.address.storage.JsonInterviewerListStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 2, 1, true);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing Scheduler ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        IntervieweeListStorage intervieweeListStorage \u003d new JsonIntervieweeListStorage("
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                userPrefs.getIntervieweeListFilePath());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        InterviewerListStorage interviewerListStorage \u003d new JsonInterviewerListStorage("
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                userPrefs.getInterviewerListFilePath());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        storage \u003d new StorageManager(intervieweeListStorage, interviewerListStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        Optional\u003cReadOnlyIntervieweeList\u003e intervieweeListOptional;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        Optional\u003cReadOnlyInterviewerList\u003e interviewerListOptional;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        ReadOnlyIntervieweeList initialIntervieweeList;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        ReadOnlyInterviewerList initialInterviewerList;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            intervieweeListOptional \u003d storage.readIntervieweeList();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            if (!intervieweeListOptional.isPresent()) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                logger.info(\"Interviewee data file not found, will be starting with a sample list of \""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                        + \"Interviewees\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            initialIntervieweeList \u003d intervieweeListOptional.orElseGet(SampleDataUtil::getSampleIntervieweeList);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            logger.warning(\"Interviewee data file not in the correct format. Will be starting with an \""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                    + \"empty list of Interviewees\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            initialIntervieweeList \u003d new IntervieweeList();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            logger.warning(\"Problem while reading from the Interviewee data file. Will be starting with \""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                    + \"an empty list of Interviewees\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            initialIntervieweeList \u003d new IntervieweeList();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            interviewerListOptional \u003d storage.readInterviewerList();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            if (!interviewerListOptional.isPresent()) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                logger.info(\"Interviewer data file not found, will be starting with a sample list of \""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                        + \"Interviewers\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            initialInterviewerList \u003d interviewerListOptional.orElseGet(SampleDataUtil::getSampleInterviewerList);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            logger.warning(\"Interviewer data file not in the correct format. Will be starting with an \""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                    + \"empty list of Interviewers\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            initialInterviewerList \u003d new InterviewerList();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            logger.warning(\"Problem while reading from the Interviewer data file. Will be starting with \""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                    + \"an empty list of Interviewers\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            initialInterviewerList \u003d new InterviewerList();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        // For now ModelManager is always initialised with sample schedulesList first"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        List\u003cSchedule\u003e schedules \u003d SampleDataUtil.getSampleSchedulesList();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        return new ModelManager(initialIntervieweeList, initialInterviewerList, userPrefs, schedules);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty list of \""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                    + \"Interviewees and Interviewers\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        logger.info(\"Starting Scheduler \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Scheduler ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mrchensheng21": 4,
      "ChrisKheng": 4,
      "dcshzj": 53,
      "-": 162
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/LogsCenter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private static final String LOG_FILE \u003d \"scheduler.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 1,
      "-": 111
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_NAME \u003d \"The person name provided does not exist\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 1,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/Pair.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": " * Encapsulates a pair, with a head and a tail."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": " * @param \u003cH\u003e head of the pair."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": " * @param \u003cT\u003e tail of the pair."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "public class Pair\u003cH, T\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private H head;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private T tail;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public Pair(H head, T tail) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        this.head \u003d head;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        this.tail \u003d tail;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public H getHead() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return head;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public T getTail() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return tail;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return String.format(\"(%s, %s)\", head, tail);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.address.model.ReadOnlyIntervieweeList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.address.model.ReadOnlyInterviewerList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import seedu.address.model.Schedule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.address.model.person.Interviewee;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.address.model.person.Interviewer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    /* TODO: REMOVE THE FOLLOWING LINES AFTER THEIR USAGE IS REMOVED */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    /* TODO: REMOVE ABOVE LINES */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * Returns the list of Interviewees."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * @see seedu.address.model.Model#getInterviewees()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    List\u003cInterviewee\u003e getInterviewees();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * Returns the list of Interviewers."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * @see seedu.address.model.Model#getInterviewers()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    List\u003cInterviewer\u003e getInterviewers();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * Returns the IntervieweeList."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    ReadOnlyIntervieweeList getIntervieweeList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * Returns the InterviewerList."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    ReadOnlyInterviewerList getInterviewerList();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * Returns an unmodifiable view of the list of Interviewees."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * @see seedu.address.model.Model#getIntervieweeList()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    ObservableList\u003cInterviewee\u003e getObservableIntervieweeList();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * Returns an unmodifiable view of the list of Interviewers."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * @see seedu.address.model.Model#getInterviewerList()"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    ObservableList\u003cInterviewer\u003e getObservableInterviewerList();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * Returns the user prefs\u0027 file path to the list of Interviewees."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    Path getIntervieweeListFilePath();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * Returns the user prefs\u0027 file path to the list of Interviewers."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    Path getInterviewerListFilePath();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Returns the list of Schedules."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @see seedu.address.model.Model#getSchedulesList()"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    List\u003cSchedule\u003e getSchedulesList();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /** Returns a list of @code{ObservableList} objects, each representing a Schedule table*/"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    List\u003cObservableList\u003cObservableList\u003cString\u003e\u003e\u003e getObservableLists();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /** Returns a list of lists of column titles, each list of column titles belong to a Schedule table*/"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    List\u003cList\u003cString\u003e\u003e getTitlesLists();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 14,
      "dcshzj": 43,
      "-": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.AddressBookParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.address.model.ReadOnlyIntervieweeList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.address.model.ReadOnlyInterviewerList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import seedu.address.model.Schedule;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.address.model.person.Interviewee;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.address.model.person.Interviewer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser addressBookParser;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookParser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    /* TODO: REMOVE THE FOLLOWING LINES AFTER THEIR USAGE IS REMOVED */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        return this.model.getIntervieweeListFilePath();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    /* TODO: REMOVE ABOVE LINES */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            storage.saveIntervieweeList(model.getIntervieweeList());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            storage.saveInterviewerList(model.getInterviewerList());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public List\u003cInterviewee\u003e getInterviewees() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        return model.getInterviewees();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public List\u003cInterviewer\u003e getInterviewers() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        return model.getInterviewers();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public ReadOnlyIntervieweeList getIntervieweeList() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        return model.getIntervieweeList();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public ReadOnlyInterviewerList getInterviewerList() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        return model.getInterviewerList();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public ObservableList\u003cInterviewee\u003e getObservableIntervieweeList() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        return model.getObservableIntervieweeList();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public ObservableList\u003cInterviewer\u003e getObservableInterviewerList() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        return model.getObservableInterviewerList();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public Path getIntervieweeListFilePath() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        return model.getIntervieweeListFilePath();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public Path getInterviewerListFilePath() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        return model.getInterviewerListFilePath();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public List\u003cSchedule\u003e getSchedulesList() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return model.getSchedulesList();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public List\u003cObservableList\u003cObservableList\u003cString\u003e\u003e\u003e getObservableLists() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return model.getObservableLists();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public List\u003cList\u003cString\u003e\u003e getTitlesLists() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return model.getTitlesLists();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 15,
      "dcshzj": 44,
      "-": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DEPARTMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FACULTY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NUS_WORK_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PERSONAL_EMAIL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ROLE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SLOT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_YEAR_OF_STUDY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.address.model.person.DefaultValues.DEFAULT_DEPARTMENT;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.address.model.person.DefaultValues.DEFAULT_FACULTY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.address.model.person.DefaultValues.DEFAULT_INTERVIEWEE_ROLE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.address.model.person.DefaultValues.DEFAULT_NAME;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.address.model.person.DefaultValues.DEFAULT_NUS_WORK_EMAIL;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.address.model.person.DefaultValues.DEFAULT_PERSONAL_EMAIL;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.address.model.person.DefaultValues.DEFAULT_PHONE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.address.model.person.DefaultValues.DEFAULT_SLOT;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.address.model.person.DefaultValues.DEFAULT_YEAR_OF_STUDY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the address book. \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            + PREFIX_ROLE + \"ROLE \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]... \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            + \"[\" + PREFIX_FACULTY + \"FACULTY] \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            + \"[\" + PREFIX_YEAR_OF_STUDY + \"YEAR OF STUDY] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            + \"[\" + PREFIX_DEPARTMENT + \"DEPARTMENT]... \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            + \"[\" + PREFIX_SLOT + \"TIMESLOTS]... \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            + \"[\" + PREFIX_PERSONAL_EMAIL + \"PERSONAL_EMAIL] \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            + \"[\" + PREFIX_NUS_WORK_EMAIL + \"NUS_WORK_EMAIL]\\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            + \"Example: \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            + PREFIX_ROLE + DEFAULT_INTERVIEWEE_ROLE + \" \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            + PREFIX_NAME + DEFAULT_NAME + \" \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            + PREFIX_PHONE + DEFAULT_PHONE + \" \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"friends \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            + PREFIX_TAG + \"owesMoney \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            + PREFIX_FACULTY + DEFAULT_FACULTY + \" \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            + PREFIX_YEAR_OF_STUDY + DEFAULT_YEAR_OF_STUDY + \" \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            + PREFIX_DEPARTMENT + DEFAULT_DEPARTMENT + \" \""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            + PREFIX_SLOT + DEFAULT_SLOT + \" \""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            + PREFIX_PERSONAL_EMAIL + DEFAULT_PERSONAL_EMAIL + \" \""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            + PREFIX_NUS_WORK_EMAIL + DEFAULT_NUS_WORK_EMAIL;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Person toAdd;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand(Person person) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d person;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        if (model.hasPerson(toAdd)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // TODO: eventually phase this out to addInterviewee / addInterviewer"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        model.addPerson(toAdd);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 56,
      "KendrickAng": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Clears the address book."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"List of Interviewees and Interviewers has been cleared!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        model.setIntervieweeList(List.of());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        model.setInterviewerList(List.of());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 5,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the displayed person list. \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private final EditPersonDescriptor editPersonDescriptor;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param editPersonDescriptor details to edit the person with"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editPersonDescriptor);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return new Person(updatedName, updatedPhone, updatedTags);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class EditPersonDescriptor {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor() {}"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, tags);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!(other instanceof EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 192,
      "KendrickAng": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EmailCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.address.model.person.Interviewee;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dcshzj"
        },
        "content": " * Handles the sending of emails to interviewers/interviewees based on the email addresses associated with"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dcshzj"
        },
        "content": " * the object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dcshzj"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "public class EmailCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"email\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public static final String TIMESLOT_COMMAND_WORD \u003d \"timeslot\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Handles the sending of emails to \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            + \"interviewers/interviewees using their email addresses.\\n\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            + COMMAND_WORD + \" \" + TIMESLOT_COMMAND_WORD + \" \u003cinterviewee-name\u003e [email-address-type]\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            + \"Sends an email containing the interviewee\u0027s allocated interview time slot to the specified \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            + \"interviewee, including other details such as the interviewer, time, date and location.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d \"Email command not implemented yet\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public static final String MESSAGE_EMAIL_INTERVIEWEE_SUCCESS \u003d \"Emailed interviewee: %1$s\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    private final Name intervieweeName;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * Constructor for the EmailCommand class where no email type is specified."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * @param intervieweeName The name of the {@code Interviewee}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public EmailCommand(Name intervieweeName) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        this.intervieweeName \u003d intervieweeName;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        List\u003cInterviewee\u003e intervieweeList \u003d model.getInterviewees();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        // Interviewee intervieweeToEmail \u003d new Interviewee.IntervieweeBuilder(lastShownList.get(1)).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        Interviewee intervieweeToEmail \u003d null;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        for (Interviewee interviewee : intervieweeList) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            if (interviewee.getName().equals(this.intervieweeName)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                intervieweeToEmail \u003d interviewee;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        if (intervieweeToEmail \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_NAME);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        // TODO: Implement email feature"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            model.emailInterviewee(intervieweeToEmail);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            // Happens when the mail client cannot be launched, should prompt the user to open a URL instead"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_IMPLEMENTED_YET);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EMAIL_INTERVIEWEE_SUCCESS, intervieweeToEmail));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                || (other instanceof EmailCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                \u0026\u0026 intervieweeName.equals(((EmailCommand) other).intervieweeName)); // state check"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 76
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ImportCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mirozo"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import seedu.address.model.Schedule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import seedu.address.model.util.CsvReader;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mirozo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mirozo"
        },
        "content": " * Import csv file containing interviewer\u0027s/ interviewers\u0027s information."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mirozo"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mirozo"
        },
        "content": "public class ImportCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"import\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Import .csv file containing \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            + \"interviewer or interviewee\u0027s information.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" interviewer \" + \"\u003ccsvFilePath\u003e\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    public static final String SUCCESS_MESSAGE \u003d \"Data imported successfully.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d \"Command not implemented yet\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    public static final String INCORRECT_FORMAT \u003d \"Data is in incorrect format. Please refer to the \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            + \"User Guide for the supported format\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    public static final String FILE_DOES_NOT_EXIST \u003d \"Target file does not exist. Please ensure that \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            + \"the file path is correct.\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    private String type;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    public ImportCommand(String args) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        String[] strings \u003d args.split(\" \");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        this.type \u003d strings[0];"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        this.filePath \u003d strings[1];"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            if (this.type.equals(\"interviewer\")) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                ArrayList\u003cSchedule\u003e schedules;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                CsvReader csvReader \u003d new CsvReader(filePath);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                schedules \u003d csvReader.read();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                model.setSchedulesList(schedules);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                return new CommandResult(SUCCESS_MESSAGE, false, false);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            } else if (this.type.equals(\"interviewee\")) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                return new CommandResult(MESSAGE_NOT_IMPLEMENTED_YET, false, false);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                throw new CommandException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        } catch (FileNotFoundException fileE) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            throw new CommandException(FILE_DOES_NOT_EXIST, fileE);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            throw new CommandException(\"Failed\", ioe);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException arrayE) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            throw new CommandException(INCORRECT_FORMAT, arrayE);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mirozo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mirozo": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DEPARTMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FACULTY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NUS_WORK_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PERSONAL_EMAIL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ROLE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SLOT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_YEAR_OF_STUDY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import seedu.address.model.person.Department;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import seedu.address.model.person.Emails;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import seedu.address.model.person.Faculty;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import seedu.address.model.person.Interviewee;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import seedu.address.model.person.Interviewer;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import seedu.address.model.person.Role;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import seedu.address.model.person.RoleType;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import seedu.address.model.person.Slot;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_ROLE, PREFIX_NAME, PREFIX_PHONE, PREFIX_TAG,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                        PREFIX_FACULTY, PREFIX_YEAR_OF_STUDY, PREFIX_DEPARTMENT, PREFIX_SLOT, PREFIX_PERSONAL_EMAIL,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                        PREFIX_NUS_WORK_EMAIL);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // common prefixes - present across interviewers and interviewees"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_ROLE, PREFIX_NAME, PREFIX_PHONE, PREFIX_DEPARTMENT)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Role role \u003d ParserUtil.parseRole(argMultimap.getValue(PREFIX_ROLE).get());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        List\u003cDepartment\u003e departmentChoices \u003d ParserUtil.parseDepartments(argMultimap.getAllValues(PREFIX_DEPARTMENT));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        List\u003cSlot\u003e availableTimeslots \u003d ParserUtil.parseSlots(argMultimap.getAllValues(PREFIX_SLOT));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // may not be present, depending on role type being added."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Optional\u003cString\u003e facultyString \u003d argMultimap.getValue(PREFIX_FACULTY);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Optional\u003cString\u003e yearOfStudyString \u003d argMultimap.getValue(PREFIX_YEAR_OF_STUDY);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Optional\u003cString\u003e personalEmailString \u003d argMultimap.getValue(PREFIX_PERSONAL_EMAIL);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Optional\u003cString\u003e nusWorkEmailString \u003d argMultimap.getValue(PREFIX_NUS_WORK_EMAIL);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Person person \u003d null;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        if (role.getRole() \u003d\u003d RoleType.INTERVIEWEE) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            Faculty faculty \u003d ParserUtil.parseFaculty(facultyString.get());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            Integer yearOfStudy \u003d ParserUtil.parseYearOfStudy(yearOfStudyString.get());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            Email personalEmail \u003d ParserUtil.parseEmail(personalEmailString.get());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            Email nusWorkEmail \u003d ParserUtil.parseEmail(nusWorkEmailString.get());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            Emails emails \u003d new Emails().addPersonalEmail(personalEmail).addNusEmail(nusWorkEmail);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            person \u003d new Interviewee.IntervieweeBuilder(name, phone, tagList)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                    .faculty(faculty)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                    .yearOfStudy(yearOfStudy)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                    .departmentChoices(departmentChoices)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                    .availableTimeslots(availableTimeslots)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                    .emails(emails)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                    .build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        if (role.getRole() \u003d\u003d RoleType.INTERVIEWER) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            Department department \u003d departmentChoices.get(0); // interviewer has one department"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            Email personalEmail \u003d ParserUtil.parseEmail(personalEmailString.get());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            person \u003d new Interviewer.InterviewerBuilder(name, phone, tagList)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                    .department(department)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                    .email(personalEmail)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                    .availabilities(availableTimeslots)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                    .build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return new AddCommand(person);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 52,
      "KendrickAng": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.address.logic.commands.EmailCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import seedu.address.logic.commands.ImportCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        case ImportCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            return new ImportCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        case EmailCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            return new EmailCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mirozo": 4,
      "dcshzj": 4,
      "-": 75
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final Prefix PREFIX_ROLE \u003d new Prefix(\"r/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final Prefix PREFIX_FACULTY \u003d new Prefix(\"f/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final Prefix PREFIX_YEAR_OF_STUDY \u003d new Prefix(\"y/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final Prefix PREFIX_DEPARTMENT \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final Prefix PREFIX_SLOT \u003d new Prefix(\"s/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    // TODO: email prefix"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final Prefix PREFIX_PERSONAL_EMAIL \u003d new Prefix(\"ep/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final Prefix PREFIX_NUS_WORK_EMAIL \u003d new Prefix(\"ew/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 12,
      "KendrickAng": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_TAG);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!editPersonDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return new EditCommand(index, editPersonDescriptor);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 73,
      "KendrickAng": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EmailCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.address.logic.commands.EmailCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dcshzj"
        },
        "content": " * Parses input arguments and creates a new EmailCommand object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dcshzj"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "public class EmailCommandParser implements Parser\u003cEmailCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EmailCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * and returns an EmailCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public EmailCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        String[] splitArgs \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        if (trimmedArgs.isEmpty() || splitArgs.length \u003c 2) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, EmailCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        boolean isTimeslotCommand \u003d splitArgs[0].equals(EmailCommand.TIMESLOT_COMMAND_WORD);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        if (isTimeslotCommand) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            return parseTimeslotCommand(trimmedArgs);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, EmailCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * Handles the \"timeslot\" sub-command in the context of the EmailCommand and returns"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * an EmailCommand object for execution"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * @param args The arguments of the command provided by the user"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public EmailCommand parseTimeslotCommand(String args) throws ParseException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        String nameArg \u003d args.substring(9).trim();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        Name name;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        if (nameArg.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, EmailCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            name \u003d ParserUtil.parseName(nameArg);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, EmailCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        return new EmailCommand(name);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ImportCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mirozo"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import seedu.address.logic.commands.ImportCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mirozo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mirozo"
        },
        "content": " * Parser class for ImportCommand."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mirozo"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mirozo"
        },
        "content": "public class ImportCommandParser implements Parser\u003cImportCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ImportCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     * and returns a ImportCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    public ImportCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ImportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        String[] strings \u003d trimmedArgs.split(\" \");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        if (strings.length !\u003d 2) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ImportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        return new ImportCommand(trimmedArgs);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mirozo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mirozo": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import seedu.address.model.person.Department;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import seedu.address.model.person.Faculty;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import seedu.address.model.person.Role;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import seedu.address.model.person.Slot;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Parses a {@code String} role into a {@code Role}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static Role parseRole(String role) throws ParseException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        requireNonNull(role);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        String trimmedRole \u003d role.trim();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        if (!Role.isValidRole(trimmedRole)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            throw new ParseException(Role.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return new Role(trimmedRole);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Parses a {@code String faculty} into a {@code Faculty}."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @throws ParseException if the given {@code faculty} is invalid."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static Faculty parseFaculty(String faculty) throws ParseException {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        requireNonNull(faculty);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        String trimmedFaculty \u003d faculty.trim();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        if (!Faculty.isValidFaculty(trimmedFaculty)) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            throw new ParseException(Faculty.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return new Faculty(trimmedFaculty);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Parses a {@code String yearOfStudy} into a {@code Integer}."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @throws ParseException if the given {@code yearOfStudy} is invalid."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static Integer parseYearOfStudy(String yearOfStudy) throws ParseException {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        requireNonNull(yearOfStudy);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        String trimmedYearOfStudy \u003d yearOfStudy.trim();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Integer value;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            value \u003d Integer.valueOf(trimmedYearOfStudy);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            throw new ParseException(e.getMessage());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // TODO: This could lead to some unexcepted error messages. maybe make a class for year of study?"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Parses a {@code String department} into a {@code Department}."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @throws ParseException if the given {@code department} is invalid."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static Department parseDepartment(String department) throws ParseException {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        requireNonNull(department);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        String trimmedDepartment \u003d department.trim();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        if (!Department.isValidDepartment(trimmedDepartment)) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            throw new ParseException(Department.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return new Department(trimmedDepartment);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e departments} into a {@code List\u003cDepartment\u003e}."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static List\u003cDepartment\u003e parseDepartments(Collection\u003cString\u003e departments) throws ParseException {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        requireNonNull(departments);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        final List\u003cDepartment\u003e departmentList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        for (String d: departments) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            departmentList.add(parseDepartment(d));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return departmentList;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Parses a {@code String slot} into a {@code Slot}."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @throws ParseException if the given {@code slot} is invalid."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static Slot parseSlot(String slot) throws ParseException {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        requireNonNull(slot);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        String trimmedSlot \u003d slot.trim();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        if (!Slot.isValidSlot(trimmedSlot)) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            throw new ParseException(Slot.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        return Slot.fromString(trimmedSlot);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e slots} into a {@code List\u003cSlot\u003e}."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static List\u003cSlot\u003e parseSlots(Collection\u003cString\u003e slots) throws ParseException {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        requireNonNull(slots);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        final List\u003cSlot\u003e slotList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        for (String s: slots) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            slotList.add(parseSlot(s));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return slotList;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 1,
      "-": 108,
      "KendrickAng": 109
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Column.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": " * Encapsulates a column in the schedule timetable."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "public class Column {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return 0;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    // Change this to return Interviewee"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public Person getInterviewer() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return new Person(new Name(\"John Doe\"), new Phone(\"12345678\"), new HashSet\u003c\u003e());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    // Change this to return Interivewee instead later"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public Person getInterviewee(int index) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return new Person(new Name(\"John Doe\"), new Phone(\"12345678\"), new HashSet\u003c\u003e());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    // Change this to return Interivewee instead later"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public Person getInterviewee(String timing) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return new Person(new Name(\"John Doe\"), new Phone(\"12345678\"), new HashSet\u003c\u003e());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 29,
      "KendrickAng": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/IntervieweeList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.address.model.person.Interviewee;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dcshzj"
        },
        "content": " * Wraps all Interviewee data at the IntervieweeList level"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dcshzj"
        },
        "content": " * Duplicates are not allowed"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dcshzj"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "public class IntervieweeList implements ReadOnlyIntervieweeList {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    private final UniquePersonList\u003cInterviewee\u003e interviewees;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public IntervieweeList() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        this.interviewees \u003d new UniquePersonList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * Creates an IntervieweeList using the Interviewee list in the {@code toBeCopied}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public IntervieweeList(ReadOnlyIntervieweeList toBeCopied) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        this.resetData(toBeCopied);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * Replaces the contents of the interviewee list with {@code interviewees}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * {@code interviewees} must not contain duplicate interviewees."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public void setInterviewees(List\u003cInterviewee\u003e interviewees) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        this.interviewees.setPersons(interviewees);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * Resets the existing data of this {@code IntervieweeList} with {@code newData}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public void resetData(ReadOnlyIntervieweeList newData) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        this.setInterviewees(newData.getIntervieweeList());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * Returns true if an Interviewee with the same identity as {@code interviewee} exists in the database."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public boolean hasInterviewee(Interviewee interviewee) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        requireNonNull(interviewee);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        return this.interviewees.contains(interviewee);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * Adds an Interviewee to the database."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * The Interviewer must not already exist in the database."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public void addInterviewee(Interviewee interviewee) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        this.interviewees.add(interviewee);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * Returns an Interviewee from the database given the name."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public Interviewee getInterviewee(String name) throws NoSuchElementException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        return this.interviewees.asUnmodifiableObservableList().stream()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                .filter((x) -\u003e x.getName().equals(name))"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                .findAny()"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                .get();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * Replaces the given Interviewee {@code target} in the list with {@code editedInterviewee}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * {@code target} must exist in the database."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * The Interviewee identity of {@code editedInterviewee} must not be the same as another existing"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * Interviewee in the address book."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public void setInterviewee(Interviewee target, Interviewee editedInterviewee) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        requireNonNull(editedInterviewee);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        this.interviewees.setPerson(target, editedInterviewee);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * Removes {@code key} from this {@code IntervieweeList}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * {@code key} must exist in the database."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public void removeInterviewee(Interviewee key) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        this.interviewees.remove(key);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        return this.getIntervieweeList().size() + \" interviewees\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public ObservableList\u003cInterviewee\u003e getIntervieweeList() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        return this.interviewees.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                || (other instanceof IntervieweeList // instanceof handles nulls"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                \u0026\u0026 this.interviewees.equals(((IntervieweeList) other).interviewees));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        return this.interviewees.hashCode();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 117
    }
  },
  {
    "path": "src/main/java/seedu/address/model/InterviewerList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.address.model.person.Interviewer;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dcshzj"
        },
        "content": " * Wraps all Interviewer data at the InterviewerList level"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dcshzj"
        },
        "content": " * Duplicates are not allowed"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dcshzj"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "public class InterviewerList implements ReadOnlyInterviewerList {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    private final UniquePersonList\u003cInterviewer\u003e interviewers;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public InterviewerList() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        this.interviewers \u003d new UniquePersonList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * Creates an InterviewerList using the Interviewer list in the {@code toBeCopied}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public InterviewerList(ReadOnlyInterviewerList toBeCopied) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        this.resetData(toBeCopied);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * Replaces the contents of the interviewer list with {@code interviewers}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * {@code interviewers} must not contain duplicate interviewers."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public void setInterviewers(List\u003cInterviewer\u003e interviewers) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        this.interviewers.setPersons(interviewers);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * Resets the existing data of this {@code InterviewerList} with {@code newData}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public void resetData(ReadOnlyInterviewerList newData) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        this.setInterviewers(newData.getInterviewerList());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * Returns true if an Interviewer with the same identity as {@code interviewer} exists in the database."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public boolean hasInterviewer(Interviewer interviewer) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        requireNonNull(interviewer);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        return this.interviewers.contains(interviewer);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * Adds an Interviewer to the database."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * The Interviewer must not already exist in the database."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public void addInterviewer(Interviewer interviewer) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        this.interviewers.add(interviewer);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * Returns an Interviewer from the database given the name."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public Interviewer getInterviewer(String name) throws NoSuchElementException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        return this.interviewers.asUnmodifiableObservableList().stream()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                .filter((x) -\u003e x.getName().equals(name))"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                .findAny()"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                .get();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * Replaces the given Interviewer {@code target} in the list with {@code editedInterviewer}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * {@code target} must exist in the database."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * The Interviewer identity of {@code editedInterviewer} must not be the same as another existing"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * Interviewer in the address book."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public void setInterviewer(Interviewer target, Interviewer editedInterviewer) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        requireNonNull(editedInterviewer);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        this.interviewers.setPerson(target, editedInterviewer);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * Removes {@code key} from this {@code InterviewerList}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * {@code key} must exist in the database."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public void removeInterviewer(Interviewer key) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        this.interviewers.remove(key);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        return this.getInterviewerList().size() + \" interviewers\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public ObservableList\u003cInterviewer\u003e getInterviewerList() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        return this.interviewers.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                || (other instanceof InterviewerList // instanceof handles nulls"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                \u0026\u0026 this.interviewers.equals(((InterviewerList) other).interviewers));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        return this.interviewers.hashCode();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 117
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.address.model.person.Interviewee;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import seedu.address.model.person.Interviewer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import seedu.address.model.person.Slot;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    /* TODO: REMOVE THE FOLLOWING LINES AFTER THEIR USAGE IS REMOVED */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    boolean hasPerson(Person person);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    void deletePerson(Person person);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    void addPerson(Person person);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    Person getPerson(String name) throws NoSuchElementException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    void setPerson(Person target, Person editedPerson);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    /* TODO: REMOVE ABOVE LINES */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * Returns the user prefs\u0027 file path to the list of Interviewees."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    Path getIntervieweeListFilePath();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * Sets the user prefs\u0027 file path to the list of Interviewees."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    void setIntervieweeListFilePath(Path intervieweeListFilePath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * Returns the user prefs\u0027 file path to the list of Interviewers."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    Path getInterviewerListFilePath();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * Sets the user prefs\u0027 file path to the list of Interviewers."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    void setInterviewerListFilePath(Path interviewerListFilePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * Emails the given Interviewee."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * The Interviewee must exist in the database."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    void emailInterviewee(Interviewee interviewee) throws IOException;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d SchedulesList \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * Replaces schedule data with the data in {@code schedule}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    void setSchedulesList(List\u003cSchedule\u003e schedulesList);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /** Returns the schedulesList **/"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    List\u003cSchedule\u003e getSchedulesList();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Returns a list of observable list of the schedules."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    List\u003cObservableList\u003cObservableList\u003cString\u003e\u003e\u003e getObservableLists();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /** Returns a list of lists of column titles, each list of column titles belong to a Schedule table*/"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    List\u003cList\u003cString\u003e\u003e getTitlesLists();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * Returns the interview slot assigned to the interviewee with the {@code intervieweeName}."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    List\u003cSlot\u003e getInterviewSlots(String intervieweeName);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * Returns the date of the schedule in which the interviewer exists in, otherwise return empty string."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    String getInterviewerSchedule(Interviewer interviewer);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * Adds an interviewer to one of the schedules if the interviewer\u0027s availability fall within those"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * schedules and returns true. Otherwise, the method will not add the interviewer and return false."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    void addInterviewerSchedule(Interviewer interviewer);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d IntervieweeList \u0026 InterviewerList \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * Replaces the list of IntervieweeList data with the data in {@code interviewees}"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    void setIntervieweeList(List\u003cInterviewee\u003e interviewees);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * Replaces the list of Interviewers data with the data in {@code interviewers}"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    void setInterviewerList(List\u003cInterviewer\u003e interviewers);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * Returns a list of IntervieweeList."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    List\u003cInterviewee\u003e getInterviewees();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * Returns a list of Interviewers."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    List\u003cInterviewer\u003e getInterviewers();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * Returns an Interviewee given the name."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * The Interviewee must exist in the database."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * @param name The name of the Interviewee"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * @throws NoSuchElementException If the Interviewee does not exist in the database."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    Interviewee getInterviewee(String name) throws NoSuchElementException;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * Replaces the given Interviewee {@code target} with {@code editedInterviewee}"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * {@code target} must exist in the database."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * The Interviewee identity of {@code editedInterviewee} must not be the same as another existing"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * Interviewee in the database."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    void setInterviewee(Interviewee target, Interviewee editedInterviewee);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * Returns an Interviewer given the name."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * The Interviewer must exist in the database."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * @param name The name of the Interviewer"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * @throws NoSuchElementException if the Interviewer does not exist in the database."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    Interviewer getInterviewer(String name) throws NoSuchElementException;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * Replaces the given Interviewer {@code target} with {@code editedInterviewer}"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * {@code target} must exist in the database."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * The Interviewer identity of {@code editedInterviewer} must not be the same as another existing"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * Interviewer in the database."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    void setInterviewer(Interviewer target, Interviewer editedInterviewer);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * Returns true if an Interviewee with the same identity as {@code interviewee} exists in the database."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    boolean hasInterviewee(Interviewee interviewee);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * Returns true if an Interviewer with the same identity as {@code interviewer} exists in the database."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    boolean hasInterviewer(Interviewer interviewer);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * Deletes the given Interviewee."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * The Interviewee must exist in the database."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    void deleteInterviewee(Interviewee target);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * Deletes the given Interviewer."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * The Interviewer must exist in the database."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    void deleteInterviewer(Interviewer target);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * Adds the given Interviewee."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * {@code interviewee} must not already exist in the database."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    void addInterviewee(Interviewee interviewee);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * Adds the given Interviewer."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * {@code interviewer} must not already exist in the database."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    void addInterviewer(Interviewer interviewer);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * Returns the IntervieweeList."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    ReadOnlyIntervieweeList getIntervieweeList();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * Returns the InterviewerList."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    ReadOnlyInterviewerList getInterviewerList();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * Returns an unmodifiable view of the Interviewee list."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    ObservableList\u003cInterviewee\u003e getObservableIntervieweeList();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * Returns an unmodifiable view of the Interviewer list."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    ObservableList\u003cInterviewer\u003e getObservableInterviewerList();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 17,
      "mirozo": 1,
      "dcshzj": 124,
      "-": 86
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import java.awt.Desktop;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import java.net.URI;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import java.net.URLEncoder;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.address.model.person.Interviewee;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import seedu.address.model.person.Interviewer;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import seedu.address.model.person.Slot;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": " * Represents the in-memory model of the schedule table data."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public static final Schedule EMPTY_SCHEDULE \u003d new Schedule(\"\", new LinkedList\u003c\u003e());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    private final IntervieweeList intervieweeList;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    private final InterviewerList interviewerList;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private final List\u003cSchedule\u003e schedulesList;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * Initializes a ModelManager with the given intervieweeList, interviewerList, userPrefs and schedulesList."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public ModelManager(ReadOnlyIntervieweeList intervieweeList, ReadOnlyInterviewerList interviewerList,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                        ReadOnlyUserPrefs userPrefs, List\u003cSchedule\u003e schedulesList) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        requireAllNonNull(intervieweeList, interviewerList, userPrefs, schedulesList);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        logger.fine(\"Initialising with list of interviewees: \" + intervieweeList"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                + \", list of interviewers: \" + interviewerList"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                + \", user prefs: \" + userPrefs"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                + \" and schedules list: \" + schedulesList"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        );"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        this.intervieweeList \u003d new IntervieweeList(intervieweeList);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        this.interviewerList \u003d new InterviewerList(interviewerList);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        this.schedulesList \u003d cloneSchedulesList(schedulesList);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        this(new IntervieweeList(), new InterviewerList(), new UserPrefs(), new LinkedList\u003c\u003e());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    /* TODO: REMOVE THE FOLLOWING LINES AFTER THEIR USAGE IS REMOVED */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public void deletePerson(Person person) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public Person getPerson(String name) throws NoSuchElementException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    /* TODO: REMOVE ABOVE LINES */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public Path getIntervieweeListFilePath() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        return userPrefs.getIntervieweeListFilePath();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public void setIntervieweeListFilePath(Path intervieweeListFilePath) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        requireNonNull(intervieweeListFilePath);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        userPrefs.setIntervieweeListFilePath(intervieweeListFilePath);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public Path getInterviewerListFilePath() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        return userPrefs.getInterviewerListFilePath();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public void setInterviewerListFilePath(Path interviewerListFilePath) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        requireNonNull(interviewerListFilePath);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        userPrefs.setInterviewerListFilePath(interviewerListFilePath);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public void emailInterviewee(Interviewee interviewee) throws IOException {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        Desktop desktop \u003d Desktop.getDesktop();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        String intervieweeEmails \u003d interviewee.getEmails().getAllEmails().values().stream()"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                .map((x) -\u003e {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                    StringBuilder output \u003d new StringBuilder();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                    for (int i \u003d 0; i \u003c x.size(); i++) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                        output.append(x.get(i));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                        output.append(\"; \");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                    if (output.length() !\u003d 0) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                        output.delete(output.length() - 2, output.length());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                    return output.toString();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                })"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                .reduce((x, y) -\u003e x + \"; \" + y).get();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        String sb \u003d \"mailto:\""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                + URLEncoder.encode(intervieweeEmails,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                java.nio.charset.StandardCharsets.UTF_8.toString()).replace(\"+\", \"%20\")"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                + \"?cc\u003d\" + \"copied@example.com\" + \"\u0026subject\u003d\""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                + URLEncoder.encode(\"This is a test subject\","
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                java.nio.charset.StandardCharsets.UTF_8.toString()).replace(\"+\", \"%20\")"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                + \"\u0026body\u003d\""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                + URLEncoder.encode(intervieweeEmails,"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                java.nio.charset.StandardCharsets.UTF_8.toString()).replace(\"+\", \"%20\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        URI uri \u003d URI.create(sb);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        desktop.mail(uri);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Schedule \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Replaces schedule data with the data in {@code schedule}."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     * @param list"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    public void setSchedulesList(List\u003cSchedule\u003e list) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        schedulesList.clear();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        schedulesList.addAll(cloneSchedulesList(list));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        logger.fine(\"Schedules list is reset\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /** Returns the schedulesList **/"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public List\u003cSchedule\u003e getSchedulesList() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return schedulesList;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Returns a list of observable list of the schedules."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public List\u003cObservableList\u003cObservableList\u003cString\u003e\u003e\u003e getObservableLists() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        List\u003cObservableList\u003cObservableList\u003cString\u003e\u003e\u003e observableLists \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        for (Schedule schedule : schedulesList) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            observableLists.add(schedule.getObservableList());"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return observableLists;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /** Returns a list of lists of column titles, each list of column titles belong to a Schedule table*/"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public List\u003cList\u003cString\u003e\u003e getTitlesLists() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        List\u003cList\u003cString\u003e\u003e titlesLists \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        for (Schedule schedule : schedulesList) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            titlesLists.add(schedule.getTitles());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return titlesLists;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Returns a list of interview slots assigned to the interviewee with the {@code intervieweeName}."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public List\u003cSlot\u003e getInterviewSlots(String intervieweeName) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        List\u003cSlot\u003e slots \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        for (Schedule schedule : schedulesList) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            slots.addAll(schedule.getInterviewSlots(intervieweeName));"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return slots;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Returns the date of the first schedule in which the interviewer exists in, otherwise return empty string."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public String getInterviewerSchedule(Interviewer interviewer) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        String date \u003d \"\";"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        for (Schedule schedule : schedulesList) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            if (schedule.hasInterviewer(interviewer)) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                date \u003d schedule.getDate();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Adds the given interviewer to schedule(s) in which the interviewer\u0027s availability fall."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * If the interviewer\u0027s availability does not fall within any of the schedule, then the interviewer will not"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * be added into any of the schedule."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public void addInterviewerSchedule(Interviewer interviewer) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        for (Schedule schedule : schedulesList) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            schedule.addInterviewer(interviewer);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Returns the deep copy of the schedules list given."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @param list the list of schedules to be copied."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @return the deep copy of the schedules list given."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private static List\u003cSchedule\u003e cloneSchedulesList(List\u003cSchedule\u003e list) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        List\u003cSchedule\u003e listClone \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        for (Schedule schedule : list) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            listClone.add(Schedule.cloneSchedule(schedule));"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return listClone;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     * Returns the deep copy of the interviewee\u0027s list given."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     * @param list the list of interviewees to be copied."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     * @return a deep copy of interviewee\u0027s list."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    private static List\u003cInterviewee\u003e cloneIntervieweesList(List\u003cInterviewee\u003e list) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        List\u003cInterviewee\u003e listClone \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        for (Interviewee interviewee : list) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            listClone.add(interviewee);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        return listClone;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d IntervieweeList \u0026 InterviewerList \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public void setIntervieweeList(List\u003cInterviewee\u003e interviewees) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        logger.fine(\"Updating list of interviewees: \" + interviewees);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        this.intervieweeList.setInterviewees(interviewees);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public void setInterviewerList(List\u003cInterviewer\u003e interviewers) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        logger.fine(\"Updating list of interviewers: \" + interviewers);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        this.interviewerList.setInterviewers(interviewers);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public List\u003cInterviewee\u003e getInterviewees() {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        return this.intervieweeList.getIntervieweeList();"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public List\u003cInterviewer\u003e getInterviewers() {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        return this.interviewerList.getInterviewerList();"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public Interviewee getInterviewee(String intervieweeName) throws NoSuchElementException {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        return this.intervieweeList.getInterviewee(intervieweeName);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public void setInterviewee(Interviewee target, Interviewee editedInterviewee) {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        requireAllNonNull(target, editedInterviewee);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        this.intervieweeList.setInterviewee(target, editedInterviewee);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public Interviewer getInterviewer(String interviewerName) throws NoSuchElementException {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        return this.interviewerList.getInterviewer(interviewerName);"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public void setInterviewer(Interviewer target, Interviewer editedInterviewer) {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        requireAllNonNull(target, editedInterviewer);"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        this.interviewerList.setInterviewer(target, editedInterviewer);"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public boolean hasInterviewee(Interviewee interviewee) {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        return this.intervieweeList.hasInterviewee(interviewee);"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public boolean hasInterviewer(Interviewer interviewer) {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        return this.interviewerList.hasInterviewer(interviewer);"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public void deleteInterviewee(Interviewee target) {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        this.intervieweeList.removeInterviewee(target);"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public void deleteInterviewer(Interviewer target) {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        this.interviewerList.removeInterviewer(target);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public void addInterviewee(Interviewee interviewee) {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        this.intervieweeList.addInterviewee(interviewee);"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public void addInterviewer(Interviewer interviewer) {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        this.interviewerList.addInterviewer(interviewer);"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public ReadOnlyIntervieweeList getIntervieweeList() {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        return this.intervieweeList;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public ReadOnlyInterviewerList getInterviewerList() {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        return this.interviewerList;"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public ObservableList\u003cInterviewee\u003e getObservableIntervieweeList() {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        return this.intervieweeList.getIntervieweeList();"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public ObservableList\u003cInterviewer\u003e getObservableInterviewerList() {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        return this.interviewerList.getInterviewerList();"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        return this.intervieweeList.equals(other.intervieweeList)"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                \u0026\u0026 this.interviewerList.equals(other.interviewerList)"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                \u0026\u0026 this.userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                \u0026\u0026 this.schedulesList.equals(other.schedulesList);"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 82,
      "mirozo": 14,
      "dcshzj": 165,
      "-": 130,
      "KendrickAng": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyIntervieweeList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.address.model.person.Interviewee;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dcshzj"
        },
        "content": " * Unmodifiable view of an list of IntervieweeList"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dcshzj"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "public interface ReadOnlyIntervieweeList {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * Returns an unmodifiable view of the Interviewee list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * This list will not contain any duplicate IntervieweeList."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    ObservableList\u003cInterviewee\u003e getIntervieweeList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyInterviewerList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.address.model.person.Interviewer;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dcshzj"
        },
        "content": " * Unmodifiable view of an list of Interviewers"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dcshzj"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "public interface ReadOnlyInterviewerList {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * Returns an unmodifiable view of the Interviewer list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * This list will not contain any duplicate Interviewers."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    ObservableList\u003cInterviewer\u003e getInterviewerList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyUserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    Path getIntervieweeListFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    Path getInterviewerListFilePath();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 3,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Row.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": " * Encapsulates a row in the schedule timetable."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "public class Row {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private String timing;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return 0;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public String getTiming() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return timing;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    // Change this to return Interivewee instead later"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public Person getInterviewee(int index) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return new Person(new Name(\"John Doe\"), new Phone(\"12345678\"), new HashSet\u003c\u003e());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 26,
      "KendrickAng": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Schedule.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import seedu.address.model.person.Interviewer;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import seedu.address.model.person.Slot;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": " * Represents the interview schedule."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": " * The first row of the Schedule is the column titles, with the first cell as the date of the interview schedule."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": " * Subsequent rows are time slots, with the first cell of each row as the timing of all the time slots in the row."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "public class Schedule {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private String date;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private ObservableList\u003cString\u003e titles;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private ObservableList\u003cObservableList\u003cString\u003e\u003e data; // EXCLUDE the first row which is the column titles"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public Schedule(String date, LinkedList\u003cLinkedList\u003cString\u003e\u003e list) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        ObservableList\u003cObservableList\u003cString\u003e\u003e table \u003d toTwoDimensionalObservableList(list);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        if (table.isEmpty()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            this.titles \u003d FXCollections.observableList(new LinkedList\u003c\u003e());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            this.titles \u003d table.remove(0);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        this.data \u003d table;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private Schedule() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public String getDate() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public ObservableList\u003cString\u003e getTitles() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return titles;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public ObservableList\u003cObservableList\u003cString\u003e\u003e getObservableList() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return data;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public List\u003cSlot\u003e getInterviewSlots(String intervieweeName) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        List\u003cSlot\u003e slots \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        int tableSize \u003d data.size();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        // Need to search the first row as well because now the first row of data(table) is not the titles,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        // it is data."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        for (int i \u003d 0; i \u003c tableSize; i++) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            ObservableList\u003cString\u003e row \u003d data.get(i);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            int rowSize \u003d row.size();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            // Exclude search in the first cell as the first cell is the time slot"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            for (int j \u003d 1; j \u003c rowSize; j++) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                String value \u003d row.get(j);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                if (\"NA\".equals(value)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                } else if (intervieweeName.equals(value)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                    String timeSlot \u003d row.get(0);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                    String[] times \u003d timeSlot.split(\"-\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                    String start \u003d times[0].trim();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                    String end \u003d times[1].trim();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                    slots.add(new Slot(date, start, end));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return slots;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Returns true if an interviewer exists in the Schedule."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public boolean hasInterviewer(Interviewer interviewer) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        String columnTitle \u003d generateColumnTitle(interviewer);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        boolean found \u003d false;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        for (String title : titles) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            if (title.equals(columnTitle)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                found \u003d true;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return found;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Returns the corresponding column title of the given interviewer."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public String generateColumnTitle(Interviewer interviewer) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return String.format(\"%s - %s\", interviewer.getDepartment().toString(),"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            interviewer.getName().toString());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Adds the interviewer and his availabilities into this table."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * The interviewer will not be added if none of the his availabilities fall in the table."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public boolean addInterviewer(Interviewer interviewer) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        String columnTitle \u003d generateColumnTitle(interviewer);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        List\u003cString\u003e availabilities \u003d interviewer.getAvailabilities()"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                    .stream()"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                    .map(Slot::toString)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                    .collect(Collectors.toList());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        boolean added \u003d false;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        int currRowIndex \u003d 0;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        for (String availability : availabilities) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            if (currRowIndex \u003e data.size()) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            List\u003cString\u003e dateAndTime \u003d getDateAndTime(availability);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            String date \u003d dateAndTime.get(0);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            String time \u003d dateAndTime.get(1);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            if (!this.date.equals(date)) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            // Iterate through the table rows"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            int i;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            int tableSize \u003d data.size();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            for (i \u003d currRowIndex; i \u003c tableSize; i++) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                ObservableList\u003cString\u003e currRow \u003d data.get(i);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                String currRowTime \u003d currRow.get(0);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                if (!currRowTime.equals(time)) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                    currRow.add(\"1\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                    added \u003d true;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            currRowIndex \u003d i;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        if (added) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            int initialRowSize \u003d titles.size();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            titles.add(columnTitle);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            // Add 0 to other rows to ensure that the table rows size are correct"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            for (int i \u003d 0; i \u003c data.size(); i++) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                ObservableList\u003cString\u003e currRow \u003d data.get(i);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                if (currRow.size() \u003d\u003d initialRowSize) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                    currRow.add(\"0\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    // DD/MM/YYYY HH:MM - HH:MM (No trailing whitespace!)"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    // e.g. 9/10/2019 18:00 - 18:30"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private List\u003cString\u003e getDateAndTime(String dateTimeString) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        String date \u003d dateTimeString.split(\" \")[0];"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        int firstWhiteSpaceIndex \u003d dateTimeString.indexOf(\" \");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        String time \u003d dateTimeString.substring(firstWhiteSpaceIndex + 1).trim();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        List\u003cString\u003e dateAndTime \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        dateAndTime.add(date);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        dateAndTime.add(time);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return dateAndTime;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public boolean equals(Object s) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        if (!(s instanceof Schedule)) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Schedule sCasted \u003d (Schedule) s;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return date.equals(sCasted.date)"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            \u0026\u0026 titles.equals(sCasted.titles)"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            \u0026\u0026 data.equals(sCasted.data);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Returns a copy of the @code{Schedule} object given."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public static Schedule cloneSchedule(Schedule schedule) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Schedule clone \u003d new Schedule();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        clone.date \u003d String.valueOf(schedule.date);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        clone.titles \u003d cloneRow(schedule.titles);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        clone.data \u003d cloneTable(schedule.data);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return clone;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Returns an independent deep copy of the table given in observable list form."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private static ObservableList\u003cObservableList\u003cString\u003e\u003e cloneTable(ObservableList\u003cObservableList\u003cString\u003e\u003e table) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        ObservableList\u003cObservableList\u003cString\u003e\u003e tableClone \u003d FXCollections.observableList(new LinkedList\u003c\u003e());"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        for (ObservableList\u003cString\u003e row : table) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            ObservableList\u003cString\u003e rowClone \u003d cloneRow(row);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            tableClone.add(rowClone);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return tableClone;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Returns an independent deep copy of the row given in observable list form."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private static ObservableList\u003cString\u003e cloneRow(ObservableList\u003cString\u003e row) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        ObservableList\u003cString\u003e rowClone \u003d FXCollections.observableList(new LinkedList\u003c\u003e());"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        for (String string : row) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            rowClone.add(String.valueOf(string));"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return rowClone;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Convert a two-dimensional LinkedList into a two-dimensional Observable list."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public static ObservableList\u003cObservableList\u003cString\u003e\u003e toTwoDimensionalObservableList("
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        LinkedList\u003cLinkedList\u003cString\u003e\u003e list) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        LinkedList\u003cObservableList\u003cString\u003e\u003e clone \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        // Shallow copy can be used here as String is immutable."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        list.forEach(row -\u003e {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            LinkedList\u003cString\u003e rowCopy \u003d (LinkedList\u003cString\u003e) row.clone();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            clone.add(FXCollections.observableList(rowCopy));"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        });"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return FXCollections.observableList(clone);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        StringBuilder builder \u003d new StringBuilder(450);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        // Append the title rows"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        String titleRep \u003d rowToString(titles);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        builder.append(titleRep);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        // Append the other rows"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        for (ObservableList\u003cString\u003e row : data) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            String rowRep \u003d rowToString(row);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            builder.append(rowRep);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Convert a row to its string representation (each value separated by a comma, then the row ends with"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * a newline character."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private String rowToString(List\u003cString\u003e row) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        StringBuilder builder \u003d new StringBuilder(110);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        for (String value : row) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            builder.append(value);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            builder.append(\",\");"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        builder.append(\"\\n\");"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 269,
      "KendrickAng": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    private Path intervieweeListFilePath \u003d Paths.get(\"data\", \"interviewees.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    private Path interviewerListFilePath \u003d Paths.get(\"data\", \"interviewers.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        setIntervieweeListFilePath(newUserPrefs.getIntervieweeListFilePath());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        setInterviewerListFilePath(newUserPrefs.getInterviewerListFilePath());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public Path getIntervieweeListFilePath() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        return this.intervieweeListFilePath;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public Path getInterviewerListFilePath() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        return this.interviewerListFilePath;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public void setIntervieweeListFilePath(Path intervieweeListFilePath) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        requireNonNull(intervieweeListFilePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        this.intervieweeListFilePath \u003d intervieweeListFilePath;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public void setInterviewerListFilePath(Path interviewerListFilePath) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        requireNonNull(interviewerListFilePath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        this.interviewerListFilePath \u003d interviewerListFilePath;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                \u0026\u0026 this.intervieweeListFilePath.equals(o.intervieweeListFilePath)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                \u0026\u0026 this.interviewerListFilePath.equals(o.interviewerListFilePath);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        return Objects.hash(guiSettings, intervieweeListFilePath, interviewerListFilePath);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        sb.append(\"\\nLocal interviewee data file location : \" + intervieweeListFilePath);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        sb.append(\"\\nLocal interviewer data file location : \" + interviewerListFilePath);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 25,
      "-": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/DefaultValues.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import seedu.address.model.Schedule;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " * A utility class containing all default values for the model."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "public class DefaultValues {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    // Person"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final Name DEFAULT_NAME \u003d new Name(\"John Cena\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final Phone DEFAULT_PHONE \u003d new Phone(\"88888888\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    // Interviewee"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final Role DEFAULT_INTERVIEWEE_ROLE \u003d new Role(\"interviewee\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final Email DEFAULT_PERSONAL_EMAIL \u003d new Email(\"default@example.com\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final Email DEFAULT_NUS_WORK_EMAIL \u003d new Email(\"default@u.nus.edu\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final Emails DEFAULT_EMAILS \u003d new Emails()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .addPersonalEmail(DEFAULT_PERSONAL_EMAIL)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .addNusEmail(DEFAULT_NUS_WORK_EMAIL);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final Faculty DEFAULT_FACULTY \u003d new Faculty(\"School of Computing\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final Integer DEFAULT_YEAR_OF_STUDY \u003d 2019;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public static final Slot DEFAULT_SLOT \u003d Slot.fromString(\"17/10/2019 13:00-14:00\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final List\u003cDepartment\u003e DEFAULT_DEPARTMENTS \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final List\u003cSlot\u003e DEFAULT_TIMESLOTS \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    // Interviewer"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final Role DEFAULT_INTERVIEWER_ROLE \u003d new Role(\"interviewer\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final List\u003cSchedule\u003e DEFAULT_SCHEDULES \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final Department DEFAULT_DEPARTMENT \u003d new Department(\"Marketing\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 1,
      "KendrickAng": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Department.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " * Represents an {@code Interviewee}\u0027s choice of department in the scheduler."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "public class Department {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Departments can take any values, but should not be blank.\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\"; // \" \" will be wrong"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public final String department;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Constructs a {@code Department}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @param department a valid department."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public Department(String department) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        requireNonNull(department);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        checkArgument(isValidDepartment(department), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        this.department \u003d department;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Returns true if the given string is a valid department."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static boolean isValidDepartment(String test) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return department;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                || (other instanceof Department // instanceof handles nulls"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                \u0026\u0026 department.equals(((Department) other).department)); // state check"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return department.hashCode();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KendrickAng": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/EmailType.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " * Possible types of emails that can be stored."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "public enum EmailType {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    PERSONAL, NUS"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KendrickAng": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Emails.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.address.model.person.EmailType.NUS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.address.model.person.EmailType.PERSONAL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " * Represents a group of emails, possibly categorised into different types."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "public class Emails {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private final HashMap\u003cEmailType, List\u003cEmail\u003e\u003e emails;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public Emails() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        this.emails \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public Emails(HashMap\u003cEmailType, List\u003cEmail\u003e\u003e emails) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        this.emails.putAll(emails);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Adds a new personal email address."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @return the same Emails instance."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public Emails addPersonalEmail(Email email) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        if (!emails.containsKey(PERSONAL)) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            // list doesn\u0027t exist, create and add"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            emails.put(PERSONAL, new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        emails.get(PERSONAL).add(email);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Adds a new Nus email address."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @return the same Emails instance."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public Emails addNusEmail(Email email) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        if (!emails.containsKey(NUS)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            // list doesn\u0027t exist, create and add"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            emails.put(NUS, new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        emails.get(NUS).add(email);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Gets a list of emails of specified type."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @param type the type of emails to get."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @return null if the emails don\u0027t exist, the {@code Email} {@code List} otherwise."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public List\u003cEmail\u003e getEmailsOfType(EmailType type) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return emails.get(type);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Returns true if there are any emails of specified type present."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public boolean hasEmailsOfType(EmailType type) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return emails.get(type) !\u003d null \u0026\u0026 !emails.get(type).isEmpty();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public HashMap\u003cEmailType, List\u003cEmail\u003e\u003e getAllEmails() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return emails;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        if (hasEmailsOfType(PERSONAL) \u0026\u0026 hasEmailsOfType(NUS)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            return String.format(\"%s %s %s %s\", PERSONAL, getEmailsOfType(PERSONAL), NUS, getEmailsOfType(NUS));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        if (hasEmailsOfType(NUS)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            return String.format(\"%s %s\", NUS, getEmailsOfType(NUS));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return String.format(\"%s %s\", PERSONAL, getEmailsOfType(PERSONAL));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                || (other instanceof Emails // instanceof handles nulls"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                \u0026\u0026 emails.equals(((Emails) other).emails)); // state check"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return emails.hashCode();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KendrickAng": 96
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Faculty.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " * Represents the faculty an {@code Interviewee} belongs to."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "public class Faculty {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Faculties can take any values, but should not be blank.\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\"; // \"\" will be wrong"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public final String faculty;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Constructs a {@code Faculty}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @param faculty a valid faculty."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public Faculty(String faculty) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        requireNonNull(faculty);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        checkArgument(isValidFaculty(faculty), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        this.faculty \u003d faculty;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Returns true if the given string is a valid faculty."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static boolean isValidFaculty(String test) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return faculty;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                || (other instanceof Faculty // instanceof handles nulls"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                \u0026\u0026 faculty.equals(((Faculty) other).faculty)); // state check"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return faculty.hashCode();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KendrickAng": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Interviewee.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " * Represents an Interviewee in the scheduler."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "public class Interviewee extends Person {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private final Faculty faculty;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private final Integer yearOfStudy;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private final List\u003cDepartment\u003e departmentChoices; // choice of departments"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private final List\u003cSlot\u003e availableTimeslots; // allocated interview time slots"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private final Emails emails; // personal, NUS emails etc"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private Interviewee(Faculty faculty, Integer yearOfStudy,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                       List\u003cDepartment\u003e departmentChoices, List\u003cSlot\u003e availableTimeslots, Emails emails,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                       Name name, Phone phone, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        super(name, phone, tags);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        this.faculty \u003d faculty;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        this.yearOfStudy \u003d yearOfStudy;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        this.departmentChoices \u003d departmentChoices;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        this.availableTimeslots \u003d availableTimeslots;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        this.emails \u003d emails;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Builder class for Interviewee - allows certain fields to optionally be added."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static class IntervieweeBuilder {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // Required parameters for Person"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        private final Name name;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        private final Phone phone;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        private final Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // Optional parameters - initialised to default values"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        private Emails emails \u003d DefaultValues.DEFAULT_EMAILS;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        private Faculty faculty \u003d DefaultValues.DEFAULT_FACULTY;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        private Integer yearOfStudy \u003d DefaultValues.DEFAULT_YEAR_OF_STUDY;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        private List\u003cDepartment\u003e departmentChoices \u003d DefaultValues.DEFAULT_DEPARTMENTS;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        private List\u003cSlot\u003e availableTimeslots \u003d DefaultValues.DEFAULT_TIMESLOTS;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        public IntervieweeBuilder(Name name, Phone phone, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            this.tags \u003d tags;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "         * Sets the optional {@code Emails} to create the Interviewee object."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "         */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        public IntervieweeBuilder emails(Emails val) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            emails \u003d val;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "         * Sets the optional {@code Faculty} to create the Interviewee object."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "         */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        public IntervieweeBuilder faculty(Faculty val) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            faculty \u003d val;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "         * Sets the optional {@code Integer} year of study to create the Interviewee object."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "         */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        public IntervieweeBuilder yearOfStudy(Integer val) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            yearOfStudy \u003d val;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "         * Sets the optional {@code List\u003cDepartment\u003e} to create the Interviewee object."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "         */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        public IntervieweeBuilder departmentChoices(List\u003cDepartment\u003e val) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            departmentChoices \u003d val;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "         * Sets the optional {@code List\u003cSlot\u003e} to create the Interviewee object."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "         */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        public IntervieweeBuilder availableTimeslots(List\u003cSlot\u003e val) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            availableTimeslots \u003d val;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "         * Builds the Interviewee object."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "         */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        public Interviewee build() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            return new Interviewee(faculty, yearOfStudy, departmentChoices,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                    availableTimeslots, emails, name, phone, tags);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    // Getters and misc methods"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public Faculty getFaculty() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return faculty;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public Integer getYearOfStudy() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return yearOfStudy;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public List\u003cDepartment\u003e getDepartmentChoices() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return departmentChoices;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public List\u003cSlot\u003e getAvailableTimeslots() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return availableTimeslots;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public Emails getEmails() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return emails;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Returns true if both interviewees have the same identity and data fields."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * This defines a stronger notion of equality between two interviewees."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        if (!(other instanceof Interviewee)) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Interviewee otherInterviewee \u003d (Interviewee) other;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return super.equals(other)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                \u0026\u0026 otherInterviewee.getEmails().equals(getEmails())"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                \u0026\u0026 otherInterviewee.getFaculty().equals(getFaculty())"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                \u0026\u0026 otherInterviewee.getYearOfStudy().equals(getYearOfStudy())"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                \u0026\u0026 otherInterviewee.getDepartmentChoices().equals(getDepartmentChoices())"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                \u0026\u0026 otherInterviewee.getAvailableTimeslots().equals(getAvailableTimeslots());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return Objects.hash(emails, faculty, yearOfStudy, departmentChoices, availableTimeslots,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                getName(), getPhone(), getTags());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .append(\" Role: \")"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .append(getClass().getSimpleName().toLowerCase())"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .append(\" Emails: \")"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .append(getEmails())"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .append(\" Faculty: \")"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .append(getFaculty())"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .append(\" Year of study: \")"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .append(getYearOfStudy())"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .append(\" Choice of departments: \")"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .append(getDepartmentChoices())"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .append(\" Time slots: \")"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .append(getAvailableTimeslots())"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KendrickAng": 178
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Interviewer.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " * Represents an Interviewer in the scheduler."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "public class Interviewer extends Person {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    // Each availability is given as a string in this format DD/MM/YYYY HH:MM - HH:MM"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private final List\u003cSlot\u003e availabilities;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private final Department department;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private Interviewer(Name name, Phone phone, Set\u003cTag\u003e tags,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                        Email email, Department department, List\u003cSlot\u003e availabilities) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        super(name, phone, tags);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        this.department \u003d department;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        this.availabilities \u003d availabilities;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Static builder class for Interviewer."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static class InterviewerBuilder {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // Required parameters for Person"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        private final Name name;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        private final Phone phone;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        private final Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // Optional parameters - initialised to default values"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        private Department department \u003d DefaultValues.DEFAULT_DEPARTMENT;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        private Email email \u003d DefaultValues.DEFAULT_PERSONAL_EMAIL;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        private List\u003cSlot\u003e availabilities \u003d DefaultValues.DEFAULT_TIMESLOTS;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        public InterviewerBuilder(Name name, Phone phone, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            this.tags \u003d tags;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "         * Sets the optional {@code Department} to create the Interviewer object."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "         */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        public InterviewerBuilder department(Department val) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            department \u003d val;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "         * Sets the optional {@code Email} to create the Interviewer object."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "         */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        public InterviewerBuilder email(Email val) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            email \u003d val;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "         * Sets the optional {@code List\u003cSlot\u003e} to create the Interviewer object."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "         */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        public InterviewerBuilder availabilities(List\u003cSlot\u003e val) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            availabilities \u003d val;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "         * Build and return the Interviewer object."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "         */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        public Interviewer build() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            return new Interviewer(name, phone, tags, email, department, availabilities);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    // Getters, setters and misc methods"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public Department getDepartment() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return department;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public List\u003cSlot\u003e getAvailabilities() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return availabilities;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public void setAvailabilities(List\u003cSlot\u003e availabilities) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        this.availabilities.clear();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        this.availabilities.addAll(availabilities);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Returns true if both interviewees have the same identity and data fields."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * This defines a stronger notion of equality between two interviewees."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        if (!(other instanceof Interviewer)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Interviewer otherInterviewer \u003d (Interviewer) other;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return super.equals(other)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                \u0026\u0026 otherInterviewer.getDepartment().equals(getDepartment())"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                \u0026\u0026 otherInterviewer.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                \u0026\u0026 otherInterviewer.getAvailabilities().equals(getAvailabilities());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return Objects.hash(department, email, availabilities,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                getName(), getPhone(), getTags());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .append(\" Role \")"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .append(getClass().getSimpleName())"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .append(\" Department \")"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .append(getDepartment())"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .append(\" Availabilities \")"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .append(getAvailabilities())"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 12,
      "KendrickAng": 132
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Person.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person in the address book."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class Person {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private final Name name; // compulsory"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private final Phone phone; // compulsory"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e(); // optional"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public Person(Name name, Phone phone, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        requireAllNonNull(name, phone, tags);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSamePerson(Person otherPerson) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (otherPerson \u003d\u003d this) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson !\u003d null"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                \u0026\u0026 (otherPerson.getPhone().equals(getPhone()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Person)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Person otherPerson \u003d (Person) other;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getTags().equals(getTags());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return Objects.hash(name, phone, tags);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 94,
      "KendrickAng": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Role.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " * Represents a {@code Person}\u0027s role in the Scheduler."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidRole(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "public class Role {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            \"Roles are restricted to either an \u0027interviewee\u0027 or an \u0027interviewer\u0027.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"(interviewee|interviewer)\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public Role(String role) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        requireNonNull(role);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        checkArgument(isValidRole(role), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        value \u003d role;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Returns true if the given string is a valid role."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static boolean isValidRole(String test) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Returns the equivalent {@code RoleType} enumeration of the valid role, null if it doesn\u0027t exist."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public RoleType getRole() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        if (value.equals(\"interviewee\")) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            return RoleType.INTERVIEWEE;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        if (value.equals(\"interviewer\")) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            return RoleType.INTERVIEWER;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                || (other instanceof Role // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                \u0026\u0026 value.equals(((Role) other).value)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KendrickAng": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/RoleType.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " * Represents the types of roles a person in the Scheduler can have."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "public enum RoleType {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    INTERVIEWER, INTERVIEWEE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KendrickAng": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Slot.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.time.ZonedDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " * Represents an interview timeslot an {@code Interviewee} is allocated."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "public class Slot {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final String STRING_FORMAT \u003d \"%s %s-%s\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            \"A slot should follow this format: \" + String.format(STRING_FORMAT, \"dd/mm/yyyy\", \"hh:mm\", \"hh:mm\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final String DATETIME_PARSE_PATTERN \u003d \"dd/MM/yyyy HH:mm\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private static final Pattern SEPARATION_REGEX \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            Pattern.compile(\"(?\u003cdate\u003e\\\\d{2}/\\\\d{2}/\\\\d{4}) (?\u003cslot1\u003e\\\\d{2}:\\\\d{2})-(?\u003cslot2\u003e\\\\d{2}:\\\\d{2})\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private static final DateTimeFormatter parseFormatter \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            DateTimeFormatter.ofPattern(DATETIME_PARSE_PATTERN, Locale.ENGLISH).withZone(ZoneId.systemDefault());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public final String date;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public final String start;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public final String end;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Constructs a {@code Slot} from the enforced format."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @param date the date of the slot."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @param start the starting time of the slot."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @param end  the ending time of the slot."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public Slot(String date, String start, String end) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        requireAllNonNull(date, start, end);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        checkArgument(isValidSlot(String.format(STRING_FORMAT, date, start, end)), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        this.start \u003d start;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        this.end \u003d end;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * Factory method for constructing a {@code Slot} from a given String in the enforced format."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * @param slot The String in the format given in SEPARATION_REGEX."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public static Slot fromString(String slot) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        requireNonNull(slot);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        checkArgument(isValidSlot(slot), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        final Matcher matcher \u003d SEPARATION_REGEX.matcher(slot);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            throw new IllegalArgumentException(MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        return new Slot(matcher.group(\"date\"), matcher.group(\"slot1\"), matcher.group(\"slot2\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Returns true if the given slot timing is in valid format and start occurs earlier than end."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static boolean isValidSlot(String test) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            // split the periods up"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            final Matcher matcher \u003d SEPARATION_REGEX.matcher(test);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            if (!matcher.matches()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                throw new ParseException(MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            final String date \u003d matcher.group(\"date\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            final String start \u003d String.format(\"%s %s\", date, matcher.group(\"slot1\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            final String end \u003d String.format(\"%s %s\", date, matcher.group(\"slot2\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            ZonedDateTime t1 \u003d ZonedDateTime.parse(start, parseFormatter);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            ZonedDateTime t2 \u003d ZonedDateTime.parse(end, parseFormatter);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            // the start must be earlier than the end"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            if (t1.compareTo(t2) \u003e 0) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return String.format(STRING_FORMAT, date, start, end);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                || (other instanceof Slot // instanceof handles nulls"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                \u0026\u0026 date.equals(((Slot) other).date)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                \u0026\u0026 start.equals(((Slot) other).start)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                \u0026\u0026 end.equals(((Slot) other).end)); // state check"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return Objects.hash(date, start, end);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 5,
      "dcshzj": 16,
      "KendrickAng": 89
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/UniquePersonList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * A list of persons that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * A person is considered unique by comparing using {@code Person#isSamePerson(Person)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * persons uses Person#isSamePerson(Person) for equality so as to ensure that the person being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * unique in terms of identity in the UniquePersonList. However, the removal of a person uses Person#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * as to ensure that the person with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * @see Person#isSamePerson(Person)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "public class UniquePersonList\u003cT extends Person\u003e implements Iterable\u003cT\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    private final ObservableList\u003cT\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    private final ObservableList\u003cT\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the list contains an equivalent person as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public boolean contains(T toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSamePerson);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public void add(T toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public void setPerson(T target, T editedPerson) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!target.isSamePerson(editedPerson) \u0026\u0026 contains(editedPerson)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.set(index, editedPerson);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes the equivalent person from the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public void remove(T toRemove) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public void setPersons(UniquePersonList\u003cT\u003e replacement) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of this list with {@code persons}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public void setPersons(List\u003cT\u003e persons) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(persons);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personsAreUnique(persons)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(persons);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public ObservableList\u003cT\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public Iterator\u003cT\u003e iterator() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof UniquePersonList // instanceof handles nulls"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniquePersonList) other).internalList));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code persons} contains only unique persons."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    private boolean personsAreUnique(List\u003c? extends Person\u003e persons) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c persons.size() - 1; i++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int j \u003d i + 1; j \u003c persons.size(); j++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                if (persons.get(i).isSamePerson(persons.get(j))) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 12,
      "-": 125
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/CsvReader.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mirozo"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import seedu.address.model.Schedule;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mirozo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mirozo"
        },
        "content": " * Helper class to read .csv files (Comma separated values)."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mirozo"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mirozo"
        },
        "content": "public class CsvReader {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     * Constructor for CsvReader object to read from excel."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mirozo"
        },
        "content": "\u003c\u003c\u003c\u003c\u003c\u003c\u003c HEAD"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     * @param filePath Path of csv file"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mirozo"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     * @param filePath"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mirozo"
        },
        "content": "\u003e\u003e\u003e\u003e\u003e\u003e\u003e 8d5e5072afe29f45a0772570f143a75cefd6b715"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    public CsvReader(String filePath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     * Reads from excel and returns the corresponding string."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     * @return String"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     * @throws IOException if input file is not found."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mirozo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    public ArrayList\u003cSchedule\u003e read() throws IOException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        BufferedReader csvReader \u003d new BufferedReader(new FileReader(filePath));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        String firstLine \u003d csvReader.readLine();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        int numberOfDays \u003d getValue(firstLine.split(\",\")[0]);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        int numberOfColumns \u003d getValue(firstLine.split(\",\")[1]) + 1;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        ArrayList\u003cSchedule\u003e schedules \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        csvReader.readLine(); //removes next line"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        for (int i \u003d 0; i \u003c numberOfDays; i++) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            LinkedList\u003cLinkedList\u003cString\u003e\u003e table \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            String row;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            boolean firstEncounter \u003d true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            while ((row \u003d csvReader.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                String[] data \u003d row.split(\",\", -1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                if (data[0].equals(\"\")) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                    if (firstEncounter) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                        firstEncounter \u003d false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                } else if (numberOfColumns !\u003d 0) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                    LinkedList\u003cString\u003e dataRow \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                    for (int j \u003d 0; j \u003c numberOfColumns; j++) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                        String element \u003d data[j];"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                        dataRow.add(element);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                    table.add(dataRow);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mirozo"
        },
        "content": "                }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            String date \u003d table.getFirst().getFirst();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mirozo"
        },
        "content": "            schedules.add(new Schedule(date, table));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        csvReader.close();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        return schedules;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    private static int getValue(String element) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        String[] strings \u003d element.split(\"\u003d\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        String trimmedString \u003d strings[1].trim();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        return Integer.parseInt(trimmedString);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    private boolean fileExists() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        File file \u003d new File(this.filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        return file.exists();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mirozo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mirozo": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.address.model.IntervieweeList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.address.model.InterviewerList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.address.model.ReadOnlyIntervieweeList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.address.model.ReadOnlyInterviewerList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "import seedu.address.model.Schedule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import seedu.address.model.person.Department;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.address.model.person.Interviewee;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.address.model.person.Interviewer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import seedu.address.model.person.Slot;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    private static String[][] sampleFilledTable \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            new String[][]{"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                    {\"10/9/2019\", \"Welfare - Hazel\", \"Technical - Johnathan\", \"Publicity - Lucia\"},"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                    {\"18:00-18:30\", \"John\", \"Steven\", \"0\"},"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                    {\"18:30-19:00\", \"Alex\", \"Clark\", \"John\"},"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                    {\"19:00-19:30\", \"Alicia\", \"0\", \"charlie\"},"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                    {\"19:30-20:00\", \"Charlie\", \"0\", \"Selina\"},"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                    {\"20:00-20:30\", \"Selina\", \"0\", \"0\"},"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                    {\"20:30-21:00\", \"Natal\", \"0\", \"0\"}};"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public static Interviewee[] getSampleInterviewees() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        // TODO: Expand this sample Interviewees list"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        return new Interviewee[0];"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public static Interviewer[] getSampleInterviewers() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        // TODO: Expand this sample Interviewers list"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        return new Interviewer[0];"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public static ReadOnlyIntervieweeList getSampleIntervieweeList() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        IntervieweeList sampleIntervieweeList \u003d new IntervieweeList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        for (Interviewee sampleInterviewee : getSampleInterviewees()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            sampleIntervieweeList.addInterviewee(sampleInterviewee);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        return sampleIntervieweeList;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public static ReadOnlyInterviewerList getSampleInterviewerList() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        InterviewerList sampleInterviewerList \u003d new InterviewerList();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        for (Interviewer sampleInterviewer : getSampleInterviewers()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            sampleInterviewerList.addInterviewer(sampleInterviewer);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        return sampleInterviewerList;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    public static List\u003cSchedule\u003e getSampleSchedulesList() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        LinkedList\u003cSchedule\u003e sampleSchedulesList \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        String date \u003d sampleFilledTable[0][0];"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        LinkedList\u003cLinkedList\u003cString\u003e\u003e sampleData \u003d toTwoDimensionalLinkedList(sampleFilledTable);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        sampleSchedulesList.add(new Schedule(date, sampleData));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        return sampleSchedulesList;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * Returns the given two dimensional array of strings as a two dimensional LinkedList of strings."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    private static LinkedList\u003cLinkedList\u003cString\u003e\u003e toTwoDimensionalLinkedList(String[][] table) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        LinkedList\u003cLinkedList\u003cString\u003e\u003e tableCopy \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        for (String[] row : table) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            LinkedList\u003cString\u003e rowCopy \u003d new LinkedList\u003c\u003e(Arrays.asList(row));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            tableCopy.add(rowCopy);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        return tableCopy;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Returns a department list containing the list of strings given."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static List\u003cDepartment\u003e getDepartmentList(String... strings) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .map(Department::new)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Returns a time slot list containing the list of strings given."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static List\u003cSlot\u003e getTimeslotList(String...timeslots) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return Arrays.stream(timeslots)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                .map(Slot::fromString)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "mrchensheng21": 31,
      "dcshzj": 33,
      "-": 29,
      "KendrickAng": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/IntervieweeListStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.address.model.ReadOnlyIntervieweeList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dcshzj"
        },
        "content": " * Represents a storage for {@link seedu.address.model.IntervieweeList}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dcshzj"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "public interface IntervieweeListStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * Returns the file path of the interviewees data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    Path getIntervieweeListFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * Returns Interviewees data as an {@link ReadOnlyIntervieweeList}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    Optional\u003cReadOnlyIntervieweeList\u003e readIntervieweeList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * @see #getIntervieweeListFilePath()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    Optional\u003cReadOnlyIntervieweeList\u003e readIntervieweeList(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * Saves the given {@link ReadOnlyIntervieweeList} to the storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * @param intervieweeList cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    void saveIntervieweeList(ReadOnlyIntervieweeList intervieweeList) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * @see #saveIntervieweeList(ReadOnlyIntervieweeList)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    void saveIntervieweeList(ReadOnlyIntervieweeList intervieweeList, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/InterviewerListStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.address.model.ReadOnlyInterviewerList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dcshzj"
        },
        "content": " * Represents a storage for {@link seedu.address.model.InterviewerList}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dcshzj"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "public interface InterviewerListStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * Returns the file path of the interviewers data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    Path getInterviewerListFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * Returns Interviewers data as an {@link ReadOnlyInterviewerList}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    Optional\u003cReadOnlyInterviewerList\u003e readInterviewerList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * @see #getInterviewerListFilePath()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    Optional\u003cReadOnlyInterviewerList\u003e readInterviewerList(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * Saves the given {@link ReadOnlyInterviewerList} to the storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * @param interviewerList cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    void saveInterviewerList(ReadOnlyInterviewerList interviewerList) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * @see #saveInterviewerList(ReadOnlyInterviewerList)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    void saveInterviewerList(ReadOnlyInterviewerList interviewerList, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedDepartment.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import seedu.address.model.person.Department;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " * Jackson-friendly version of  {@link Department}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "public class JsonAdaptedDepartment {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private final String department;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Constructs a {@code JsonAdaptedDepartment} with the given {@code department}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public JsonAdaptedDepartment(String department) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        this.department \u003d department;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Converts a given {@code Tag} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public JsonAdaptedDepartment(Department source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        department \u003d source.department;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public String getDepartment() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return department;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Converts this Jackson-friendly adapted department object into the model\u0027s {@code Department} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted department."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public Department toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        if (!Department.isValidDepartment(department)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            throw new IllegalValueException(Department.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return new Department(department);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KendrickAng": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedInterviewee.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import seedu.address.model.person.Department;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import seedu.address.model.person.EmailType;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import seedu.address.model.person.Emails;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import seedu.address.model.person.Faculty;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import seedu.address.model.person.Interviewee;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import seedu.address.model.person.Slot;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " * Jackson-friendly version of {@link Interviewee}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "public class JsonAdaptedInterviewee extends JsonAdaptedPerson {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    // TODO: Probably need to store type of role E.g interviewee/interviewer"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private final String faculty;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private final Integer yearOfStudy;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private final List\u003cJsonAdaptedDepartment\u003e departmentChoices \u003d new ArrayList\u003c\u003e(); // choice of departments"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private final List\u003cJsonAdaptedSlot\u003e availableTimeslots \u003d new ArrayList\u003c\u003e(); // allocated interview time slots"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private final Map\u003cString, List\u003cString\u003e\u003e emails \u003d new HashMap\u003c\u003e(); // personal, NUS emails etc"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Constructs a {@code JsonAdaptedInterviewee} with the given interviewee details."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public JsonAdaptedInterviewee("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            @JsonProperty(\"faculty\") String faculty, @JsonProperty(\"yearOfStudy\") Integer yearOfStudy,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            @JsonProperty(\"departmentChoices\") List\u003cJsonAdaptedDepartment\u003e departmentChoices,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            @JsonProperty(\"availableTimeslots\") List\u003cJsonAdaptedSlot\u003e availableTimeslots,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            @JsonProperty(\"emails\") HashMap\u003cString, List\u003cString\u003e\u003e emails,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            @JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            @JsonProperty(\"phone\") String phone,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        super(name, phone, tagged);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        this.faculty \u003d faculty;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        this.yearOfStudy \u003d yearOfStudy;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        if (departmentChoices !\u003d null) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            this.departmentChoices.addAll(departmentChoices);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        if (availableTimeslots !\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            this.availableTimeslots.addAll(availableTimeslots);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        if (emails !\u003d null) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            this.emails.putAll(emails);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Converts a given {@code Interviewee} into this class for Jackson use."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public JsonAdaptedInterviewee(Interviewee source) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        super(source.getName().fullName, source.getPhone().value,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                source.getTags().stream().map(JsonAdaptedTag::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        faculty \u003d source.getFaculty().faculty;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        yearOfStudy \u003d source.getYearOfStudy();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        departmentChoices.addAll(source.getDepartmentChoices()"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .map(JsonAdaptedDepartment::new)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        availableTimeslots.addAll(source.getAvailableTimeslots()"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .map(JsonAdaptedSlot::new)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        emails.putAll(source.getEmails().getAllEmails().entrySet()"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .collect(Collectors.toMap("
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                    entry -\u003e entry.getKey().toString(),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                    entry -\u003e entry.getValue().stream().map(Email::toString).collect(Collectors.toList()))"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                ));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Converts this Jackson-friendly adapted interviewee object into the model\u0027s {@code Interviewee} object."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted interviewee."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public Interviewee toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        final String name \u003d getName();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        final String phone \u003d getPhone();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        for (JsonAdaptedTag tag : getTagged()) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            personTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        final List\u003cDepartment\u003e departments \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        for (JsonAdaptedDepartment d: departmentChoices) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            departments.add(d.toModelType());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        final List\u003cSlot\u003e personSlots \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        for (JsonAdaptedSlot s: availableTimeslots) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            personSlots.add(s.toModelType());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        final HashMap\u003cEmailType, List\u003cEmail\u003e\u003e personEmails \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        for (Map.Entry\u003cString, List\u003cString\u003e\u003e entry: emails.entrySet()) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            personEmails.put("
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                    EmailType.valueOf(entry.getKey()),"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                    entry.getValue().stream().map(Email::new).collect(Collectors.toList())"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            );"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // check name"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // check phone"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // check faculty"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        if (faculty \u003d\u003d null) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Faculty.class.getSimpleName()));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        final Faculty modelFaculty \u003d new Faculty(faculty);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // check year of study"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        if (yearOfStudy \u003d\u003d null) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Integer.class.getSimpleName()));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        final Integer modelYearOfStudy \u003d Integer.valueOf(yearOfStudy);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // no need to check departments"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        final List\u003cDepartment\u003e modelDepartments \u003d new ArrayList\u003c\u003e(departments);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // no need to check tags"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // no need to check timeslots"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        final List\u003cSlot\u003e modelSlots \u003d new ArrayList\u003c\u003e(personSlots);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // no need to check emails"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        final Emails modelEmails \u003d new Emails(personEmails);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return new Interviewee.IntervieweeBuilder(modelName, modelPhone, modelTags)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .faculty(modelFaculty)"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .yearOfStudy(modelYearOfStudy)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .departmentChoices(modelDepartments)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .availableTimeslots(modelSlots)"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .emails(modelEmails)"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KendrickAng": 161
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedInterviewer.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import seedu.address.model.person.Department;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import seedu.address.model.person.Interviewer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import seedu.address.model.person.Slot;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " * Jackson-friendly version of {@link Interviewer}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "public class JsonAdaptedInterviewer extends JsonAdaptedPerson {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private final List\u003cJsonAdaptedSlot\u003e availabilities \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private final String department;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Constructs a {@code JsonAdaptedInterviewer} with the given interviewer details."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public JsonAdaptedInterviewer("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            @JsonProperty(\"availabilities\") List\u003cJsonAdaptedSlot\u003e availabilities,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            @JsonProperty(\"department\") String department,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            @JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            @JsonProperty(\"phone\") String phone,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        super(name, phone, tagged);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        this.department \u003d department;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        if (availabilities !\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            this.availabilities.addAll(availabilities);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Converts a given {@code Interviewer} into this class for Jackson use."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public JsonAdaptedInterviewer(Interviewer source) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        super(source.getName().fullName, source.getPhone().value,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                source.getTags().stream().map(JsonAdaptedTag::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        department \u003d source.getDepartment().department;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        availabilities.addAll(source.getAvailabilities()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .map(JsonAdaptedSlot::new)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Converts this Jackson-friendly adapted interviewer object into the model\u0027s {@code Interviewer} object."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted interviewer."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public Interviewer toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        final String name \u003d getName();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        final String phone \u003d getPhone();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        for (JsonAdaptedTag tag : getTagged()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            personTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        final List\u003cSlot\u003e personAvailabilities \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        for (JsonAdaptedSlot s: availabilities) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            personAvailabilities.add(s.toModelType());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // check name"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // check phone"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // check department"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        if (department \u003d\u003d null) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Department.class.getSimpleName()));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        final Department modelDepartment \u003d new Department(department);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // no need to check tags"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // no need to check availabilities"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        final List\u003cSlot\u003e modelAvailabilities \u003d new ArrayList\u003c\u003e(personAvailabilities);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return new Interviewer.InterviewerBuilder(modelName, modelPhone, modelTags)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                    .department(modelDepartment)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                    .availabilities(modelAvailabilities)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                    .build();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 1,
      "KendrickAng": 106
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedPerson.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Person}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedPerson {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedPerson(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Person} into this class for Jackson use."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedPerson(Person source) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            personTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return new Person(modelName, modelPhone, modelTags);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public List\u003cJsonAdaptedTag\u003e getTagged() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return tagged;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public String getPhone() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 86,
      "KendrickAng": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedSlot.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import seedu.address.model.person.Slot;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " * Jackson-friendly version of (@link Slot}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "public class JsonAdaptedSlot {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    private final String slot;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * Constructs a {@code JsonAdaptedSlot} with the given {@code slot}s"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public JsonAdaptedSlot(String slot) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        this.slot \u003d slot;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Converts a given {@code Slot} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public JsonAdaptedSlot(Slot source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        this.slot \u003d source.toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public String getSlot() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        return this.slot;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Converts this Jackson-friendly adapted department object into the model\u0027s {@code Department} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted department."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public Slot toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        return Slot.fromString(this.slot);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 7,
      "KendrickAng": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonIntervieweeListStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.address.model.ReadOnlyIntervieweeList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dcshzj"
        },
        "content": " * A class to address Interviewee data stored as a JSON file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dcshzj"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "public class JsonIntervieweeListStorage implements IntervieweeListStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonIntervieweeListStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public JsonIntervieweeListStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public Path getIntervieweeListFilePath() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        return this.filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public Optional\u003cReadOnlyIntervieweeList\u003e readIntervieweeList() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        return this.readIntervieweeList(this.filePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public Optional\u003cReadOnlyIntervieweeList\u003e readIntervieweeList(Path filePath) throws DataConversionException,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        Optional\u003cJsonSerializableIntervieweeList\u003e jsonIntervieweeList \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                filePath, JsonSerializableIntervieweeList.class);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        if (!jsonIntervieweeList.isPresent()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            return Optional.of(jsonIntervieweeList.get().toModelType());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public void saveIntervieweeList(ReadOnlyIntervieweeList intervieweeList) throws IOException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        this.saveIntervieweeList(intervieweeList, this.filePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public void saveIntervieweeList(ReadOnlyIntervieweeList intervieweeList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        requireNonNull(intervieweeList);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableIntervieweeList(intervieweeList), filePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 74
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonInterviewerListStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.address.model.ReadOnlyInterviewerList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dcshzj"
        },
        "content": " * A class to address Interviewer data stored as a JSON file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dcshzj"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "public class JsonInterviewerListStorage implements InterviewerListStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonInterviewerListStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public JsonInterviewerListStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public Path getInterviewerListFilePath() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        return this.filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public Optional\u003cReadOnlyInterviewerList\u003e readInterviewerList() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        return this.readInterviewerList(this.filePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public Optional\u003cReadOnlyInterviewerList\u003e readInterviewerList(Path filePath) throws DataConversionException,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        Optional\u003cJsonSerializableInterviewerList\u003e jsonInterviewerList \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                filePath, JsonSerializableInterviewerList.class);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        if (!jsonInterviewerList.isPresent()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            return Optional.of(jsonInterviewerList.get().toModelType());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public void saveInterviewerList(ReadOnlyInterviewerList interviewerList) throws IOException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        this.saveInterviewerList(interviewerList, this.filePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public void saveInterviewerList(ReadOnlyInterviewerList interviewerList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        requireNonNull(interviewerList);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableInterviewerList(interviewerList), filePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 74
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableIntervieweeList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.address.model.IntervieweeList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.address.model.ReadOnlyIntervieweeList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.address.model.person.Interviewee;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dcshzj"
        },
        "content": " * An Immutable IntervieweeList that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dcshzj"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "@JsonRootName(value \u003d \"interviewees\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "public class JsonSerializableIntervieweeList {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_INTERVIEWEE \u003d \"Interviewee list contains duplicate interviewee(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    private final List\u003cJsonAdaptedInterviewee\u003e interviewees \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * Constructs a {@code JsonSerializableIntervieweeList} with the given Interviewees."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public JsonSerializableIntervieweeList(@JsonProperty(\"interviewees\") List\u003cJsonAdaptedInterviewee\u003e interviewees) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        this.interviewees.addAll(interviewees);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * Converts a given {@code ReadOnlyIntervieweeList} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableIntervieweeList}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public JsonSerializableIntervieweeList(ReadOnlyIntervieweeList source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        this.interviewees.addAll(source.getIntervieweeList().stream()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                .map(JsonAdaptedInterviewee::new)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * Converts this Interviewee list into the model\u0027s {@code IntervieweeList} object."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public IntervieweeList toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        IntervieweeList intervieweeList \u003d new IntervieweeList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        for (JsonAdaptedInterviewee jsonAdaptedInterviewee : this.interviewees) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            Interviewee interviewee \u003d jsonAdaptedInterviewee.toModelType();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            if (intervieweeList.hasInterviewee(interviewee)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_INTERVIEWEE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            intervieweeList.addInterviewee(interviewee);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        return intervieweeList;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableInterviewerList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.address.model.InterviewerList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.address.model.ReadOnlyInterviewerList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.address.model.person.Interviewer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dcshzj"
        },
        "content": " * An Immutable InterviewerList that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dcshzj"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "@JsonRootName(value \u003d \"interviewers\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "public class JsonSerializableInterviewerList {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_INTERVIEWER \u003d \"Interviewer list contains duplicate interviewer(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    private final List\u003cJsonAdaptedInterviewer\u003e interviewers \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * Constructs a {@code JsonSerializableInterviewerList} with the given Interviewers."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public JsonSerializableInterviewerList(@JsonProperty(\"interviewers\") List\u003cJsonAdaptedInterviewer\u003e interviewers) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        this.interviewers.addAll(interviewers);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * Converts a given {@code ReadOnlyInterviewerList} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableInterviewerList}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public JsonSerializableInterviewerList(ReadOnlyInterviewerList source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        this.interviewers.addAll(source.getInterviewerList().stream()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                .map(JsonAdaptedInterviewer::new)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * Converts this Interviewer list into the model\u0027s {@code InterviewerList} object."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public InterviewerList toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        InterviewerList interviewerList \u003d new InterviewerList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        for (JsonAdaptedInterviewer jsonAdaptedInterviewer : this.interviewers) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            Interviewer interviewer \u003d jsonAdaptedInterviewer.toModelType();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            if (interviewerList.hasInterviewer(interviewer)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_INTERVIEWER);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            interviewerList.addInterviewer(interviewer);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        return interviewerList;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.address.model.ReadOnlyIntervieweeList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.address.model.ReadOnlyInterviewerList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "public interface Storage extends IntervieweeListStorage, InterviewerListStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d IntervieweeList \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    Path getIntervieweeListFilePath();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    Optional\u003cReadOnlyIntervieweeList\u003e readIntervieweeList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    Optional\u003cReadOnlyIntervieweeList\u003e readIntervieweeList(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    void saveIntervieweeList(ReadOnlyIntervieweeList intervieweeList) throws IOException;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    void saveIntervieweeList(ReadOnlyIntervieweeList intervieweeList, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d InterviewerList \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    Path getInterviewerListFilePath();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    Optional\u003cReadOnlyInterviewerList\u003e readInterviewerList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    Optional\u003cReadOnlyInterviewerList\u003e readInterviewerList(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    void saveInterviewerList(ReadOnlyInterviewerList interviewerList) throws IOException;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    void saveInterviewerList(ReadOnlyInterviewerList interviewerList, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 32,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.address.model.ReadOnlyIntervieweeList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.address.model.ReadOnlyInterviewerList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Manages storage of AddressBook data in local storage."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    private IntervieweeListStorage intervieweeListStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    private InterviewerListStorage interviewerListStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public StorageManager(IntervieweeListStorage intervieweeListStorage,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                          InterviewerListStorage interviewerListStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        this.intervieweeListStorage \u003d intervieweeListStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        this.interviewerListStorage \u003d interviewerListStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d IntervieweeList methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public Path getIntervieweeListFilePath() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        return this.intervieweeListStorage.getIntervieweeListFilePath();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public Optional\u003cReadOnlyIntervieweeList\u003e readIntervieweeList() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        return readIntervieweeList(this.intervieweeListStorage.getIntervieweeListFilePath());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public Optional\u003cReadOnlyIntervieweeList\u003e readIntervieweeList(Path filePath) throws DataConversionException,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            IOException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        logger.fine(\"Attempting to read interviewee data from file: \" + filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        return this.intervieweeListStorage.readIntervieweeList(filePath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public void saveIntervieweeList(ReadOnlyIntervieweeList intervieweeList) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        saveIntervieweeList(intervieweeList, this.intervieweeListStorage.getIntervieweeListFilePath());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public void saveIntervieweeList(ReadOnlyIntervieweeList intervieweeList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        logger.fine(\"Attempting to write to interviewee data file: \" + filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        this.intervieweeListStorage.saveIntervieweeList(intervieweeList, filePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d InterviewerList methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public Path getInterviewerListFilePath() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        return this.interviewerListStorage.getInterviewerListFilePath();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public Optional\u003cReadOnlyInterviewerList\u003e readInterviewerList() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        return readInterviewerList(this.interviewerListStorage.getInterviewerListFilePath());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public Optional\u003cReadOnlyInterviewerList\u003e readInterviewerList(Path filePath) throws DataConversionException,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            IOException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        logger.fine(\"Attempting to read interviewer data from file: \" + filePath);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        return this.interviewerListStorage.readInterviewerList(filePath);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public void saveInterviewerList(ReadOnlyInterviewerList interviewerList) throws IOException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        saveInterviewerList(interviewerList, this.interviewerListStorage.getInterviewerListFilePath());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public void saveInterviewerList(ReadOnlyInterviewerList interviewerList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        logger.fine(\"Attempting to write to interviewer data file: \" + filePath);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        this.interviewerListStorage.saveInterviewerList(interviewerList, filePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 52,
      "-": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonListPanel personListPanel;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    private ScheduleViewPanel scheduleViewPanel;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    private StackPane schedulePanelPlaceholder;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        scheduleViewPanel \u003d new ScheduleViewPanel(logic.getTitlesLists(), logic.getObservableLists());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        schedulePanelPlaceholder.getChildren().add(scheduleViewPanel.getRoot());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getAddressBookFilePath());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel getPersonListPanel() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        return personListPanel;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    public ScheduleViewPanel getScheduleViewPanel() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        return scheduleViewPanel;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mrchensheng21": 9,
      "-": 190
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/RefreshListener.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": " * API of refresh listener."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "public interface RefreshListener {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * Refresh the Ui when data is imported from .csv file."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    void dataImported(MainWindow window, Logic logic);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mrchensheng21": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/RefreshListenerManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": " * Refresh the Ui whenever new data is being imported to the Scheduler."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "public class RefreshListenerManager implements RefreshListener {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    private ScheduleViewPanel scheduleViewPanel;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    public void dataImported(MainWindow window, Logic logic) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        this.scheduleViewPanel \u003d window.getScheduleViewPanel();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        this.scheduleViewPanel.fillPanel(logic.getTitlesLists(), logic.getObservableLists());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mrchensheng21": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ScheduleView.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "import javafx.beans.property.ReadOnlyObjectWrapper;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "import javafx.scene.control.TableColumn;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "import javafx.scene.control.TableView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": " * Table consisting of timetables of scheduling."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "public class ScheduleView extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    private static final String FXML \u003d \"ScheduleView.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    private List\u003cString\u003e titles;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    private ObservableList\u003cObservableList\u003cString\u003e\u003e schedule; // Excluding titles"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    private TableView tableView;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    ScheduleView(List\u003cString\u003e titles, ObservableList\u003cObservableList\u003cString\u003e\u003e schedule) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        this.titles \u003d titles;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        this.schedule \u003d schedule;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        initialise();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * Allow the creation of table."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    private void initialise() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        for (int i \u003d 0; i \u003c this.titles.size(); i++) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            final int finalIdx \u003d i;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            TableColumn\u003cObservableList\u003cString\u003e, String\u003e column \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                    new TableColumn\u003cObservableList\u003cString\u003e, String\u003e("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                            this.titles.get(i)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                    );"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            column.setCellValueFactory(param -\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                    new ReadOnlyObjectWrapper\u003c\u003e(param.getValue().get(finalIdx))"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            );"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            this.tableView.getColumns().add(column);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            this.tableView.setColumnResizePolicy(TableView.CONSTRAINED_RESIZE_POLICY);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        this.tableView.setItems(this.schedule);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mrchensheng21": 49,
      "ChrisKheng": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ScheduleViewPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": " * Panel to hold multiple schedule tables together."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "public class ScheduleViewPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    private static final String FXML \u003d \"ScheduleViewPanel.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    private List\u003cObservableList\u003cObservableList\u003cString\u003e\u003e\u003e scheduleList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    private List\u003cScheduleView\u003e scheduleViewList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    private List\u003cList\u003cString\u003e\u003e titles;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    private StackPane container;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    ScheduleViewPanel("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            List\u003cList\u003cString\u003e\u003e titles, List\u003cObservableList\u003cObservableList\u003cString\u003e\u003e\u003e scheduleList) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        this.scheduleList \u003d scheduleList;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        this.scheduleViewList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        this.titles \u003d titles;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        fillPanel();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * Fill the panel with the tables that is retrieved from scheduleView class."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    private void fillPanel() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        for (int i \u003d 0; i \u003c this.scheduleList.size(); i++) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            scheduleViewList.add(new ScheduleView(this.titles.get(i), this.scheduleList.get(i)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        for (ScheduleView schedule : scheduleViewList) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            container.getChildren().add(schedule.getRoot());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * Fill the panel when user import data."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * @param titles Lists of titles for the schedules"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * @param scheduleList Lists of observable data for TableView."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    protected void fillPanel("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            List\u003cList\u003cString\u003e\u003e titles,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            List\u003cObservableList\u003cObservableList\u003cString\u003e\u003e\u003e scheduleList) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        for (int i \u003d 0; i \u003c scheduleList.size(); i++) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            scheduleViewList.add(new ScheduleView(titles.get(i), scheduleList.get(i)));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        for (ScheduleView schedule : scheduleViewList) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            container.getChildren().add(schedule.getRoot());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    protected void refresh() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        this.scheduleViewList.removeAll(this.scheduleViewList);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "mrchensheng21": 69
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "         title\u003d\"Scheduler App\" minWidth\u003d\"760\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        \u003cStackPane fx:id\u003d\"schedulePanelPlaceholder\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"SOMETIMES\"/\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "mrchensheng21": 5,
      "ChrisKheng": 1,
      "-": 54
    }
  },
  {
    "path": "src/main/resources/view/ScheduleView.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    \u003cTableView fx:id\u003d\"tableView\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    \u003c/TableView\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "mrchensheng21": 9
    }
  },
  {
    "path": "src/main/resources/view/ScheduleViewPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "\u003cStackPane xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "           fx:id\u003d\"container\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "\u003c/StackPane\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "mrchensheng21": 9
    }
  },
  {
    "path": "src/main/resources/view/TableView.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "\u003c?import javafx.scene.control.TableColumn?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "\u003c?import javafx.scene.control.TableView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "\u003c?import javafx.scene.control.cell.PropertyValueFactory?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"593.0\" maxWidth\u003d\"726.0\" minHeight\u003d\"593.0\" minWidth\u003d\"726.0\" prefHeight\u003d\"593.0\" prefWidth\u003d\"726.0\" styleClass\u003d\"root\" xmlns\u003d\"http://javafx.com/javafx/8.0.111\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"seedu.address.ui.MainWindow\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        \u003cVBox prefHeight\u003d\"400.0\" prefWidth\u003d\"600.0\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"AS_NEEDED\" vbarPolicy\u003d\"AS_NEEDED\" hvalue\u003d\"1.0\" layoutX\u003d\"4.0\" prefHeight\u003d\"593.0\" prefWidth\u003d\"726.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                    \u003ccontent\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                        \u003cTableView fx:id\u003d\"table\" prefHeight\u003d\"520.0\" prefWidth\u003d\"932.0\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                            \u003ccolumns\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                                \u003cTableColumn prefWidth\u003d\"130.0\" text\u003d\"Full Name\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                                    \u003ccellValueFactory\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                                        \u003cPropertyValueFactory property\u003d\"fullName\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                                    \u003c/cellValueFactory\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                                \u003c/TableColumn\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                                \u003cTableColumn fx:id\u003d\"nusEmailColumn\" prefWidth\u003d\"120.0\" text\u003d\"NUS Email\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                                    \u003ccellValueFactory\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                                        \u003cPropertyValueFactory property\u003d\"nusEmail\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                                    \u003c/cellValueFactory\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                                \u003c/TableColumn\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                                \u003cTableColumn prefWidth\u003d\"120.0\" text\u003d\"Personal Email\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                                    \u003ccellValueFactory\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                                        \u003cPropertyValueFactory property\u003d\"personalEmail\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                                    \u003c/cellValueFactory\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                                \u003c/TableColumn\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                                \u003cTableColumn fx:id\u003d\"mobileNumberColumn\" prefWidth\u003d\"90.0\" text\u003d\"Mobile\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                                    \u003ccellValueFactory\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                                        \u003cPropertyValueFactory property\u003d\"mobileNumber\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                                    \u003c/cellValueFactory\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                                \u003c/TableColumn\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                                \u003cTableColumn fx:id\u003d\"schoolColumn\" prefWidth\u003d\"90.0\" text\u003d\"School/Faculty\"\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                                    \u003ccellValueFactory\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                                        \u003cPropertyValueFactory property\u003d\"school\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                                    \u003c/cellValueFactory\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                                \u003c/TableColumn\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                                \u003cTableColumn fx:id\u003d\"acadYearColumn\" prefWidth\u003d\"50.0\" text\u003d\"Acad Year\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                                    \u003ccellValueFactory\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                                        \u003cPropertyValueFactory property\u003d\"acadYear\" /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                                    \u003c/cellValueFactory\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                                \u003c/TableColumn\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                                \u003cTableColumn fx:id\u003d\"choiceOneColumn\" prefWidth\u003d\"90.0\" text\u003d\"Choice of Department 1\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                                    \u003ccellValueFactory\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                                        \u003cPropertyValueFactory property\u003d\"choiceOne\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                                    \u003c/cellValueFactory\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                                \u003c/TableColumn\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                                \u003cTableColumn fx:id\u003d\"choiceTwoColumn\" prefWidth\u003d\"90.0\" text\u003d\"Choice of Department 2\"\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                                    \u003ccellValueFactory\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                                        \u003cPropertyValueFactory property\u003d\"choiceTwo\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                                    \u003c/cellValueFactory\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                                \u003c/TableColumn\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                                \u003cTableColumn fx:id\u003d\"timeSlotColumn\" prefWidth\u003d\"150.0\" text\u003d\"Preferred Time\"\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                                    \u003ccellValueFactory\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                                        \u003cPropertyValueFactory property\u003d\"timeSlot\" /\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                                    \u003c/cellValueFactory\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                                \u003c/TableColumn\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                            \u003c/columns\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                        \u003c/TableView\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                    \u003c/content\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                \u003cTextField fx:id\u003d\"userInput\" layoutX\u003d\"7.0\" layoutY\u003d\"538.0\" prefHeight\u003d\"100.0\" prefWidth\u003d\"329.0\" /\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                \u003cTextField fx:id\u003d\"outputMessage\" layoutX\u003d\"7.0\" layoutY\u003d\"538.0\" prefHeight\u003d\"200.0\" prefWidth\u003d\"329.0\"/\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "mrchensheng21": 73
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DEPARTMENT_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_NUS_WORK_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_PERSONAL_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.FACULTY_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ROLE_DESC_AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SLOT_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.YEAR_OF_STUDY_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY_INTERVIEWEE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.address.model.ReadOnlyIntervieweeList;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.address.model.ReadOnlyInterviewerList;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.address.storage.JsonIntervieweeListStorage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.address.storage.JsonInterviewerListStorage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import seedu.address.testutil.IntervieweeBuilder;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        JsonIntervieweeListStorage intervieweeListStorage \u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                new JsonIntervieweeListStorage(temporaryFolder.resolve(\"interviewee.json\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        JsonInterviewerListStorage interviewerListStorage \u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                new JsonInterviewerListStorage(temporaryFolder.resolve(\"interviewer.json\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        StorageManager storage \u003d new StorageManager(intervieweeListStorage, interviewerListStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        JsonIntervieweeListStorage intervieweeListStorage \u003d"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                new JsonIntervieweeListIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionInterviewee.json\"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        JsonInterviewerListStorage interviewerListStorage \u003d"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                new JsonInterviewerListIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionInterviewer.json\"));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        StorageManager storage \u003d new StorageManager(intervieweeListStorage, interviewerListStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + ROLE_DESC_AMY + NAME_DESC_AMY + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                + TAG_DESC_FRIEND + FACULTY_DESC_AMY + YEAR_OF_STUDY_DESC_AMY + DEPARTMENT_DESC_AMY + SLOT_DESC_AMY"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                + EMAIL_PERSONAL_DESC_AMY + EMAIL_NUS_WORK_DESC_AMY;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Person expectedPerson \u003d new IntervieweeBuilder(AMY_INTERVIEWEE).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(expectedPerson);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getIntervieweeList(), model.getInterviewerList(),"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                new UserPrefs(), new LinkedList\u003c\u003e());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called for IntervieweeList."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public static class JsonIntervieweeListIoExceptionThrowingStub extends JsonIntervieweeListStorage {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        private JsonIntervieweeListIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        public void saveIntervieweeList(ReadOnlyIntervieweeList intervieweeList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called for InterviewerList."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public static class JsonInterviewerListIoExceptionThrowingStub extends JsonInterviewerListStorage {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        private JsonInterviewerListIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        public void saveInterviewerList(ReadOnlyInterviewerList interviewerList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 1,
      "dcshzj": 35,
      "-": 137,
      "KendrickAng": 14
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new LinkedList\u003c\u003e());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_newPerson_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs(), new LinkedList\u003c\u003e());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(validPerson);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new AddCommand(validPerson), model,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validPerson), expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInList \u003d model.getAddressBook().getPersonList().get(0);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new AddCommand(personInList), model, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 4,
      "-": 43
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.address.model.IntervieweeList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.address.model.InterviewerList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.address.model.ReadOnlyIntervieweeList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.address.model.ReadOnlyInterviewerList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import seedu.address.model.Schedule;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.address.model.person.Interviewee;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import seedu.address.model.person.Interviewer;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import seedu.address.model.person.Slot;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validPerson);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_PERSON, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        /* TODO: REMOVE THE FOLLOWING LINES AFTER THEIR USAGE IS REMOVED */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        public void deletePerson(Person person) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        public Person getPerson(String name) throws NoSuchElementException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        /* TODO: REMOVE ABOVE LINES */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        public Path getIntervieweeListFilePath() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        public void setIntervieweeListFilePath(Path intervieweeListFilePath) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        public Path getInterviewerListFilePath() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        public void setInterviewerListFilePath(Path interviewerListFilePath) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        public void emailInterviewee(Interviewee interviewee) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        public void setSchedulesList(List\u003cSchedule\u003e schedulesList) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        public LinkedList\u003cSchedule\u003e getSchedulesList() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        public List\u003cObservableList\u003cObservableList\u003cString\u003e\u003e\u003e getObservableLists() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        public List\u003cList\u003cString\u003e\u003e getTitlesLists() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            // TODO: Implementation"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        public List\u003cSlot\u003e getInterviewSlots(String intervieweeName) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        public String getInterviewerSchedule(Interviewer interviewer) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        public void addInterviewerSchedule(Interviewer interviewer) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        public void setIntervieweeList(List\u003cInterviewee\u003e interviewees) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        public void setInterviewerList(List\u003cInterviewer\u003e interviewers) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        public List\u003cInterviewee\u003e getInterviewees() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        public List\u003cInterviewer\u003e getInterviewers() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        public Interviewee getInterviewee(String name) throws NoSuchElementException {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        public void setInterviewee(Interviewee target, Interviewee editedInterviewee) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        public Interviewer getInterviewer(String name) throws NoSuchElementException {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        public void setInterviewer(Interviewer target, Interviewer editedInterviewer) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        public boolean hasInterviewee(Interviewee interviewee) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        public boolean hasInterviewer(Interviewer interviewer) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        public void deleteInterviewee(Interviewee target) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        public void deleteInterviewer(Interviewer target) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        public void addInterviewee(Interviewee interviewee) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        public void addInterviewer(Interviewer interviewer) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        public ReadOnlyIntervieweeList getIntervieweeList() {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        public ReadOnlyInterviewerList getInterviewerList() {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        public ObservableList\u003cInterviewee\u003e getObservableIntervieweeList() {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        public ObservableList\u003cInterviewer\u003e getObservableInterviewerList() {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Person person;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubWithPerson(Person person) {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "            this.person \u003d person;"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "            return this.person.isSamePerson(person);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "            return personsAdded.stream().anyMatch(person::isSamePerson);"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "            personsAdded.add(person);"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        public ReadOnlyIntervieweeList getIntervieweeList() {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            return new IntervieweeList();"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        public ReadOnlyInterviewerList getInterviewerList() {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            return new InterviewerList();"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 19,
      "dcshzj": 104,
      "-": 217
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new LinkedList\u003c\u003e());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new LinkedList\u003c\u003e());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 4,
      "-": 29
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DEPARTMENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FACULTY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NUS_WORK_EMAIL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PERSONAL_EMAIL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ROLE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SLOT;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_YEAR_OF_STUDY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.address.model.IntervieweeList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final String VALID_ROLE_AMY \u003d \"interviewee\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final String VALID_ROLE_BOB \u003d \"interviewee\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final String VALID_FACULTY_AMY \u003d \"School of Computing\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final String VALID_FACULTY_BOB \u003d \"School of Computing\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final String VALID_YEAR_OF_STUDY_AMY \u003d \"2019\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final String VALID_YEAR_OF_STUDY_BOB \u003d \"2019\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final String VALID_DEPARTMENT_AMY \u003d \"Marketing\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final String VALID_DEPARTMENT_BOB \u003d \"Marketing\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final String VALID_SLOT_AMY \u003d \"17/10/2019 12:30-13:30\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final String VALID_SLOT_BOB \u003d \"17/10/2019 12:30-13:30\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final String VALID_PERSONAL_EMAIL_AMY \u003d \"amy_infamy@gmail.com\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final String VALID_NUS_WORK_EMAIL_AMY \u003d \"amy_infamy@u.nus.edu\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final String VALID_PERSONAL_EMAIL_BOB \u003d \"bob_cat@gmail.com\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final String VALID_NUS_WORK_EMAIL_BOB \u003d \"bob_cat@u.nus.edu\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final String ROLE_DESC_AMY \u003d \" \" + PREFIX_ROLE + VALID_ROLE_AMY;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final String ROLE_DESC_BOB \u003d \" \" + PREFIX_ROLE + VALID_ROLE_BOB;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final String FACULTY_DESC_AMY \u003d \" \" + PREFIX_FACULTY + VALID_FACULTY_AMY;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final String FACULTY_DESC_BOB \u003d \" \" + PREFIX_FACULTY + VALID_FACULTY_BOB;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final String YEAR_OF_STUDY_DESC_AMY \u003d \" \" + PREFIX_YEAR_OF_STUDY + VALID_YEAR_OF_STUDY_AMY;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final String YEAR_OF_STUDY_DESC_BOB \u003d \" \" + PREFIX_YEAR_OF_STUDY + VALID_YEAR_OF_STUDY_BOB;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final String DEPARTMENT_DESC_AMY \u003d \" \" + PREFIX_DEPARTMENT + VALID_DEPARTMENT_AMY;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final String DEPARTMENT_DESC_BOB \u003d \" \" + PREFIX_DEPARTMENT + VALID_DEPARTMENT_BOB;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final String SLOT_DESC_AMY \u003d \" \" + PREFIX_SLOT + VALID_SLOT_AMY;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final String SLOT_DESC_BOB \u003d \" \" + PREFIX_SLOT + VALID_SLOT_BOB;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final String EMAIL_PERSONAL_DESC_AMY \u003d \" \" + PREFIX_PERSONAL_EMAIL + VALID_PERSONAL_EMAIL_AMY;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final String EMAIL_NUS_WORK_DESC_AMY \u003d \" \" + PREFIX_NUS_WORK_EMAIL + VALID_NUS_WORK_EMAIL_AMY;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final String EMAIL_PERSONAL_DESC_BOB \u003d \" \" + PREFIX_PERSONAL_EMAIL + VALID_PERSONAL_EMAIL_BOB;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final String EMAIL_NUS_WORK_DESC_BOB \u003d \" \" + PREFIX_NUS_WORK_EMAIL + VALID_NUS_WORK_EMAIL_BOB;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final String INVALID_FACULTY_DESC \u003d \" \" + PREFIX_FACULTY; // empty string not allowed"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final String INVALID_YEAR_OF_STUDY \u003d \" \" + PREFIX_YEAR_OF_STUDY + \"abc\"; // only numbers allowed"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final String INVALID_DEPARTMENT_DESC \u003d \" \" + PREFIX_DEPARTMENT; // empty string not allowed for dept"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final String INVALID_SLOT_DESC \u003d \" \" + PREFIX_SLOT + \"123456\"; // invalid format"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final String INVALID_PERSONAL_EMAIL_DESC \u003d \" \" + PREFIX_PERSONAL_EMAIL + \"bool sheet\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final String INVALID_NUS_WORK_EMAIL_DESC \u003d \" \" + PREFIX_NUS_WORK_EMAIL + \"long dong\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        IntervieweeList expectedIntervieweeList \u003d new IntervieweeList(actualModel.getIntervieweeList());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        assertEquals(expectedIntervieweeList, actualModel.getIntervieweeList());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mirozo": 1,
      "dcshzj": 3,
      "-": 111,
      "KendrickAng": 43
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new LinkedList\u003c\u003e());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs(), new LinkedList\u003c\u003e());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs(), new LinkedList\u003c\u003e());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(p -\u003e false);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(model.getFilteredPersonList().isEmpty());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 6,
      "-": 106
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new LinkedList\u003c\u003e());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs(),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            new LinkedList\u003c\u003e());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs(),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            new LinkedList\u003c\u003e());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(lastPerson, editedPerson);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs(),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            new LinkedList\u003c\u003e());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs(),"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            new LinkedList\u003c\u003e());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonUnfilteredList_failure() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_PERSON, descriptor);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit person in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInList \u003d model.getAddressBook().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            new EditPersonDescriptorBuilder(personInList).build());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, DESC_AMY);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 11,
      "-": 167
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EmailCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "public class EmailCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public void execute_emailInvalidName_invalidPerson() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        assertCommandFailure(new EmailCommand(new Name(\"Alice\")), model, Messages.MESSAGE_INVALID_PERSON_NAME);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ELLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.FIONA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new LinkedList\u003c\u003e());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new LinkedList\u003c\u003e());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_zeroKeywords_noPersonFound() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_multipleKeywords_multiplePersonsFound() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 3,
      "-": 81
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ImportCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mirozo"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mirozo"
        },
        "content": "public class ImportCommandTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    private static final String SUCCESS_FILE_PATH \u003d \"src/test/data/ImportsTest/test.csv\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    private static final String INVALID_FILE_PATH \u003d \"invalid/file/path\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    private static final String INTERVIEWER \u003d \"interviewer\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    public void interviewerImportCommandSuccess() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        ImportCommand importCommand \u003d new ImportCommand(INTERVIEWER + \" \" + SUCCESS_FILE_PATH);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(ImportCommand.SUCCESS_MESSAGE, false, false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        Model expectedModel \u003d model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        assertCommandSuccess(importCommand, model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mirozo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mirozo": 24
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new LinkedList\u003c\u003e());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs(), new LinkedList\u003c\u003e());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 4,
      "-": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DEPARTMENT_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DEPARTMENT_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_NUS_WORK_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_NUS_WORK_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_PERSONAL_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_PERSONAL_DESC_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.FACULTY_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.FACULTY_DESC_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ROLE_DESC_AMY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ROLE_DESC_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SLOT_DESC_AMY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SLOT_DESC_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DEPARTMENT_BOB;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_FACULTY_BOB;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NUS_WORK_EMAIL_BOB;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PERSONAL_EMAIL_BOB;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SLOT_BOB;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_YEAR_OF_STUDY_BOB;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.YEAR_OF_STUDY_DESC_AMY;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.YEAR_OF_STUDY_DESC_BOB;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY_INTERVIEWEE;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB_INTERVIEWEE;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import seedu.address.model.person.Interviewee;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import seedu.address.testutil.IntervieweeBuilder;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    // TODO: Add more tests according to how AddCommandParser has been changed."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Interviewee expectedPerson \u003d new IntervieweeBuilder(BOB_INTERVIEWEE).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + ROLE_DESC_BOB + NAME_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                + TAG_DESC_FRIEND + FACULTY_DESC_BOB + YEAR_OF_STUDY_DESC_BOB"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                + DEPARTMENT_DESC_BOB + SLOT_DESC_BOB + EMAIL_PERSONAL_DESC_BOB + EMAIL_NUS_WORK_DESC_BOB,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseSuccess(parser, ROLE_DESC_BOB + NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                + TAG_DESC_FRIEND + FACULTY_DESC_BOB + YEAR_OF_STUDY_DESC_BOB"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                + DEPARTMENT_DESC_BOB + SLOT_DESC_BOB + EMAIL_PERSONAL_DESC_BOB + EMAIL_NUS_WORK_DESC_BOB,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseSuccess(parser, ROLE_DESC_BOB + NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                + TAG_DESC_FRIEND + FACULTY_DESC_BOB + YEAR_OF_STUDY_DESC_BOB"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                + DEPARTMENT_DESC_BOB + SLOT_DESC_BOB + EMAIL_PERSONAL_DESC_BOB + EMAIL_NUS_WORK_DESC_BOB,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Person expectedPersonMultipleTags \u003d new IntervieweeBuilder(BOB_INTERVIEWEE)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseSuccess(parser, ROLE_DESC_BOB + NAME_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND + FACULTY_DESC_BOB + YEAR_OF_STUDY_DESC_BOB"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                + DEPARTMENT_DESC_BOB + SLOT_DESC_BOB + EMAIL_PERSONAL_DESC_BOB + EMAIL_NUS_WORK_DESC_BOB,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                new AddCommand(expectedPersonMultipleTags));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // TODO: more test cases (ken)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Person expectedPerson \u003d new IntervieweeBuilder(AMY_INTERVIEWEE).withTags().build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseSuccess(parser, ROLE_DESC_AMY + NAME_DESC_AMY + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                + FACULTY_DESC_AMY + YEAR_OF_STUDY_DESC_AMY + DEPARTMENT_DESC_AMY + SLOT_DESC_AMY"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                + EMAIL_PERSONAL_DESC_AMY + EMAIL_NUS_WORK_DESC_AMY,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseFailure(parser, ROLE_DESC_BOB + VALID_NAME_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                + FACULTY_DESC_BOB + YEAR_OF_STUDY_DESC_BOB + DEPARTMENT_DESC_BOB + SLOT_DESC_BOB"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                + EMAIL_PERSONAL_DESC_BOB + EMAIL_NUS_WORK_DESC_BOB,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseFailure(parser, ROLE_DESC_BOB + NAME_DESC_BOB + VALID_PHONE_BOB"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                + FACULTY_DESC_BOB + YEAR_OF_STUDY_DESC_BOB + DEPARTMENT_DESC_BOB + SLOT_DESC_BOB"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                + EMAIL_PERSONAL_DESC_BOB + EMAIL_NUS_WORK_DESC_BOB,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseFailure(parser, ROLE_DESC_BOB + VALID_NAME_BOB + VALID_PHONE_BOB"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                + VALID_FACULTY_BOB + VALID_YEAR_OF_STUDY_BOB + VALID_DEPARTMENT_BOB + VALID_SLOT_BOB"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                + VALID_PERSONAL_EMAIL_BOB + VALID_NUS_WORK_EMAIL_BOB,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseFailure(parser, ROLE_DESC_BOB + INVALID_NAME_DESC + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND + FACULTY_DESC_BOB + YEAR_OF_STUDY_DESC_BOB"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                + DEPARTMENT_DESC_BOB + SLOT_DESC_BOB + EMAIL_PERSONAL_DESC_BOB + EMAIL_NUS_WORK_DESC_BOB,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseFailure(parser, ROLE_DESC_BOB + NAME_DESC_BOB + INVALID_PHONE_DESC"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND + FACULTY_DESC_BOB + YEAR_OF_STUDY_DESC_BOB"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                + DEPARTMENT_DESC_BOB + SLOT_DESC_BOB + EMAIL_PERSONAL_DESC_BOB + EMAIL_NUS_WORK_DESC_BOB,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseFailure(parser, ROLE_DESC_BOB + NAME_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                + INVALID_TAG_DESC + VALID_TAG_FRIEND + FACULTY_DESC_BOB + YEAR_OF_STUDY_DESC_BOB"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                + DEPARTMENT_DESC_BOB + SLOT_DESC_BOB + EMAIL_PERSONAL_DESC_BOB + EMAIL_NUS_WORK_DESC_BOB,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseFailure(parser, ROLE_DESC_BOB + INVALID_NAME_DESC + INVALID_PHONE_DESC"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                + FACULTY_DESC_BOB + YEAR_OF_STUDY_DESC_BOB + DEPARTMENT_DESC_BOB + SLOT_DESC_BOB"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                + EMAIL_PERSONAL_DESC_BOB + EMAIL_NUS_WORK_DESC_BOB,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + ROLE_DESC_BOB + NAME_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND + FACULTY_DESC_BOB + YEAR_OF_STUDY_DESC_BOB"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                + DEPARTMENT_DESC_BOB + SLOT_DESC_BOB + EMAIL_PERSONAL_DESC_BOB + EMAIL_NUS_WORK_DESC_BOB,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 80,
      "KendrickAng": 76
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddressBookParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB_INTERVIEWEE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.address.logic.commands.EmailCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import seedu.address.model.person.Interviewee;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import seedu.address.testutil.IntervieweeBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import seedu.address.testutil.IntervieweeUtil;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParserTest {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser parser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // add interviewee"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Interviewee interviewee \u003d new IntervieweeBuilder(BOB_INTERVIEWEE).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(IntervieweeUtil.getAddCommand(interviewee));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertEquals(new AddCommand(interviewee), command);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public void parseCommand_email() throws Exception {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, EmailCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            -\u003e parser.parseCommand(EmailCommand.COMMAND_WORD));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, EmailCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            -\u003e parser.parseCommand(EmailCommand.COMMAND_WORD + \" timeslot\"));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, EmailCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            -\u003e parser.parseCommand(EmailCommand.COMMAND_WORD + \" invalidcommand\"));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        assertTrue(parser.parseCommand("
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                EmailCommand.COMMAND_WORD + \" timeslot Alice\") instanceof EmailCommand);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 14,
      "-": 98,
      "KendrickAng": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + VALID_PHONE_AMY,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                + NAME_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                + TAG_DESC_FRIEND + PHONE_DESC_AMY + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                + PHONE_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 168,
      "KendrickAng": 13
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EmailCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.address.logic.commands.EmailCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "public class EmailCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    private EmailCommandParser parser \u003d new EmailCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                EmailCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public void parse_validArg_returnsEmailCommand() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        assertParseSuccess(parser, \"timeslot Alice\", new EmailCommand(new Name(\"Alice\")));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ImportCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mirozo"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mirozo"
        },
        "content": "import seedu.address.logic.commands.ImportCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mirozo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mirozo"
        },
        "content": "public class ImportCommandParserTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    private ImportCommandParser parser \u003d new ImportCommandParser();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mirozo"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, ImportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mirozo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mirozo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mirozo": 17
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ColumnTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "public class ColumnTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public void getSize_skeleton_true() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        assertEquals(0, new Column().getSize());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    // Change this to return Interviewee"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public void getInterviewer_skeleton_true() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Person person \u003d new Person(new Name(\"John Doe\"), new Phone(\"12345678\"), new HashSet\u003c\u003e());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        assertEquals(person, new Column().getInterviewer());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    // Change this to return Interivewee instead later"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public void getInterviewee_indexSkeleton_true() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Person person \u003d new Person(new Name(\"John Doe\"), new Phone(\"12345678\"), new HashSet\u003c\u003e());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        assertEquals(person, new Column().getInterviewee(0));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    // Change this to return Interivewee instead later"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public void getInterviewee_timingSkeleton_true() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Person person \u003d new Person(new Name(\"John Doe\"), new Phone(\"12345678\"), new HashSet\u003c\u003e());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        assertEquals(person, new Column().getInterviewee(\"26/10/2019 6:00pm-6:30pm\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 36,
      "KendrickAng": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.*;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.address.testutil.IntervieweeListBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.address.testutil.InterviewerListBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import seedu.address.testutil.SampleSchedules;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        assertEquals(new IntervieweeList(), new IntervieweeList(modelManager.getIntervieweeList()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        assertEquals(new InterviewerList(), new InterviewerList(modelManager.getInterviewerList()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public void constructorWithEmptyParametersExceptSchedule() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        List\u003cSchedule\u003e schedules \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        schedules.add(SampleSchedules.getSampleFilledSchedule());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        schedules.add(SampleSchedules.getSampleAvailabilityTable());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        ModelManager modelManagerWithData \u003d new ModelManager(new IntervieweeList(), new InterviewerList(),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                new UserPrefs(), schedules);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        List\u003cSchedule\u003e schedulesOfModelManager \u003d modelManagerWithData.getSchedulesList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        assertEquals(schedules, schedulesOfModelManager);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        userPrefs.setIntervieweeListFilePath(Paths.get(\"interviewee/list/file/path\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        userPrefs.setInterviewerListFilePath(Paths.get(\"interviewer/list/file/path\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        userPrefs.setIntervieweeListFilePath(Paths.get(\"new/interviewee/list/file/path\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        userPrefs.setInterviewerListFilePath(Paths.get(\"new/interviewer/list/file/path\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public void setIntervieweeListFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setIntervieweeListFilePath(null));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public void setInterviewerListFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setInterviewerListFilePath(null));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public void setIntervieweeListFilePath_validPath_setsIntervieweeListFilePath() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        Path path \u003d Paths.get(\"interviewee/list/file/path\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        modelManager.setIntervieweeListFilePath(path);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        assertEquals(path, modelManager.getIntervieweeListFilePath());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public void setInterviewerListFilePath_validPath_setsInterviewerListFilePath() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        Path path \u003d Paths.get(\"interviewer/list/file/path\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        modelManager.setInterviewerListFilePath(path);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        assertEquals(path, modelManager.getInterviewerListFilePath());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasPerson(null));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        IntervieweeList intervieweeList \u003d new IntervieweeListBuilder().withInterviewee(ANSON).build();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        InterviewerList interviewerList \u003d new InterviewerListBuilder().withInterviewer(null).build();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        IntervieweeList differentIntervieweeList \u003d new IntervieweeList();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        InterviewerList differentInterviewerList \u003d new InterviewerList();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        modelManager \u003d new ModelManager(intervieweeList, interviewerList, userPrefs, new LinkedList\u003c\u003e());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(intervieweeList, interviewerList, userPrefs,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                new LinkedList\u003c\u003e());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        // different intervieweeList -\u003e returns false"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentIntervieweeList, interviewerList, userPrefs,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                new LinkedList\u003c\u003e())));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        // different interviewerList -\u003e returns false"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(intervieweeList, differentInterviewerList, userPrefs,"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                new LinkedList\u003c\u003e())));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        // different intervieweeList and interviewerList -\u003e returns false"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentIntervieweeList, differentInterviewerList,"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                userPrefs, new LinkedList\u003c\u003e())));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        differentUserPrefs.setInterviewerListFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(intervieweeList, interviewerList, differentUserPrefs,"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                new LinkedList\u003c\u003e())));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 12,
      "dcshzj": 50,
      "-": 108
    }
  },
  {
    "path": "src/test/java/seedu/address/model/RowTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": " * Skeleton for RowTest class"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "public class RowTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public void getSize_skeleton_true() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        assertEquals(0, new Row().getSize());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public void getTiming_skeleton_true() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        assertNull(new Row().getTiming());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public void getInterviewee_skeleton_true() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Person person \u003d new Person(new Name(\"John Doe\"), new Phone(\"12345678\"), new HashSet\u003c\u003e());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        assertEquals(person, new Row().getInterviewee(0));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 32,
      "KendrickAng": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ScheduleTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import java.util.Random;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import java.util.stream.IntStream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import seedu.address.model.person.Interviewer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import seedu.address.model.person.Slot;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import seedu.address.testutil.SampleInterviewers;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import seedu.address.testutil.SampleSchedules;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "public class ScheduleTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    private static String[][] sampleFilledTable \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            new String[][]{"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                    {\"10/9/2019(Thur)\", \"Welfare-Hazel\", \"Technical-Johnathan\", \"Publicity-Lucia\"},"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                    {\"6:00pm-6:30pm\", \"John\", \"Steven\", \"NA\"},"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                    {\"6:30pm-7:00pm\", \"Alex\", \"Clark\", \"Alice\"},"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                    {\"7:00pm-7:30pm\", \"Alicia\", \"NA\", \"Charlie\"},"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                    {\"7:30pm-8:00pm\", \"Bruce\", \"NA\", \"Selina\"},"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                    {\"8:00pm-8:30pm\", \"Barry\", \"NA\", \"NA\"},"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                    {\"8:30pm-9:00pm\", \"Natal\", \"NA\", \"NA\"}};"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public void getInterviewsSlot_existingInterviewee_success() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Schedule schedule \u003d SampleSchedules.getSampleFilledSchedule();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        List\u003cSlot\u003e johnSlots \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        johnSlots.add(new Slot(\"10/09/2019\", \"18:00\", \"18:30\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        johnSlots.add(new Slot(\"10/09/2019\", \"18:30\", \"19:00\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        List\u003cSlot\u003e selinaSlots \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        selinaSlots.add(new Slot(\"10/09/2019\", \"19:30\", \"20:00\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        selinaSlots.add(new Slot(\"10/09/2019\", \"20:00\", \"20:30\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        assertEquals(johnSlots, schedule.getInterviewSlots(\"John\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        assertEquals(selinaSlots, schedule.getInterviewSlots(\"Selina\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public void getInterviewsSlots_nonExistingInterviewee_emptyList() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Schedule schedule \u003d SampleSchedules.getSampleFilledSchedule();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        assertEquals(new LinkedList\u003c\u003e(), schedule.getInterviewSlots(\"ABC\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public void hasInterviewer_existingInterviewer_true() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Schedule schedule \u003d SampleSchedules.getSampleAvailabilityTable();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Interviewer hazel \u003d SampleInterviewers.getHazel();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        assertTrue(schedule.hasInterviewer(hazel));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public void hasInterviewer_nonExistingInterviewer_false() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Schedule schedule \u003d SampleSchedules.getSampleAvailabilityTable();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Interviewer bernard \u003d SampleInterviewers.getBernard();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        assertFalse(schedule.hasInterviewer(bernard));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public void addInterviewer_oneValidAvailability_true() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Schedule scheduleTest \u003d SampleSchedules.getSampleAvailabilityTable();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Interviewer interviewer \u003d SampleInterviewers.getInterviewerOneValidAvailability();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        // Generate the expected Schedule"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Schedule expectedSchedule \u003d SampleSchedules.getSampleAvailabilityTable();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        String newTitle \u003d \"Technical - Alice Pauline\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        String[] newColumn \u003d new String[]{\"1\", \"0\", \"0\", \"0\", \"0\", \"0\"};"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        addColumn(expectedSchedule, newTitle, newColumn);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        assertTrue(scheduleTest.addInterviewer(interviewer));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        assertEquals(expectedSchedule, scheduleTest);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public void addInterviewer_multipleValidAvailabilities_true() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Schedule scheduleTest \u003d SampleSchedules.getSampleAvailabilityTable();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Interviewer interviewer \u003d SampleInterviewers.getInterviewerMultipleValidAvailabilities();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        // Generate the expected Schedule"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Schedule expectedSchedule \u003d SampleSchedules.getSampleAvailabilityTable();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        String newTitle \u003d \"Technical - Alice Pauline\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        String[] newColumn \u003d new String[]{\"0\", \"1\", \"1\", \"0\", \"1\", \"0\"};"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        addColumn(expectedSchedule, newTitle, newColumn);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        assertTrue(scheduleTest.addInterviewer(interviewer));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        assertEquals(expectedSchedule, scheduleTest);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public void addInterviewer_multipleInvalidAvailabilities_false() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Schedule scheduleTest \u003d SampleSchedules.getSampleAvailabilityTable();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Interviewer interviewer \u003d SampleInterviewers.getInterviewerMultipleInvalidAvailabilities();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Schedule expectedSchedule \u003d SampleSchedules.getSampleAvailabilityTable();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        assertFalse(scheduleTest.addInterviewer(interviewer));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        assertEquals(expectedSchedule, scheduleTest);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public void addInterviewer_multipleAvailabilitiesSomeInvalid_true() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Schedule scheduleTest \u003d SampleSchedules.getSampleAvailabilityTable();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Interviewer interviewer \u003d SampleInterviewers.getInterviewerMultipleAvailabilitiesSomeInvalid();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        // Generate the expected Schedule"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Schedule expectedSchedule \u003d SampleSchedules.getSampleAvailabilityTable();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        String newTitle \u003d \"Technical - Alice Pauline\";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        String[] newColumn \u003d new String[]{ \"0\", \"0\", \"1\", \"0\", \"1\", \"0\"};"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        addColumn(expectedSchedule, newTitle, newColumn);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        assertTrue(scheduleTest.addInterviewer(interviewer));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        assertEquals(expectedSchedule, scheduleTest);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Add a column into the schedule."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private void addColumn(Schedule schedule, String newTitle, String[] newColumn) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        ObservableList\u003cString\u003e titles \u003d schedule.getTitles();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        titles.add(newTitle);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        ObservableList\u003cObservableList\u003cString\u003e\u003e data \u003d schedule.getObservableList();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        int numRows \u003d data.size();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        IntStream.range(0, numRows).forEach(i -\u003e {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            ObservableList\u003cString\u003e row \u003d data.get(i);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            row.add(newColumn[i]);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        });"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public void equals_differentSchedules_notEqual() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Schedule filledSchedule \u003d SampleSchedules.getSampleFilledSchedule();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Schedule availabilityTable \u003d SampleSchedules.getSampleAvailabilityTable();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        assertNotEquals(filledSchedule, availabilityTable);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public void cloneSchedule_equalTest_equal() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Schedule schedule \u003d SampleSchedules.getSampleFilledSchedule();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Schedule cloneSchedule \u003d Schedule.cloneSchedule(schedule);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        assertEquals(schedule, cloneSchedule);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public void cloneSchedule_independentTest_notEqual() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Schedule schedule \u003d SampleSchedules.getSampleFilledSchedule();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Schedule cloneSchedule \u003d Schedule.cloneSchedule(schedule);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        String newTitle \u003d \"Technical - Alice Pauline\";"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        String[] newColumn \u003d new String[]{\"0\", \"0\", \"1\", \"0\", \"1\", \"0\"};"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        addColumn(schedule, newTitle, newColumn);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        assertNotEquals(schedule, cloneSchedule);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public void toTwoDimensionalObservableList_twoDimensionalLinkedList_success() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        LinkedList\u003cLinkedList\u003cString\u003e\u003e list \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        IntStream.range(0, 3).forEach(i -\u003e list.add(getRandomList(5)));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        ObservableList\u003cObservableList\u003cString\u003e\u003e clone \u003d Schedule.toTwoDimensionalObservableList(list);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        assertEquals(list, clone);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private LinkedList\u003cString\u003e getRandomList(int n) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        LinkedList\u003cString\u003e list \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Random rand \u003d new Random();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        IntStream.range(0, n).forEach(i -\u003e list.add(String.valueOf(rand.nextInt(1000))));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 165,
      "mrchensheng21": 9,
      "KendrickAng": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/model/UserPrefsTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public void setIntervieweeListFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setIntervieweeListFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public void setInterviewerListFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setInterviewerListFilePath(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 8,
      "-": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/DepartmentTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "class DepartmentTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Department(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public void constructor_invalidDepartment_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Department(\"\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Department(\" Logistics\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public void isValidDepartment() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // null string"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Department.isValidDepartment(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // invalid string -\u003e return false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertFalse(Department.isValidDepartment(\" \"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertFalse(Department.isValidDepartment(\" Marketing\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // valid string -\u003e return true"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertTrue(Department.isValidDepartment(\"Marking\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertTrue(Department.isValidDepartment(\"LoGiStIcs\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertTrue(Department.isValidDepartment(\"Log1i5t1cs!@!\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KendrickAng": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/EmailsTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertIterableEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertSame;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "class EmailsTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Emails(null));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public void constructor_validInput_returnsInstance() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertSame(new Emails(new HashMap\u003c\u003e()).getClass(), Emails.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public void getEmailsOfType() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Email nusEmail \u003d new Email(\"alice@u.nus.edu\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Email personalEmail \u003d new Email(\"alice@gmail.com\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Emails emails \u003d new Emails().addNusEmail(nusEmail).addPersonalEmail(personalEmail);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertIterableEquals(emails.getEmailsOfType(EmailType.NUS), Arrays.asList(nusEmail));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertIterableEquals(emails.getEmailsOfType(EmailType.PERSONAL), Arrays.asList(personalEmail));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KendrickAng": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/IntervieweeTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "class IntervieweeTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    // TODO: Implementation"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KendrickAng": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/InterviewerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "class InterviewerTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    // TODO: Implementation"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KendrickAng": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/NameContainsKeywordsPredicateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // Keywords match phone, but does not match name"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withPhone(\"12345\").build()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 71,
      "KendrickAng": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/PersonTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e person.getTags().remove(0));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isSamePerson() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(ALICE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Person aliceCopy \u003d new PersonBuilder(ALICE).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertFalse(ALICE.equals(BOB_PERSON));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 71,
      "KendrickAng": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/RoleTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "class RoleTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Role(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public void constructor_invalidRole_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        String invalidRole \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Role(invalidRole));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public void isValidRole() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // null role"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Role.isValidRole(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // invalid role"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertFalse(Role.isValidRole(\"\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertFalse(Role.isValidRole(\"Interviewer\")); // no capitalised roles"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertFalse(Role.isValidRole(\"Interviewee\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertFalse(Role.isValidRole(\"teacher\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertFalse(Role.isValidRole(\"interviewwee\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // valid role"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertTrue(Role.isValidRole(\"interviewee\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertTrue(Role.isValidRole(\"interviewer\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Test public void getRole() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // interviewee role"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertEquals(RoleType.INTERVIEWEE, new Role(\"interviewee\").getRole());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // interviewer role"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertEquals(RoleType.INTERVIEWER, new Role(\"interviewer\").getRole());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // invalid role"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Role(\"Interviewer\").getRole());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KendrickAng": 50
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/SlotTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "class SlotTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public void constructor_null_throwsNUllPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Slot(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public void constructor_invalidSlot_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Slot(\" \"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Slot(\"1234\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Slot(\"12/34/2019 12:34-12:34\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public void constructorThreeArgs_validInput_noExceptionThrows() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        new Slot(\"16/10/2019\", \"00:00\", \"23:59\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public void isValidSlot() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // null slot"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Slot(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // invalid slot"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertFalse(Slot.isValidSlot(\"\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertFalse(Slot.isValidSlot(\"16-10-2019 00:00-00:01\")); // incorrect date separator"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertFalse(Slot.isValidSlot(\"16/10/2019 0000-0001\")); // incorrect time format"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertFalse(Slot.isValidSlot(\"16/10/2019 00:00 - 00:01\")); // incorrect spacing"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertFalse(Slot.isValidSlot(\"00/10/2019 00:00-00:01\")); // incorrect date format"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertFalse(Slot.isValidSlot(\"01/10/2019 24:59-24:60\")); // incorrect time format"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // valid slot"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertTrue(Slot.isValidSlot(String.format(Slot.STRING_FORMAT, \"16/10/2019\", \"00:00\", \"23:59\")));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertTrue(Slot.isValidSlot(\"01/01/1997 10:00-10:10\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertTrue(Slot.isValidSlot(\"01/01/0001 00:00-00:01\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertTrue(Slot.isValidSlot(\"11/01/0001 00:00-00:01\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertTrue(Slot.isValidSlot(\"01/11/0001 00:00-00:01\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertTrue(Slot.isValidSlot(\"01/01/1997 00:00-00:01\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertTrue(Slot.isValidSlot(\"30/12/9999 00:00-23:59\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertTrue(Slot.isValidSlot(\"16/10/2019 03:01-20:01\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertTrue(Slot.isValidSlot(\"03/12/1997 10:00-13:00\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KendrickAng": 52
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/UniquePersonListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonListTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList uniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.contains(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(uniquePersonList.contains(ALICE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personInList_returnsTrue() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(uniquePersonList.contains(ALICE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(uniquePersonList.contains(editedAlice));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.add(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_duplicatePerson_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.add(ALICE));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullTargetPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(null, ALICE));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullEditedPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(ALICE, null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_targetPersonNotInList_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.setPerson(ALICE, ALICE));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonIsSamePerson_success() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, ALICE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasSameIdentity_success() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, editedAlice);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(editedAlice);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        uniquePersonList.setPerson(ALICE, BOB_PERSON);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        expectedUniquePersonList.add(BOB_PERSON);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        uniquePersonList.add(BOB_PERSON);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPerson(ALICE, BOB_PERSON));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.remove(null));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_personDoesNotExist_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.remove(ALICE));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_existingPerson_removesPerson() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.remove(ALICE);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullUniquePersonList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((UniquePersonList) null));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        expectedUniquePersonList.add(BOB_PERSON);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons(expectedUniquePersonList);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((List\u003cPerson\u003e) null));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        List\u003cPerson\u003e personList \u003d Collections.singletonList(BOB_PERSON);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons(personList);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        expectedUniquePersonList.add(BOB_PERSON);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e listWithDuplicatePersons \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPersons(listWithDuplicatePersons));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e uniquePersonList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 159,
      "KendrickAng": 10
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedDepartmentTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "class JsonAdaptedDepartmentTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    // TODO: Implementation"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KendrickAng": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedIntervieweeTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ANSON;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import seedu.address.model.person.DefaultValues;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import seedu.address.model.person.Department;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import seedu.address.model.person.Emails;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import seedu.address.model.person.Faculty;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import seedu.address.model.person.Slot;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "class JsonAdaptedIntervieweeTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private static final Faculty VALID_FACULTY \u003d DefaultValues.DEFAULT_FACULTY;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private static final Integer VALID_YEAR_OF_STUDY \u003d DefaultValues.DEFAULT_YEAR_OF_STUDY;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private static final List\u003cDepartment\u003e VALID_DEPARTMENTS \u003d DefaultValues.DEFAULT_DEPARTMENTS;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private static final List\u003cSlot\u003e VALID_SLOTS \u003d DefaultValues.DEFAULT_TIMESLOTS;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private static final Emails VALID_EMAILS \u003d DefaultValues.DEFAULT_EMAILS;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private static final Name VALID_NAME \u003d DefaultValues.DEFAULT_NAME;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private static final Phone VALID_PHONE \u003d DefaultValues.DEFAULT_PHONE;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d ANSON.getTags().stream()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public void toModelType_validIntervieweeDetails_returnsInterviewee() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        JsonAdaptedInterviewee interviewee \u003d new JsonAdaptedInterviewee(ANSON);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertEquals(ANSON, interviewee.toModelType());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Test void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KendrickAng": 44
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedPersonTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.storage.JsonAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAdaptedPersonTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(BENSON);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BENSON, person.toModelType());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                new JsonAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_TAGS);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(null, VALID_PHONE, VALID_TAGS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_TAGS);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, null, VALID_TAGS);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, invalidTags);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 69,
      "KendrickAng": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedSlotTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "class JsonAdaptedSlotTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    // TODO: Implementation"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KendrickAng": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonUserPrefsStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        userPrefs.setIntervieweeListFilePath(Paths.get(\"interviewees.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        userPrefs.setInterviewerListFilePath(Paths.get(\"interviewers.json\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 2,
      "-": 122
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalIntervieweeList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalInterviewerList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.address.model.IntervieweeList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.address.model.InterviewerList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.address.model.ReadOnlyIntervieweeList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.address.model.ReadOnlyInterviewerList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        JsonIntervieweeListStorage intervieweeListStorage \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                new JsonIntervieweeListStorage(getTempFilePath(\"intervieweeList\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        JsonInterviewerListStorage interviewerListStorage \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                new JsonInterviewerListStorage(getTempFilePath(\"interviewerList\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        storageManager \u003d new StorageManager(intervieweeListStorage, interviewerListStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public void intervieweeListReadSave() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "         * {@link JsonIntervieweeListStorage} class."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonIntervieweeListStorageTest} class."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        IntervieweeList original \u003d getTypicalIntervieweeList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        storageManager.saveIntervieweeList(original);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        ReadOnlyIntervieweeList retrieved \u003d storageManager.readIntervieweeList().get();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        assertEquals(original, new IntervieweeList(retrieved));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public void interviewerListReadSave() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "         * {@link JsonInterviewerListStorage} class."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonInterviewerListStorageTest} class."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "         */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        InterviewerList original \u003d getTypicalInterviewerList();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        storageManager.saveInterviewerList(original);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        ReadOnlyInterviewerList retrieved \u003d storageManager.readInterviewerList().get();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        assertEquals(original, new InterviewerList(retrieved));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public void getIntervieweeListFilePath() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        assertNotNull(storageManager.getIntervieweeListFilePath());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public void getInterviewerListFilePath() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        assertNotNull(storageManager.getInterviewerListFilePath());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 39,
      "-": 54
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/IntervieweeBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import seedu.address.model.person.Department;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import seedu.address.model.person.Emails;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import seedu.address.model.person.Faculty;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import seedu.address.model.person.Interviewee;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import seedu.address.model.person.Slot;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " * A utility class to help with building Interviewee objects."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "public class IntervieweeBuilder extends PersonBuilder {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final String DEFAULT_FACULTY \u003d \"School of Computing\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final String DEFAULT_YEAR_OF_STUDY \u003d \"2019\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private Faculty faculty;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private Integer yearOfStudy;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private List\u003cDepartment\u003e departmentChoices;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private List\u003cSlot\u003e allocatedTimeslots;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private Emails emails;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Partially initializes the IntervieweeBuilder with {@code p}\u0027s data. Faculty will be {@code DEFAULT_FACULTY} and"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * year of study will be {@code DEFAULT_YEAR_OF_STUDY}, with all other fields empty but not null."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @param p the person to copy."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public IntervieweeBuilder(Person p) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        super(p);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        this.faculty \u003d new Faculty(DEFAULT_FACULTY);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        this.yearOfStudy \u003d Integer.parseInt(DEFAULT_YEAR_OF_STUDY);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        this.departmentChoices \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        this.allocatedTimeslots \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        this.emails \u003d new Emails();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Initializes the IntervieweeBuilder with the data of {@code toCopy}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public IntervieweeBuilder(Interviewee i) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        super(i.getName().fullName,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                i.getPhone().value,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                i.getTags().stream().map(x -\u003e x.tagName).toArray(String[]::new));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        faculty \u003d i.getFaculty();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        yearOfStudy \u003d i.getYearOfStudy();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        departmentChoices \u003d i.getDepartmentChoices();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        allocatedTimeslots \u003d i.getAvailableTimeslots();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        emails \u003d i.getEmails();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Sets the {@code Faculty} of the {@code Interviewee} that we are building."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public IntervieweeBuilder withFaculty(String faculty) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        this.faculty \u003d new Faculty(faculty);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Sets the stud year of the {@code Interviewee} that we are building."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public IntervieweeBuilder withYearOfStudy(String yearOfStudy) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        this.yearOfStudy \u003d Integer.parseInt(yearOfStudy);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Sets the {@code Department}s of the {@code Interviewee} that we are building."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public IntervieweeBuilder withDepartmentChoices(String... departments) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        this.departmentChoices \u003d SampleDataUtil.getDepartmentList(departments);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Sets the {@code Slot}s of the {@code Interviewee} that we are building."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public IntervieweeBuilder withTimeslots(String... timeslots) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        this.allocatedTimeslots \u003d SampleDataUtil.getTimeslotList(timeslots);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Sets the personal email of the {@code Interviewee} that we are building."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public IntervieweeBuilder withPersonalEmail(String email) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Email toAdd \u003d new Email(email);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        if (emails !\u003d null) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            this.emails.addPersonalEmail(toAdd);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            this.emails \u003d new Emails().addPersonalEmail(toAdd);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Sets the Nus work email of the {@code Interviewee} that we are building."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public IntervieweeBuilder withNusWorkEmail(String email) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Email toAdd \u003d new Email(email);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        if (emails !\u003d null) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            this.emails.addNusEmail(toAdd);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            this.emails \u003d new Emails().addNusEmail(toAdd);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Clears all tags from the parent class and replaces it with the supplied tags."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public IntervieweeBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        super.getTags().clear();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        super.getTags().addAll(Arrays.stream(tags).map(Tag::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Builds the Interviewee."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public Interviewee build() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return new Interviewee.IntervieweeBuilder(getName(), getPhone(), getTags())"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                    .faculty(faculty)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                    .yearOfStudy(yearOfStudy)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                    .departmentChoices(departmentChoices)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                    .availableTimeslots(allocatedTimeslots)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                    .emails(emails)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                    .build();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KendrickAng": 142
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/IntervieweeListBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.address.model.IntervieweeList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.address.model.person.Interviewee;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dcshzj"
        },
        "content": " * A utility class to help with building IntervieweeList objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dcshzj"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dcshzj"
        },
        "content": " *     {@code IntervieweeList iveelist \u003d new IntervieweeListBuilder().withInterviewee(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dcshzj"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "public class IntervieweeListBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    private IntervieweeList intervieweeList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public IntervieweeListBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        this.intervieweeList \u003d new IntervieweeList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public IntervieweeListBuilder(IntervieweeList intervieweeList) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        this.intervieweeList \u003d intervieweeList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * Adds a new {@code Interviewee} to the {@code IntervieweeList} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public IntervieweeListBuilder withInterviewee(Interviewee interviewee) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        this.intervieweeList.addInterviewee(interviewee);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public IntervieweeList build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        return this.intervieweeList;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/IntervieweeUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DEPARTMENT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FACULTY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NUS_WORK_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PERSONAL_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ROLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SLOT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_YEAR_OF_STUDY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.address.model.person.EmailType.NUS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.address.model.person.EmailType.PERSONAL;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import seedu.address.model.person.Interviewee;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " * A utility class for Interviewee."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "public class IntervieweeUtil extends PersonUtil {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Returns an add command string for the {@code interviewee}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static String getAddCommand(Interviewee interviewee) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getIntervieweeDetails(interviewee);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Returns the part of the command string for the given {@code interviewee}\u0027s details."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static String getIntervieweeDetails(Interviewee interviewee) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        sb.append(PREFIX_ROLE + \"interviewee\" + \" \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        sb.append(getPersonDetails(interviewee));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        sb.append(PREFIX_FACULTY + interviewee.getFaculty().faculty + \" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        sb.append(PREFIX_YEAR_OF_STUDY + interviewee.getYearOfStudy().toString() + \" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        interviewee.getEmails().getEmailsOfType(PERSONAL).stream().forEach("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            e -\u003e sb.append(PREFIX_PERSONAL_EMAIL + e.toString() + \" \")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        );"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        interviewee.getEmails().getEmailsOfType(NUS).stream().forEach("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            e -\u003e sb.append(PREFIX_NUS_WORK_EMAIL + e.toString() + \" \")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        );"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        interviewee.getDepartmentChoices().stream().forEach("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            d -\u003e sb.append(PREFIX_DEPARTMENT + d.department + \" \")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        );"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        interviewee.getAvailableTimeslots().stream().forEach("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            s -\u003e sb.append(PREFIX_SLOT + s.toString() + \" \")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        );"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    // TODO: getEditIntervieweeDetails"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KendrickAng": 53
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/InterviewerBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.address.model.person.Department;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.address.model.person.Emails;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.address.model.person.Faculty;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.address.model.person.Interviewer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.address.model.person.Slot;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dcshzj"
        },
        "content": " * A utility class to help with building Interviewer objects."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dcshzj"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "public class InterviewerBuilder extends PersonBuilder {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public static final String DEFAULT_DEPARTMENT \u003d \"Technical\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"test@example.com\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    private Department department;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    private List\u003cSlot\u003e availabilities;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * Partially initializes the InterviewerBuilder with {@code p}\u0027s data. Department will be"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * {@code DEFAULT_DEPARTMENT}, Email will be {@code DEFAULT_EMAIL}, with all other fields empty but not"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * null."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * @param p the person to copy."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public InterviewerBuilder(Person p) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        super(p);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        this.department \u003d new Department(DEFAULT_DEPARTMENT);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        this.email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        this.availabilities \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * Initializes the InterviewerBuilder with the data of {@code toCopy}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public InterviewerBuilder(Interviewer i) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        super(i.getName().fullName,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                i.getPhone().value,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                i.getTags().stream().map(x -\u003e x.tagName).toArray(String[]::new));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        this.department \u003d i.getDepartment();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        this.email \u003d i.getEmail();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        this.availabilities \u003d i.getAvailabilities();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * Sets the {@code Department} of the {@code Interviewer} that we are building."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public InterviewerBuilder withDepartment(String department) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        this.department \u003d new Department(department);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * Sets the {@code Email} of the {@code Interviewer} that we are building."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public InterviewerBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * Sets the {@code Slot}s of the {@code Interviewer} that we are building."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public InterviewerBuilder withAvailabilities(String... timeslots) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        this.availabilities \u003d SampleDataUtil.getTimeslotList(timeslots);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * Clears all tags from the parent class and replaces it with the supplied tags."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public InterviewerBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        super.getTags().clear();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        super.getTags().addAll(Arrays.stream(tags).map(Tag::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * Builds the Interviewer."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public Interviewer build() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        return new Interviewer.InterviewerBuilder(getName(), getPhone(), getTags())"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                .department(department)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                .availabilities(availabilities)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                .email(email)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 101
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/InterviewerListBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.address.model.InterviewerList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.address.model.person.Interviewer;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dcshzj"
        },
        "content": " * A utility class to help with building InterviewerList objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dcshzj"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dcshzj"
        },
        "content": " *     {@code InterviewerList iverlist \u003d new InterviewerListBuilder().withInterviewer(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dcshzj"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "public class InterviewerListBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    private InterviewerList interviewerList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public InterviewerListBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        this.interviewerList \u003d new InterviewerList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public InterviewerListBuilder(InterviewerList interviewerList) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        this.interviewerList \u003d interviewerList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * Adds a new {@code Interviewer} to the {@code InterviewerList} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public InterviewerListBuilder withInterviewer(Interviewer interviewer) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        this.interviewerList.addInterviewer(interviewer);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public InterviewerList build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        return this.interviewerList;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Person objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonBuilder {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder(Person personToCopy) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d personToCopy.getName();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d personToCopy.getPhone();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public PersonBuilder(String name, String phone, String... tags) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        this.tags \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withName(String name) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public Person build() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return new Person(name, phone, tags);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return tags;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 67,
      "KendrickAng": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/SampleInterviewers.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import seedu.address.model.person.DefaultValues;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import seedu.address.model.person.Department;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import seedu.address.model.person.Interviewer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import seedu.address.model.person.Slot;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": " * A class which gives sample interviewers."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "public class SampleInterviewers {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public static Interviewer getInterviewerOneValidAvailability() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        String[] availabilities \u003d new String[]{\"10/09/2019 18:00-18:30\"};"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return getAlicePauline(availabilities);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public static Interviewer getInterviewerMultipleValidAvailabilities() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        String[] availabilities \u003d new String[]{\"10/09/2019 18:30-19:00\", \"10/09/2019 19:00-19:30\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            \"10/09/2019 20:00-20:30\"};"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return getAlicePauline(availabilities);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Invalid date and invalid time."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public static Interviewer getInterviewerMultipleInvalidAvailabilities() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        String[] availabilities \u003d new String[]{\"20/09/2019 18:30-19:00\", \"10/09/2019 22:00-23:30\"};"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return getAlicePauline(availabilities);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public static Interviewer getInterviewerMultipleAvailabilitiesSomeInvalid() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        String[] availabilities \u003d new String[]{\"08/09/2019 18:30-19:00\", \"10/09/2019 19:00-19:30\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            \"10/09/2019 20:00-20:30\", \"10/09/2019 23:00-23:30\"};"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return getAlicePauline(availabilities);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private static Interviewer getAlicePauline(String[] availabilities) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Person alice \u003d TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Department department \u003d new Department(\"Technical\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Name name \u003d alice.getName();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Phone phone \u003d alice.getPhone();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Email email \u003d DefaultValues.DEFAULT_PERSONAL_EMAIL;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Set\u003cTag\u003e tags \u003d alice.getTags();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Interviewer alicePauline \u003d new Interviewer.InterviewerBuilder(name, phone, tags)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .email(email)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .department(department)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        alicePauline.setAvailabilities(Arrays.stream(availabilities).map(Slot::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return alicePauline;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public static Interviewer getHazel() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Interviewer hazel \u003d getInterviewer(\"Hazel\", \"Welfare\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        String[] availabilitiesAsArray \u003d new String[]{\"10/09/2019 18:30-19:00\", \"10/09/2019 19:00-19:30\","
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            \"10/09/2019 20:00-20:30\", \"10/09/2019 20:30-21:00\"};"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        List\u003cString\u003e availabilities \u003d Arrays.asList(availabilitiesAsArray);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        hazel.setAvailabilities(availabilities.stream().map(Slot::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return hazel;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public static Interviewer getBernard() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Interviewer bernard \u003d getInterviewer(\"Bernard\", \"Presidential\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return bernard;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private static Interviewer getInterviewer(String nameString, String departmentString) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Person alice \u003d TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Department department \u003d new Department(departmentString);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Name name \u003d new Name(nameString);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Phone phone \u003d alice.getPhone();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Email email \u003d DefaultValues.DEFAULT_PERSONAL_EMAIL;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Set\u003cTag\u003e tags \u003d alice.getTags();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return new Interviewer.InterviewerBuilder(name, phone, tags)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .department(department)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .email(email)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 69,
      "KendrickAng": 23
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/SampleSchedules.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import seedu.address.model.Schedule;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": " * A class which gives sample Schedule data."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "public class SampleSchedules {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private static String[][] sampleFilledTable \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        new String[][]{"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            {\"10/09/2019\", \"Welfare - Hazel\", \"Technical - Johnathan\", \"Publicity - Lucia\"},"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            {\"18:00-18:30\", \"John\", \"Steven\", \"0\"},"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            {\"18:30-19:00\", \"Alex\", \"Clark\", \"John\"},"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            {\"19:00-19:30\", \"Alicia\", \"0\", \"charlie\"},"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            {\"19:30-20:00\", \"Charlie\", \"0\", \"Selina\"},"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            {\"20:00-20:30\", \"Selina\", \"0\", \"0\"},"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            {\"20:30-21:00\", \"Natal\", \"0\", \"0\"}};"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private static String[][] sampleAvailabilityTable \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        new String[][]{"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            {\"10/09/2019\", \"Welfare - Hazel\", \"Technical - Johnathan\", \"Publicity - Lucia\"},"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            {\"18:00-18:30\", \"0\", \"0\", \"1\"},"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            {\"18:30-19:00\", \"1\", \"1\", \"0\"},"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            {\"19:00-19:30\", \"1\", \"1\", \"0\"},"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            {\"19:30-20:00\", \"0\", \"0\", \"1\"},"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            {\"20:00-20:30\", \"1\", \"0\", \"1\"},"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            {\"20:30-21:00\", \"1\", \"0\", \"0\"}};"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public static Schedule getSampleFilledSchedule() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        String date \u003d sampleFilledTable[0][0];"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        LinkedList\u003cLinkedList\u003cString\u003e\u003e sampleData \u003d TestUtil.toTwoDimensionalLinkedList(sampleFilledTable);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return new Schedule(date, sampleData);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public static Schedule getSampleAvailabilityTable() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        LinkedList\u003cLinkedList\u003cString\u003e\u003e table \u003d TestUtil.toTwoDimensionalLinkedList(sampleAvailabilityTable);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        ObservableList\u003cObservableList\u003cString\u003e\u003e tableObservable \u003d Schedule.toTwoDimensionalObservableList(table);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        ObservableList\u003cString\u003e columnTitles \u003d tableObservable.get(0);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        String date \u003d columnTitles.get(0);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return new Schedule(date, table);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 44,
      "KendrickAng": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the middle index of the person in the {@code model}\u0027s person list."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(model.getFilteredPersonList().size() / 2);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last index of the person in the {@code model}\u0027s person list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the person in the {@code model}\u0027s person list at {@code index}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person getPerson(Model model, Index index) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredPersonList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Returns the given two dimensional array of strings as a two dimensional LinkedList of strings."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public static LinkedList\u003cLinkedList\u003cString\u003e\u003e toTwoDimensionalLinkedList(String[][] table) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        LinkedList\u003cLinkedList\u003cString\u003e\u003e tableCopy \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        for (String[] row : table) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            LinkedList\u003cString\u003e rowCopy \u003d new LinkedList\u003c\u003e(Arrays.asList(row));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            tableCopy.add(rowCopy);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return tableCopy;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 14,
      "-": 55
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalPersons.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DEPARTMENT_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DEPARTMENT_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_FACULTY_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_FACULTY_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NUS_WORK_EMAIL_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NUS_WORK_EMAIL_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PERSONAL_EMAIL_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PERSONAL_EMAIL_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SLOT_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SLOT_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_YEAR_OF_STUDY_AMY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_YEAR_OF_STUDY_BOB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.address.model.IntervieweeList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.address.model.InterviewerList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import seedu.address.model.person.Interviewee;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "import seedu.address.model.person.Interviewer;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalPersons {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final Interviewee ANSON \u003d new IntervieweeBuilder(new PersonBuilder().withName(\"Anson Pauline\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            .withPhone(\"94351253\").withTags(\"friends\").build())"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            .withFaculty(\"School of computing\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            .withYearOfStudy(\"2019\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            .withDepartmentChoices(\"Marketing\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            .withTimeslots(\"16/10/2019 00:00-23:59\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            .withPersonalEmail(\"anson@gmail.com\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            .withNusWorkEmail(\"anson@u.nus.edu\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public static final Interviewer IAN \u003d new InterviewerBuilder(new PersonBuilder().withName(\"Ian Scotch\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            .withPhone(\"91234567\").withTags(\"senior\").build())"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            .withDepartment(\"Technical\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            .withEmail(\"test@example.com\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            .withAvailabilities(\"23/10/2019 00:00-23:59\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            .withPhone(\"94351253\").withTags(\"friends\").build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            .withPhone(\"98765432\").withTags(\"owesMoney\", \"friends\").build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\").build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\").build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\").build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\").build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\").build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\").build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final Person AMY_PERSON \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final Interviewee AMY_INTERVIEWEE \u003d new IntervieweeBuilder(AMY_PERSON).withFaculty(VALID_FACULTY_AMY)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            .withYearOfStudy(VALID_YEAR_OF_STUDY_AMY).withDepartmentChoices(VALID_DEPARTMENT_AMY)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            .withTimeslots(VALID_SLOT_AMY).withPersonalEmail(VALID_PERSONAL_EMAIL_AMY)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            .withNusWorkEmail(VALID_NUS_WORK_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final Person BOB_PERSON \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final Interviewee BOB_INTERVIEWEE \u003d new IntervieweeBuilder(BOB_PERSON).withFaculty(VALID_FACULTY_BOB)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            .withYearOfStudy(VALID_YEAR_OF_STUDY_BOB).withDepartmentChoices(VALID_DEPARTMENT_BOB)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            .withTimeslots(VALID_SLOT_BOB).withPersonalEmail(VALID_PERSONAL_EMAIL_BOB)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            .withNusWorkEmail(VALID_NUS_WORK_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private TypicalPersons() {} // prevents instantiation"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * Returns an {@code IntervieweeList} with all the typical Interviewees."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public static IntervieweeList getTypicalIntervieweeList() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        IntervieweeList iveelist \u003d new IntervieweeList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        for (Interviewee interviewee : getTypicalInterviewees()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            iveelist.addInterviewee(interviewee);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        return iveelist;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "     * Returns an {@code InterviewerList} with all the typical Interviewers."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public static InterviewerList getTypicalInterviewerList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        InterviewerList iverlist \u003d new InterviewerList();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        for (Interviewer interviewer : getTypicalInterviewers()) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "            iverlist.addInterviewer(interviewer);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        return iverlist;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public static List\u003cInterviewee\u003e getTypicalInterviewees() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ANSON));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dcshzj"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "    public static List\u003cInterviewer\u003e getTypicalInterviewers() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dcshzj"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(IAN));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cPerson\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcshzj": 37,
      "-": 43,
      "KendrickAng": 44
    }
  },
  {
    "path": "test.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "testing"
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 1
    }
  }
]
